<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PIN-YI – Docker 相關</title><link>https://pin-yi.me/blog/docker/</link><description>Recent content in Docker 相關 on PIN-YI</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><atom:link href="https://pin-yi.me/blog/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Prometheus 和 Grafana 打造監控預警系統 (Docker 篇)</title><link>https://pin-yi.me/blog/docker/prometheus-grafana-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/docker/prometheus-grafana-docker/</guid><description>
&lt;p>還記得我們上次架設 EFK 來獲得容器的日誌嗎!?
身為一個 SRE 除了收集日誌外，還需要監控每個系統或是服務的運行狀況，並在警急情況即時通知相關人員作為應對處理。所以透過好的 Monitoring/Alert System 了解目前 Server 硬體系統狀況和整個 Service 的網路狀況是一件非常重要的一件事情。&lt;/p>
&lt;p>在眾多的 Monitor 工具中，&lt;a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus&lt;/a> 是一個很方便且完善的監控預警框架 TSDB (Time Series Database) 時間序列資料庫，可以快速且容易的建立不同維度的指標 (Metrics) 和整合不同的 Alert Tool 以及資訊視覺化圖表的監控工具並提供自帶的 &lt;a href="https://prometheus.io/docs/prometheus/latest/querying/basics/" target="_blank" rel="noopener">PromQL&lt;/a> 進行 query 查詢。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/prometheus.png"
alt="Prometheus Logo" width="400">&lt;figcaption>
&lt;p>Prometheus Logo&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們先來看看 Prometheus 的架構圖，可以更了解 Prometheus 整體的定位：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/prometheus-architecture.jpg"
alt="Prometheus 架構圖 (圖片來源：使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統)" width="800">&lt;figcaption>
&lt;p>Prometheus 架構圖 (圖片來源：&lt;a href="https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/" target="_blank" rel="noopener">使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統&lt;/a>)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol>
&lt;li>
&lt;p>有一個 Prometheus server 主體，會去 Prometheus Client Pull 相關的指標 (Metrics)，若是短期的 Job 例如 CronJob 在還來不及 Pull 資料回來可能就已經完成任務了、清洗掉資料。所以會有一個 &lt;code>pushgateway&lt;/code> 接收 Job Push 過來的相關資訊，Prometheus Server 再從其中拉取資料。 (圖片左半部)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Service Discovery 可以更好的蒐集 Kubernetes 相關的資訊。 (圖片上半部)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Prometheus Server 主體會將資料儲存在 Local On-Disk Time Series Database 或是可以串接 Remote Storage Systems。(圖片下半部)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Prometheus Server 資料拉回來後可以使用本身自帶的 Web UI 或是 Grafana 等其他的 Client 來呈現。(圖片右下半部)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>當抓取資料的值超過 Alert Rule 所設定的閥值 (threshold) 時，Alertmanager 就會將訊息送出，可以透過 Email、Slack 等訊息通知，提醒相關人員進行處理。(圖片右上半部)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;br>
&lt;p>Prometheus 可能在儲存擴展上比不上其他 Time Series Database，但在整合各種第三方的 Data Source 上十分方便，且在支援雲端服務和 Container 容器相關工具也十分友好。但在圖片的表現上就相較於單薄，所以會搭配我們接下來要介紹的 Grafanac 精美儀表板工具來進行資訊視覺化和圖表的呈現。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/grafana.jpg"
alt="Grafana Logo" width="400">&lt;figcaption>
&lt;p>Grafana Logo&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>Grafana 是由 Grafana Lab 經營的一個非常精美的儀表板系統，可以整合各種不同的 Data Source，例如：Prometheus、Elasticsearch、MySQL、PostgreSQL 等。透過不同種指標 (Metrics) 呈現在 Dashboard 上。如果還是不太清楚，可以把 Prometheus Grafana 分別想成 Prometheus 是 EFK 的 Elasticsearch，Grafana 想成是 EFK 的 Kibana。&lt;/p>
&lt;br>
&lt;p>今天我們要透過 Docker-Compose 搭配 Nginx 實作一個簡單的 Web Service 範例，並整合 &lt;a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus&lt;/a> 和 &lt;a href="https://grafana.com/" target="_blank" rel="noopener">Grafana&lt;/a> 來建立一個 Web Service 監控預警系統。&lt;/p>
&lt;p>此文章程式碼也會同步到 Github ，需要的也可以去查看歐！要記得先確定一下自己的版本 &lt;a href="https://github.com/880831ian/Prometheus-Grafana-Docker" target="_blank" rel="noopener">Github 程式碼連結&lt;/a> 😆&lt;/p>
&lt;br>
&lt;h2>版本資訊&lt;span class="absolute -mt-20" id="版本資訊">&lt;/span>
&lt;a href="#%e7%89%88%e6%9c%ac%e8%b3%87%e8%a8%8a" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ul>
&lt;li>macOS：11.6&lt;/li>
&lt;li>Docker：Docker version 20.10.14, build a224086&lt;/li>
&lt;li>Nginx：&lt;a href="https://hub.docker.com/layers/nginx/library/nginx/1.21.6/images/sha256-b495f952df67472c3598b260f4b2e2ba9b5a8b0af837575cf4369c95c8d8a215?context=explore" target="_blank" rel="noopener">1.21.6&lt;/a>&lt;/li>
&lt;li>Prometheus：&lt;a href="https://hub.docker.com/layers/prometheus/prom/prometheus/v2.35.0/images/sha256-4b86ad59abc67fa19a6e1618e936f3fd0f6ae13f49260da55a03eeca763a0fb5?context=explore" target="_blank" rel="noopener">v.2.35.0&lt;/a>&lt;/li>
&lt;li>nginx-prometheus-exporter：&lt;a href="https://hub.docker.com/layers/nginx-prometheus-exporter/nginx/nginx-prometheus-exporter/0.10/images/sha256-f2aa9848516ff4c9f4c6d5bcb758b0fab519eff644f526e4c9a17d3083b54dde?context=explore" target="_blank" rel="noopener">0.10&lt;/a>&lt;/li>
&lt;li>Grafana：&lt;a href="https://hub.docker.com/layers/grafana/grafana/grafana/8.2.5/images/sha256-1a154d1161ed65eaf87368d08149a8bbcf9962ac03dd5ff639a6b9d468a77a36?context=explore" target="_blank" rel="noopener">8.2.5&lt;/a> (最新版本是 8.5.2，但選擇 8.2.5，是因為 8.3.0 後 Alerting 沒有辦法附上圖片，詳細原因可以參考 &lt;a href="https://github.com/grafana/grafana/discussions/38030" target="_blank" rel="noopener">Add &amp;ldquo;include image&amp;rdquo; option into Grafana Alerting&lt;/a> )&lt;/li>
&lt;li>grafana/grafana-image-renderer：&lt;a href="https://hub.docker.com/layers/grafana-image-renderer/grafana/grafana-image-renderer/3.4.2/images/sha256-fd9d7b764597e84e447e6c8440e44e18c9f74728e3928156ea92599fe6f19e7d?context=explore" target="_blank" rel="noopener">3.4.2&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>檔案結構&lt;span class="absolute -mt-20" id="檔案結構">&lt;/span>
&lt;a href="#%e6%aa%94%e6%a1%88%e7%b5%90%e6%a7%8b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-filetree mt-6 select-none text-sm text-gray-800 dark:text-gray-300 not-prose">
&lt;div class="inline-block rounded-lg border px-4 py-2 dark:border-neutral-800">
&lt;li class="flex list-none">
&lt;span class="inline-flex cursor-default items-center py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ml-1">docker-compose.yaml&lt;/span>
&lt;/span>
&lt;/li>
&lt;li class="group flex list-none flex-col">
&lt;button class="hextra-filetree-folder inline-flex cursor-pointer items-center py-1 hover:opacity-60">
&lt;span data-state="open" class="data-[state=open]:hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/>&lt;/svg>&lt;/span>
&lt;span data-state="open" class="data-[state=closed]:hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/>&lt;/svg>&lt;/span>
&lt;span class="ml-1">nginx&lt;/span>
&lt;/button>
&lt;ul data-state="open" class="pl-5 data-[state=closed]:hidden">
&lt;li class="flex list-none">
&lt;span class="inline-flex cursor-default items-center py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ml-1">Dockerfile&lt;/span>
&lt;/span>
&lt;/li>
&lt;li class="flex list-none">
&lt;span class="inline-flex cursor-default items-center py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ml-1">status.conf&lt;/span>
&lt;/span>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li class="flex list-none">
&lt;span class="inline-flex cursor-default items-center py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ml-1">prometheus.yaml&lt;/span>
&lt;/span>
&lt;/li>
&lt;li class="flex list-none">
&lt;span class="inline-flex cursor-default items-center py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ml-1">test.sh&lt;/span>
&lt;/span>
&lt;/li>
&lt;/div>
&lt;/div>
&lt;p>這是主要的結構，簡單說明一下：&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml：會放置要產生的 nginx、nginx-prometheus-exporter、prometheus、grafana、grafana-image-renderer 容器設定檔。&lt;/li>
&lt;li>nginx/Dockerfile：因為在 nginx 要使用 stub_status 需要多安裝一些設定，所以用 Dockerfile 另外寫 nginx 的映像檔。&lt;/li>
&lt;li>nginx/status.conf：nginx 的設定檔。&lt;/li>
&lt;li>prometheus.yaml：prometheus 的設定檔。&lt;/li>
&lt;li>test.sh：測試用檔案(後續會教大家如何使用)。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>實作&lt;span class="absolute -mt-20" id="實作">&lt;/span>
&lt;a href="#%e5%af%a6%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>接下來會依照執行的流程來跟大家說明歐！那要開始囉 😁&lt;/p>
&lt;p>我們要建立一個 Nginx 來模擬受監控的服務，我們要透過 nginx-prometheus-exporter 來讓 Prometheus 抓到資料最後傳給 Grafana，所以我們在 Docker-compose 裡面會有 nginx、nginx-prometheus-exporter、prometheus、grafana、grafana-image-renderer 幾個容器，我們先看一下程式碼，再來說明程式碼設定了哪些東西吧！&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div class="filename">Docker-compose.yaml&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3.8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nginx&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>: &lt;span style="color:#ae81ff">./nginx/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">8080&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nginx-prometheus-exporter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">nginx/nginx-prometheus-exporter:0.10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">nginx-prometheus-exporter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: -&lt;span style="color:#ae81ff">nginx.scrape-uri http://nginx:8080/stub_status&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">9113&lt;/span>:&lt;span style="color:#ae81ff">9113&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prometheus&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">prom/prometheus:v2.35.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./prometheus.yaml:/etc/prometheus/prometheus.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./prometheus_data:/prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;--config.file=/etc/prometheus/prometheus.yaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;9090:9090&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">renderer&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">grafana/grafana-image-renderer:3.4.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">BROWSER_TZ&lt;/span>: &lt;span style="color:#ae81ff">Asia/Taipei&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;8081:8081&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">grafana&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">grafana/grafana:8.2.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">grafana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./grafana_data:/var/lib/grafana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GF_SECURITY_ADMIN_PASSWORD&lt;/span>: &lt;span style="color:#ae81ff">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GF_RENDERING_SERVER_URL&lt;/span>: &lt;span style="color:#ae81ff">http://renderer:8081/render&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GF_RENDERING_CALLBACK_URL&lt;/span>: &lt;span style="color:#ae81ff">http://grafana:3000/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GF_LOG_FILTERS&lt;/span>: &lt;span style="color:#ae81ff">rendering:debug&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">renderer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;3000:3000&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-8">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>nginx：因為 Nginx 會通過 stub_status 頁面來開放對外的監控指標。所以我們要另外寫一個 Dockerfile 設定檔，先將 &lt;code>conf&lt;/code> 放入 Nginx 中。&lt;/li>
&lt;li>nginx-prometheus-exporter：這裡要注意的是需要使用 command 來設定 nginx.scrapt-url，我們設定 &lt;code>http://nginx:8080/stub_status&lt;/code>，他的預設 Port 是 &lt;code>9113&lt;/code>，並設定依賴 &lt;code>depends_no&lt;/code>，要 nginx 先啟動後才會執行 &lt;code>nginx-prometheus-exporter&lt;/code>。&lt;/li>
&lt;li>prometheus：將 prometheus.yaml 設定檔放入 &lt;code>/etc/prometheus/prometheus.yaml&lt;/code>，以及掛載一個 &lt;code>/prometheus_data&lt;/code> 來永久保存 prometheus 的資料，最後 command 加入 &lt;code>--config.file&lt;/code> 設定。&lt;/li>
&lt;li>renderer：這是 grafana 顯示圖片的套件，我們使用 3.4.2 版本，記得要設定環境變數，照片顯示的時間才會正確，並開啟 8081 Port 讓 grafana 訪問。&lt;/li>
&lt;li>grafana：一樣我們先掛載一個 &lt;code>/grafana_data&lt;/code> 來永久保存 grafana 的設定，在環境變數中設定預設帳號 &lt;code>admin&lt;/code> 的密碼是 &lt;code>pass&lt;/code>，設定 renderer 套件的服務位置是 &lt;code>http://renderer:8081/render&lt;/code> 以及回傳到 &lt;code>http://grafana:3000/&lt;/code>，並設定依賴 &lt;code>depends_on&lt;/code> prometheus 跟 renderer，最後設定 grafana 要呈現的畫面 3000 Port。&lt;/li>
&lt;/ul>
&lt;br>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div class="filename">nginx/Dockerfile&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> nginx:1.21.6&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> ./status.conf /etc/nginx/conf.d/status.conf&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-8">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>選擇我們要使用的 nginx image 版本，並將我們的設定檔，複製到容器內。&lt;/p>
&lt;br>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div class="filename">nginx/status.conf&lt;/div>&lt;pre>&lt;code>server {
listen 8080;
server_name localhost;
location /stub_status {
stub_status on;
access_log off;
}
}&lt;/code>&lt;/pre>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-8">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這邊最重要的就是要設定 &lt;code>/stub_status&lt;/code> 路徑，並開啟 stub_status ，這樣才可以讓 nginx-prometheus-exporter 抓到資料！(要怎麼知道 Nginx 是否開啟 &lt;code>stub_status&lt;/code>，可以使用 &lt;code>nginx -V 2&amp;gt;&amp;amp;1 | grep -o with-http_stub_status_module&lt;/code> 指令檢查，我們這次裝的 Image 已經有幫我們啟動)&lt;/p>
&lt;br>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div class="filename">prometheus.yaml&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">global&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">scrape_interval&lt;/span>: &lt;span style="color:#ae81ff">5s&lt;/span> &lt;span style="color:#75715e"># Server 抓取頻率&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external_labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">monitor&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;my-monitor&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">scrape_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job_name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;prometheus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;localhost:9090&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job_name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nginx_exporter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;nginx-prometheus-exporter:9113&amp;#34;&lt;/span>]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-8">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這邊是 prometheus 的設定檔，例如有 scrape_interval 代表 Server 每次抓取資料的頻率，或是設定 monitor 的 labels，下面的 configs，分別設定了 prometheus 它的 targets 是 &lt;code>[&amp;quot;localhost:9090&amp;quot;]&lt;/code> 以及 nginx_exporter 它的 targets 是 &lt;code>[&amp;quot;nginx-prometheus-exporter:9113&amp;quot;]&lt;/code>。&lt;/p>
&lt;br>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div class="filename">test.sh&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;docker exec nginx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i in &lt;span style="color:#f92672">{&lt;/span>1..10&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $docker curl http://nginx:8080/stub_status -s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-8">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這個是我自己另外寫的測試程式，在本機執行後他會訪問 nginx 容器內部，並模擬 nginx 流量，讓我們在 Grafana 可以清楚看到資料。&lt;/p>
&lt;br>
&lt;h3>執行/測試&lt;span class="absolute -mt-20" id="執行測試">&lt;/span>
&lt;a href="#%e5%9f%b7%e8%a1%8c%e6%b8%ac%e8%a9%a6" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>當我們都寫好設定檔後，在專案目錄下，也就是有 Docker-compose 路徑下，使用 &lt;code>docker-compose up -d&lt;/code> 來啟動容器：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_1.png"
alt="啟動容器" width="600">&lt;figcaption>
&lt;p>啟動容器&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接下來我們依序檢查容器是否都有正常運作，開啟瀏覽器瀏覽 &lt;code>http://localhost:9113/metrics&lt;/code> 查看是否有出現跟下面圖片差不多的內容：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_2.png"
alt="檢查 Nginx 以及 nginx-prometheus-exporter 的設定" width="800">&lt;figcaption>
&lt;p>檢查 Nginx 以及 nginx-prometheus-exporter 的設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>如果有出現，恭喜你完成了 Nginx 以及 nginx-prometheus-exporter 的設定，我們將 Nginx 的 &lt;code>stub_status&lt;/code> 服務，透過 &lt;code>http://nginx:8080/stub_status&lt;/code> 讓 nginx-prometheus-exporter 可以抓到圖片中的這些指標 (Metrics)。&lt;/p>
&lt;br>
&lt;h4>Prometheus&lt;span class="absolute -mt-20" id="prometheus">&lt;/span>
&lt;a href="#prometheus" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>接著我們瀏覽 &lt;code>http://localhost:9090/targets&lt;/code>，看看我們的 Prometheus 有沒有設定正確，抓到我們設定好的 targets：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_3.png"
alt="檢查 Prometheus targets" width="1200">&lt;figcaption>
&lt;p>檢查 Prometheus targets&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>如果兩個出現的都是 &lt;font color='green'>綠色的 UP&lt;/font> 就代表正常有抓到資料囉！&lt;/p>
&lt;br>
&lt;p>那要怎麼測試才知道有抓到資料呢？我們可以先用 Prometheus 內建的圖形化介面來檢查，在瀏覽器瀏覽 &lt;code>http://localhost:9090/graph&lt;/code> 就可以看到下面的畫面：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_4.png"
alt="Prometheus 內建的圖形化介面" width="800">&lt;figcaption>
&lt;p>Prometheus 內建的圖形化介面&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們選擇 &lt;code>Graph&lt;/code>，並在上面的搜尋欄，打上 &lt;code>nginx_connections_accepted&lt;/code> 按下右邊的 Execute 就會產生一張圖表，圖表裡面只有一條綠色的線，那這個線是什麼呢？它就是我們剛剛在 &lt;code>http://localhost:9113/metrics&lt;/code> 其中一個指標 (Metrics)，它代表 Nginx 接受用戶端連接總數量：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_5.png"
alt="Prometheus 內建的圖形化介面" width="1200">&lt;figcaption>
&lt;p>Prometheus 內建的圖形化介面&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>這個功能就是把我們所收到的 Nginx 指標 (Metrics)，轉換成圖表讓我們可以知道他的變化。&lt;/p>
&lt;br>
&lt;p>為了更明顯的看出變化，這時候就要使用我所寫好的 &lt;code>test.sh&lt;/code> 腳本，使用 &lt;code>sh test.sh&lt;/code> 來執行，再回來觀察圖型是否變化：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_6.png"
alt="經過測試顯示的 nginx_connections_accepted 圖形" width="800">&lt;figcaption>
&lt;p>經過測試顯示的 nginx_connections_accepted 圖形&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>可以發現剛剛原本只有 1 個的連接數因為我們模擬總共跑了 10 次，所以連接數變成 11 了！&lt;/p>
&lt;br>
&lt;h4>Grafana&lt;span class="absolute -mt-20" id="grafana">&lt;/span>
&lt;a href="#grafana" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>Prometheus 的圖形化比較單調，所以我們使用 Grafana 來美化我們的儀表板，瀏覽器瀏覽 &lt;code>http://localhost:3000/&lt;/code> ，可以看到一個登入頁面：帳號是 &lt;code>admin&lt;/code>，密碼是我們在環境變數中所設定的 &lt;code>pass&lt;/code>：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_7.png"
alt="Grafana 登入頁面" width="1000">&lt;figcaption>
&lt;p>Grafana 登入頁面&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>登入後我們看到首頁，選擇 &lt;strong>Add your first data source&lt;/strong> 來新增資料來源：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_8.png"
alt="Grafana 新增資料來源" width="1000">&lt;figcaption>
&lt;p>Grafana 新增資料來源&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>選擇第一個 &lt;strong>Prometheus&lt;/strong>，我們到 HTTP 的 URL 設定 &lt;code>http://prometheus:9090&lt;/code> 其他設定在我們測試環境中，不需要去調整，滑到最下面按下 &lt;strong>Save &amp;amp; test&lt;/strong>：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_9.png"
alt="Grafana 新增資料來源" width="1000">&lt;figcaption>
&lt;p>Grafana 新增資料來源&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接著我們要來設計我們的儀表板，在 Grafana 除了自己設計以外，還可以 Import 別人做好的儀表板。&lt;/p>
&lt;p>我們點選左側欄位的 &lt;strong>＋&lt;/strong> 符號 &amp;gt; 裡面的 &lt;strong>Import&lt;/strong>，可以在這邊 Import 別人做好的儀表板，使用方式也很簡單，只需要先去 &lt;a href="https://grafana.com/grafana/dashboards/" target="_blank" rel="noopener">Grafana Labs dashboard&lt;/a> 裡面找到自己要使用的儀表板，右側會有一個 ID，把 ID 貼上我們的 Grafana 就 Import 成功囉！很神奇吧 XD&lt;/p>
&lt;p>我們要使用的儀表板是別人已經做好的 &lt;a href="https://grafana.com/grafana/dashboards/12708" target="_blank" rel="noopener">NGINX exporter&lt;/a>，它的 ID 是 &lt;code>12708&lt;/code>，把 ID 貼入後，按下 &lt;strong>Load&lt;/strong>，就會有 NGINX exporter 的基本資訊，我們在最下面的 Prometheus 選擇我們要使用的 data source，就是我們剛剛先設定好的
&lt;strong>Prometheus&lt;/strong>，最後按下 &lt;strong>Import&lt;/strong>，就完成拉。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_10.png"
alt="Grafana 載入別人做好的儀表板" width="800">&lt;figcaption>
&lt;p>Grafana 載入別人做好的儀表板&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>如果設定都沒有錯誤的話，應該可以看到下面這個畫面，最上面是監測 Nginx 服務的狀態，以及下方有不同的指標在顯示：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_11.png"
alt="Grafana 儀表板" width="1000">&lt;figcaption>
&lt;p>Grafana 儀表板&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接下來我們一次用 &lt;code>test.sh&lt;/code> 來測試一下是否有成功抓到資料：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_12.png"
alt="測試 Grafana 是否成功抓到資料" width="1000">&lt;figcaption>
&lt;p>測試 Grafana 是否成功抓到資料&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>可以看到在我們使用完測試腳本後，在該時段的資料有明顯的不一樣，代表我們有成功抓到資料 😄&lt;/p>
&lt;br>
&lt;p>此外也可以將 Nginx 服務暫停，看看儀表板上方的 NGINX Status 狀態是否改變：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_13.png"
alt="測試暫停 Nginx 查看 Grafana 儀表板 NGINX Status" width="1000">&lt;figcaption>
&lt;p>測試暫停 Nginx 查看 Grafana 儀表板 NGINX Status&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>Alerting 警報&lt;span class="absolute -mt-20" id="alerting-警報">&lt;/span>
&lt;a href="#alerting-%e8%ad%a6%e5%a0%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>當然除了監控以外，我們還需要有警報系統，因為我們不可能每天都一直盯著儀表板看哪裡有錯誤，所以我們要設定警報的規則，以及警報要發送到哪裡，接著我們一起看下去吧：&lt;/p>
&lt;p>我們先點左側的 &lt;strong>Alerting 🔔&lt;/strong>   &amp;gt; 點選 &lt;strong>Notification channels&lt;/strong> 來新增我們要發送到哪裡。這次我們一樣使用 Telegram，我們在 type 下拉式選單選擇 &lt;strong>Telegram&lt;/strong>，輸入我們的 BOT API Token 以及 Chat ID，儲存之前可以點選 &lt;strong>test&lt;/strong> 來測試！&lt;/p>
&lt;div class="overflow-x-auto mt-6 flex rounded-lg border py-2 ltr:pr-4 rtl:pl-4 contrast-more:border-current contrast-more:dark:border-current border-orange-100 bg-orange-50 text-orange-800 dark:border-orange-400/30 dark:bg-orange-400/20 dark:text-orange-300">
&lt;div class="ltr:pl-3 ltr:pr-2 rtl:pr-3 rtl:pl-2">&lt;/div>
&lt;div class="w-full min-w-0 leading-7">
&lt;div class="mt-6 leading-7 first:mt-0">
怎麼使用 Telegram Bot：請參考這一篇 &lt;a href="https://pin-yi.me/blog/git-or-cicd/ansible/#ansible-%e7%99%bc%e9%80%81%e9%80%9a%e7%9f%a5%e5%88%b0-telegram-bot" target="_blank" rel="noopener">Ansible 介紹與實作 (Inventory、Playbooks、Module、Template、Handlers)&lt;/a> 來取得 BOT API Token 以及 Chat ID。
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_1.png"
alt="Alerting 設定" width="1000">&lt;figcaption>
&lt;p>Alerting 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_2.png"
alt="Alerting 測試結果" width="600">&lt;figcaption>
&lt;p>Alerting 測試結果&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接著我們來設計一個屬於我們的控制板 (Panel)，順便幫他加上 Alerting，稍後也用 &lt;code>test.sh&lt;/code>，看看他會不會自動發出提醒到 Telegram Bot 😬&lt;/p>
&lt;p>首先點選左側欄位的 &lt;strong>＋&lt;/strong> 符號 &amp;gt; 裡面的 Create，在選擇 &lt;strong>Add an empty panel&lt;/strong>：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_3.png"
alt="Create Panel" width="800">&lt;figcaption>
&lt;p>Create Panel&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>再 Query 的 &lt;strong>A&lt;/strong> Metrics browser 輸入 &lt;code>nginx_connections_accepted&lt;/code> 一樣來取得 Nginx 接受用戶端連接總數量的圖表，到右上角選擇 &lt;strong>Last 5 minutes&lt;/strong>，旁邊的圖型我們選擇 &lt;em>Graph (old)&lt;/em>，下面的 Title 可以修改一下這個圖表的名稱，最後按下 &lt;strong>Save&lt;/strong>，就可以看到我們建好一個控制板囉 🥳&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_4.png"
alt="設定 Panel" width="1200">&lt;figcaption>
&lt;p>設定 Panel&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接著我們來設定 Alert，可以看到剛剛在 &lt;strong>Query&lt;/strong> 旁邊有一個 Alert，點進去後按 &lt;strong>Create Alert&lt;/strong>，我們先修改 Evaluate every 後面的 For 改為 &lt;code>1m&lt;/code> (代表當數值超過我們所設定的閥值後，狀態會從 OK 變成 Pending，這時候還不會發送警報，會等待我們現在設定的 &lt;code>1m&lt;/code> 分鐘後，情況還是沒有好轉，才會發送通知)，再 Conditions 後面欄位加入 10 (我們所設定的閥值，代表 &lt;code>nginx_connections_accepted&lt;/code> 超過 10 就會進入 Pending 狀態)，往下滑 Notifications 的 &lt;strong>Send to&lt;/strong> 選擇我們上面所建立的 channels 名稱，按下 &lt;strong>Save&lt;/strong>。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_5.png"
alt="設定好 Alert 的控制板" width="800">&lt;figcaption>
&lt;p>設定好 Alert 的控制板&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接著執行 &lt;code>test.sh&lt;/code> 兩次，讓 &lt;code>nginx_connections_accepted&lt;/code> 超過我們所設定的閥值，可以看到控制板超過 10 以上變成紅色：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_6.png"
alt="超過閥值，控制板變成紅色" width="800">&lt;figcaption>
&lt;p>超過閥值，控制板變成紅色&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接著等待幾分鐘後，狀態會從 OK 綠色變成黃色的 Pending，最後轉成紅色的 Alert，這時候 Telegram 就會收到通知囉 ❌&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_7.png"
alt="自動發送通知到 Telegram Bot，並附上控制板圖片" width="500">&lt;figcaption>
&lt;p>自動發送通知到 Telegram Bot，並附上控制板圖片&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;br>
&lt;h2>Nginx 指標 (Metrics) 描述&lt;span class="absolute -mt-20" id="nginx-指標-metrics-描述">&lt;/span>
&lt;a href="#nginx-%e6%8c%87%e6%a8%99-metrics-%e6%8f%8f%e8%bf%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>我們在 &lt;code>http://localhost:9113/metrics&lt;/code> 中可以看到許多指標 (Metrics) 那他們各代表什麼意思呢？我把它整理成表格讓大家可以選擇要使用的指標 (Metrics)：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">指標&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">nginx_connections_accepted&lt;/td>
&lt;td style="text-align:center">接受用戶端的連接總數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">nginx_connections_active&lt;/td>
&lt;td style="text-align:center">當前用戶端連接數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">nginx_connections_handled&lt;/td>
&lt;td style="text-align:center">Handled 狀態的連接數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">nginx_connections_reading&lt;/td>
&lt;td style="text-align:center">正在讀取的用戶端連接數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">nginx_connections_waiting&lt;/td>
&lt;td style="text-align:center">正在等待中的用戶端連接數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">nginx_connections_writing&lt;/td>
&lt;td style="text-align:center">正在寫入的用戶端連接數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">nginx_http_requests_total&lt;/td>
&lt;td style="text-align:center">客戶端總請求數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">nginx_up&lt;/td>
&lt;td style="text-align:center">Nginx Exporter 是否正常運行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">nginxexporter_build_info&lt;/td>
&lt;td style="text-align:center">Nginx Exporter 的構建資訊&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;br>
&lt;h2>參考資料&lt;span class="absolute -mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統：&lt;a href="https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/" target="_blank" rel="noopener">https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/&lt;/a>&lt;/p>
&lt;p>Nginx Exporter 接入：&lt;a href="https://cloud.tencent.com/document/product/1416/56039" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/1416/56039&lt;/a>&lt;/p>
&lt;p>通過 nginx-prometheus-exporter 監控 nginx 指標：&lt;a href="https://maxidea.gitbook.io/k8s-testing/prometheus-he-grafana-de-dan-ji-bian-pai/tong-guo-nginxprometheusexporter-jian-kong-nginx" target="_blank" rel="noopener">https://maxidea.gitbook.io/k8s-testing/prometheus-he-grafana-de-dan-ji-bian-pai/tong-guo-nginxprometheusexporter-jian-kong-nginx&lt;/a>&lt;/p>
&lt;p>使用 nginx-prometheus-exporter 監控 nginx：&lt;a href="https://www.cnblogs.com/rongfengliang/p/13580534.html" target="_blank" rel="noopener">https://www.cnblogs.com/rongfengliang/p/13580534.html&lt;/a>&lt;/p>
&lt;p>使用阿里雲 Prometheus 監控 Nginx（新版）：&lt;a href="https://help.aliyun.com/document_detail/171819.html?spm=5176.22414175.sslink.29.6c9e1df9DdpLPP" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/171819.html?spm=5176.22414175.sslink.29.6c9e1df9DdpLPP&lt;/a>&lt;/p>
&lt;p>Grafana Image Renderer：&lt;a href="https://grafana.com/grafana/plugins/grafana-image-renderer/" target="_blank" rel="noopener">https://grafana.com/grafana/plugins/grafana-image-renderer/&lt;/a>&lt;/p>
&lt;p>grafana 的 image render 设置：&lt;a href="https://blog.csdn.net/dandanfengyun/article/details/115346594" target="_blank" rel="noopener">https://blog.csdn.net/dandanfengyun/article/details/115346594&lt;/a>&lt;/p></description></item></channel></rss>