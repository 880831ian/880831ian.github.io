<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PIN-YI – Docker 相關</title><link>https://pin-yi.me/blog/docker/</link><description>Recent content in Docker 相關 on PIN-YI</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><atom:link href="https://pin-yi.me/blog/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Prometheus 和 Grafana 打造監控預警系統 (Docker 篇)</title><link>https://pin-yi.me/blog/docker/prometheus-grafana-docker/</link><pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/docker/prometheus-grafana-docker/</guid><description>
&lt;p>還記得我們上次架設 EFK 來獲得容器的日誌嗎!?
身為一個 SRE 除了收集日誌外，還需要監控每個系統或是服務的運行狀況，並在警急情況即時通知相關人員作為應對處理。所以透過好的 Monitoring/Alert System 了解目前 Server 硬體系統狀況和整個 Service 的網路狀況是一件非常重要的一件事情。&lt;/p>
&lt;p>在眾多的 Monitor 工具中，&lt;a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus&lt;/a> 是一個很方便且完善的監控預警框架 TSDB (Time Series Database) 時間序列資料庫，可以快速且容易的建立不同維度的指標 (Metrics) 和整合不同的 Alert Tool 以及資訊視覺化圖表的監控工具並提供自帶的 &lt;a href="https://prometheus.io/docs/prometheus/latest/querying/basics/" target="_blank" rel="noopener">PromQL&lt;/a> 進行 query 查詢。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/prometheus.png"
alt="Prometheus Logo" width="400">&lt;figcaption>
&lt;p>Prometheus Logo&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們先來看看 Prometheus 的架構圖，可以更了解 Prometheus 整體的定位：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/prometheus-architecture.jpg"
alt="Prometheus 架構圖 (圖片來源：使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統)" width="800">&lt;figcaption>
&lt;p>Prometheus 架構圖 (圖片來源：&lt;a href="https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/" target="_blank" rel="noopener">使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統&lt;/a>)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol>
&lt;li>
&lt;p>有一個 Prometheus server 主體，會去 Prometheus Client Pull 相關的指標 (Metrics)，若是短期的 Job 例如 CronJob 在還來不及 Pull 資料回來可能就已經完成任務了、清洗掉資料。所以會有一個 &lt;code>pushgateway&lt;/code> 接收 Job Push 過來的相關資訊，Prometheus Server 再從其中拉取資料。 (圖片左半部)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Service Discovery 可以更好的蒐集 Kubernetes 相關的資訊。 (圖片上半部)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Prometheus Server 主體會將資料儲存在 Local On-Disk Time Series Database 或是可以串接 Remote Storage Systems。(圖片下半部)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Prometheus Server 資料拉回來後可以使用本身自帶的 Web UI 或是 Grafana 等其他的 Client 來呈現。(圖片右下半部)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>當抓取資料的值超過 Alert Rule 所設定的閥值 (threshold) 時，Alertmanager 就會將訊息送出，可以透過 Email、Slack 等訊息通知，提醒相關人員進行處理。(圖片右上半部)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;br>
&lt;p>Prometheus 可能在儲存擴展上比不上其他 Time Series Database，但在整合各種第三方的 Data Source 上十分方便，且在支援雲端服務和 Container 容器相關工具也十分友好。但在圖片的表現上就相較於單薄，所以會搭配我們接下來要介紹的 Grafanac 精美儀表板工具來進行資訊視覺化和圖表的呈現。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/grafana.jpg"
alt="Grafana Logo" width="400">&lt;figcaption>
&lt;p>Grafana Logo&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>Grafana 是由 Grafana Lab 經營的一個非常精美的儀表板系統，可以整合各種不同的 Data Source，例如：Prometheus、Elasticsearch、MySQL、PostgreSQL 等。透過不同種指標 (Metrics) 呈現在 Dashboard 上。如果還是不太清楚，可以把 Prometheus Grafana 分別想成 Prometheus 是 EFK 的 Elasticsearch，Grafana 想成是 EFK 的 Kibana。&lt;/p>
&lt;br>
&lt;p>今天我們要透過 Docker-Compose 搭配 Nginx 實作一個簡單的 Web Service 範例，並整合 &lt;a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus&lt;/a> 和 &lt;a href="https://grafana.com/" target="_blank" rel="noopener">Grafana&lt;/a> 來建立一個 Web Service 監控預警系統。&lt;/p>
&lt;p>此文章程式碼也會同步到 Github ，需要的也可以去查看歐！要記得先確定一下自己的版本 &lt;a href="https://github.com/880831ian/Prometheus-Grafana-Docker" target="_blank" rel="noopener">Github 程式碼連結&lt;/a> 😆&lt;/p>
&lt;br>
&lt;h2>版本資訊&lt;span class="hx-absolute -hx-mt-20" id="版本資訊">&lt;/span>
&lt;a href="#%e7%89%88%e6%9c%ac%e8%b3%87%e8%a8%8a" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ul>
&lt;li>macOS：11.6&lt;/li>
&lt;li>Docker：Docker version 20.10.14, build a224086&lt;/li>
&lt;li>Nginx：&lt;a href="https://hub.docker.com/layers/nginx/library/nginx/1.21.6/images/sha256-b495f952df67472c3598b260f4b2e2ba9b5a8b0af837575cf4369c95c8d8a215?context=explore" target="_blank" rel="noopener">1.21.6&lt;/a>&lt;/li>
&lt;li>Prometheus：&lt;a href="https://hub.docker.com/layers/prometheus/prom/prometheus/v2.35.0/images/sha256-4b86ad59abc67fa19a6e1618e936f3fd0f6ae13f49260da55a03eeca763a0fb5?context=explore" target="_blank" rel="noopener">v.2.35.0&lt;/a>&lt;/li>
&lt;li>nginx-prometheus-exporter：&lt;a href="https://hub.docker.com/layers/nginx-prometheus-exporter/nginx/nginx-prometheus-exporter/0.10/images/sha256-f2aa9848516ff4c9f4c6d5bcb758b0fab519eff644f526e4c9a17d3083b54dde?context=explore" target="_blank" rel="noopener">0.10&lt;/a>&lt;/li>
&lt;li>Grafana：&lt;a href="https://hub.docker.com/layers/grafana/grafana/grafana/8.2.5/images/sha256-1a154d1161ed65eaf87368d08149a8bbcf9962ac03dd5ff639a6b9d468a77a36?context=explore" target="_blank" rel="noopener">8.2.5&lt;/a> (最新版本是 8.5.2，但選擇 8.2.5，是因為 8.3.0 後 Alerting 沒有辦法附上圖片，詳細原因可以參考 &lt;a href="https://github.com/grafana/grafana/discussions/38030" target="_blank" rel="noopener">Add &amp;ldquo;include image&amp;rdquo; option into Grafana Alerting&lt;/a> )&lt;/li>
&lt;li>grafana/grafana-image-renderer：&lt;a href="https://hub.docker.com/layers/grafana-image-renderer/grafana/grafana-image-renderer/3.4.2/images/sha256-fd9d7b764597e84e447e6c8440e44e18c9f74728e3928156ea92599fe6f19e7d?context=explore" target="_blank" rel="noopener">3.4.2&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>檔案結構&lt;span class="hx-absolute -hx-mt-20" id="檔案結構">&lt;/span>
&lt;a href="#%e6%aa%94%e6%a1%88%e7%b5%90%e6%a7%8b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-filetree hx-mt-6 hx-select-none hx-text-sm hx-text-gray-800 dark:hx-text-gray-300 not-prose">
&lt;div class="hx-inline-block hx-rounded-lg hx-border hx-px-4 hx-py-2 dark:hx-border-neutral-800">
&lt;li class="hx-flex hx-list-none">
&lt;span class="hx-inline-flex hx-cursor-default hx-items-center hx-py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">docker-compose.yaml&lt;/span>
&lt;/span>
&lt;/li>
&lt;li class="hx-group hx-flex hx-list-none hx-flex-col">
&lt;button class="hextra-filetree-folder hx-inline-flex hx-cursor-pointer hx-items-center hx-py-1 hover:hx-opacity-60">
&lt;span data-state="open" class="data-[state=open]:hx-hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/>&lt;/svg>&lt;/span>
&lt;span data-state="open" class="data-[state=closed]:hx-hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/>&lt;/svg>&lt;/span>
&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">nginx&lt;/span>
&lt;/button>
&lt;ul data-state="open" class="ltr:hx-pl-5 rtl:hx-pr-5 data-[state=closed]:hx-hidden">
&lt;li class="hx-flex hx-list-none">
&lt;span class="hx-inline-flex hx-cursor-default hx-items-center hx-py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">Dockerfile&lt;/span>
&lt;/span>
&lt;/li>
&lt;li class="hx-flex hx-list-none">
&lt;span class="hx-inline-flex hx-cursor-default hx-items-center hx-py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">status.conf&lt;/span>
&lt;/span>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li class="hx-flex hx-list-none">
&lt;span class="hx-inline-flex hx-cursor-default hx-items-center hx-py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">prometheus.yaml&lt;/span>
&lt;/span>
&lt;/li>
&lt;li class="hx-flex hx-list-none">
&lt;span class="hx-inline-flex hx-cursor-default hx-items-center hx-py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">test.sh&lt;/span>
&lt;/span>
&lt;/li>
&lt;/div>
&lt;/div>
&lt;p>這是主要的結構，簡單說明一下：&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml：會放置要產生的 nginx、nginx-prometheus-exporter、prometheus、grafana、grafana-image-renderer 容器設定檔。&lt;/li>
&lt;li>nginx/Dockerfile：因為在 nginx 要使用 stub_status 需要多安裝一些設定，所以用 Dockerfile 另外寫 nginx 的映像檔。&lt;/li>
&lt;li>nginx/status.conf：nginx 的設定檔。&lt;/li>
&lt;li>prometheus.yaml：prometheus 的設定檔。&lt;/li>
&lt;li>test.sh：測試用檔案(後續會教大家如何使用)。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>實作&lt;span class="hx-absolute -hx-mt-20" id="實作">&lt;/span>
&lt;a href="#%e5%af%a6%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>接下來會依照執行的流程來跟大家說明歐！那要開始囉 😁&lt;/p>
&lt;p>我們要建立一個 Nginx 來模擬受監控的服務，我們要透過 nginx-prometheus-exporter 來讓 Prometheus 抓到資料最後傳給 Grafana，所以我們在 Docker-compose 裡面會有 nginx、nginx-prometheus-exporter、prometheus、grafana、grafana-image-renderer 幾個容器，我們先看一下程式碼，再來說明程式碼設定了哪些東西吧！&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div class="filename not-prose" dir="auto">Docker-compose.yaml&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3.8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nginx&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>: &lt;span style="color:#ae81ff">./nginx/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">8080&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nginx-prometheus-exporter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">nginx/nginx-prometheus-exporter:0.10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">nginx-prometheus-exporter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: -&lt;span style="color:#ae81ff">nginx.scrape-uri http://nginx:8080/stub_status&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">9113&lt;/span>:&lt;span style="color:#ae81ff">9113&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prometheus&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">prom/prometheus:v2.35.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./prometheus.yaml:/etc/prometheus/prometheus.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./prometheus_data:/prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;--config.file=/etc/prometheus/prometheus.yaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;9090:9090&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">renderer&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">grafana/grafana-image-renderer:3.4.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">BROWSER_TZ&lt;/span>: &lt;span style="color:#ae81ff">Asia/Taipei&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;8081:8081&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">grafana&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">grafana/grafana:8.2.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">grafana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./grafana_data:/var/lib/grafana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GF_SECURITY_ADMIN_PASSWORD&lt;/span>: &lt;span style="color:#ae81ff">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GF_RENDERING_SERVER_URL&lt;/span>: &lt;span style="color:#ae81ff">http://renderer:8081/render&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GF_RENDERING_CALLBACK_URL&lt;/span>: &lt;span style="color:#ae81ff">http://grafana:3000/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GF_LOG_FILTERS&lt;/span>: &lt;span style="color:#ae81ff">rendering:debug&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">renderer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;3000:3000&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-8">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>nginx：因為 Nginx 會通過 stub_status 頁面來開放對外的監控指標。所以我們要另外寫一個 Dockerfile 設定檔，先將 &lt;code>conf&lt;/code> 放入 Nginx 中。&lt;/li>
&lt;li>nginx-prometheus-exporter：這裡要注意的是需要使用 command 來設定 nginx.scrapt-url，我們設定 &lt;code>http://nginx:8080/stub_status&lt;/code>，他的預設 Port 是 &lt;code>9113&lt;/code>，並設定依賴 &lt;code>depends_no&lt;/code>，要 nginx 先啟動後才會執行 &lt;code>nginx-prometheus-exporter&lt;/code>。&lt;/li>
&lt;li>prometheus：將 prometheus.yaml 設定檔放入 &lt;code>/etc/prometheus/prometheus.yaml&lt;/code>，以及掛載一個 &lt;code>/prometheus_data&lt;/code> 來永久保存 prometheus 的資料，最後 command 加入 &lt;code>--config.file&lt;/code> 設定。&lt;/li>
&lt;li>renderer：這是 grafana 顯示圖片的套件，我們使用 3.4.2 版本，記得要設定環境變數，照片顯示的時間才會正確，並開啟 8081 Port 讓 grafana 訪問。&lt;/li>
&lt;li>grafana：一樣我們先掛載一個 &lt;code>/grafana_data&lt;/code> 來永久保存 grafana 的設定，在環境變數中設定預設帳號 &lt;code>admin&lt;/code> 的密碼是 &lt;code>pass&lt;/code>，設定 renderer 套件的服務位置是 &lt;code>http://renderer:8081/render&lt;/code> 以及回傳到 &lt;code>http://grafana:3000/&lt;/code>，並設定依賴 &lt;code>depends_on&lt;/code> prometheus 跟 renderer，最後設定 grafana 要呈現的畫面 3000 Port。&lt;/li>
&lt;/ul>
&lt;br>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div class="filename not-prose" dir="auto">nginx/Dockerfile&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> nginx:1.21.6&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> ./status.conf /etc/nginx/conf.d/status.conf&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-8">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>選擇我們要使用的 nginx image 版本，並將我們的設定檔，複製到容器內。&lt;/p>
&lt;br>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div class="filename not-prose" dir="auto">nginx/status.conf&lt;/div>&lt;div>&lt;pre>&lt;code>server {
listen 8080;
server_name localhost;
location /stub_status {
stub_status on;
access_log off;
}
}&lt;/code>&lt;/pre>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-8">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這邊最重要的就是要設定 &lt;code>/stub_status&lt;/code> 路徑，並開啟 stub_status ，這樣才可以讓 nginx-prometheus-exporter 抓到資料！(要怎麼知道 Nginx 是否開啟 &lt;code>stub_status&lt;/code>，可以使用 &lt;code>nginx -V 2&amp;gt;&amp;amp;1 | grep -o with-http_stub_status_module&lt;/code> 指令檢查，我們這次裝的 Image 已經有幫我們啟動)&lt;/p>
&lt;br>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div class="filename not-prose" dir="auto">prometheus.yaml&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">global&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">scrape_interval&lt;/span>: &lt;span style="color:#ae81ff">5s&lt;/span> &lt;span style="color:#75715e"># Server 抓取頻率&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external_labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">monitor&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;my-monitor&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">scrape_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job_name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;prometheus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;localhost:9090&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job_name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nginx_exporter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;nginx-prometheus-exporter:9113&amp;#34;&lt;/span>]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-8">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這邊是 prometheus 的設定檔，例如有 scrape_interval 代表 Server 每次抓取資料的頻率，或是設定 monitor 的 labels，下面的 configs，分別設定了 prometheus 它的 targets 是 &lt;code>[&amp;quot;localhost:9090&amp;quot;]&lt;/code> 以及 nginx_exporter 它的 targets 是 &lt;code>[&amp;quot;nginx-prometheus-exporter:9113&amp;quot;]&lt;/code>。&lt;/p>
&lt;br>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div class="filename not-prose" dir="auto">test.sh&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;docker exec nginx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i in &lt;span style="color:#f92672">{&lt;/span>1..10&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $docker curl http://nginx:8080/stub_status -s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-8">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這個是我自己另外寫的測試程式，在本機執行後他會訪問 nginx 容器內部，並模擬 nginx 流量，讓我們在 Grafana 可以清楚看到資料。&lt;/p>
&lt;br>
&lt;h3>執行/測試&lt;span class="hx-absolute -hx-mt-20" id="執行測試">&lt;/span>
&lt;a href="#%e5%9f%b7%e8%a1%8c%e6%b8%ac%e8%a9%a6" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>當我們都寫好設定檔後，在專案目錄下，也就是有 Docker-compose 路徑下，使用 &lt;code>docker-compose up -d&lt;/code> 來啟動容器：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_1.png"
alt="啟動容器" width="600">&lt;figcaption>
&lt;p>啟動容器&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接下來我們依序檢查容器是否都有正常運作，開啟瀏覽器瀏覽 &lt;code>http://localhost:9113/metrics&lt;/code> 查看是否有出現跟下面圖片差不多的內容：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_2.png"
alt="檢查 Nginx 以及 nginx-prometheus-exporter 的設定" width="800">&lt;figcaption>
&lt;p>檢查 Nginx 以及 nginx-prometheus-exporter 的設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>如果有出現，恭喜你完成了 Nginx 以及 nginx-prometheus-exporter 的設定，我們將 Nginx 的 &lt;code>stub_status&lt;/code> 服務，透過 &lt;code>http://nginx:8080/stub_status&lt;/code> 讓 nginx-prometheus-exporter 可以抓到圖片中的這些指標 (Metrics)。&lt;/p>
&lt;br>
&lt;h4>Prometheus&lt;span class="hx-absolute -hx-mt-20" id="prometheus">&lt;/span>
&lt;a href="#prometheus" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>接著我們瀏覽 &lt;code>http://localhost:9090/targets&lt;/code>，看看我們的 Prometheus 有沒有設定正確，抓到我們設定好的 targets：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_3.png"
alt="檢查 Prometheus targets" width="1200">&lt;figcaption>
&lt;p>檢查 Prometheus targets&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>如果兩個出現的都是 &lt;font color='green'>綠色的 UP&lt;/font> 就代表正常有抓到資料囉！&lt;/p>
&lt;br>
&lt;p>那要怎麼測試才知道有抓到資料呢？我們可以先用 Prometheus 內建的圖形化介面來檢查，在瀏覽器瀏覽 &lt;code>http://localhost:9090/graph&lt;/code> 就可以看到下面的畫面：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_4.png"
alt="Prometheus 內建的圖形化介面" width="800">&lt;figcaption>
&lt;p>Prometheus 內建的圖形化介面&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們選擇 &lt;code>Graph&lt;/code>，並在上面的搜尋欄，打上 &lt;code>nginx_connections_accepted&lt;/code> 按下右邊的 Execute 就會產生一張圖表，圖表裡面只有一條綠色的線，那這個線是什麼呢？它就是我們剛剛在 &lt;code>http://localhost:9113/metrics&lt;/code> 其中一個指標 (Metrics)，它代表 Nginx 接受用戶端連接總數量：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_5.png"
alt="Prometheus 內建的圖形化介面" width="1200">&lt;figcaption>
&lt;p>Prometheus 內建的圖形化介面&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>這個功能就是把我們所收到的 Nginx 指標 (Metrics)，轉換成圖表讓我們可以知道他的變化。&lt;/p>
&lt;br>
&lt;p>為了更明顯的看出變化，這時候就要使用我所寫好的 &lt;code>test.sh&lt;/code> 腳本，使用 &lt;code>sh test.sh&lt;/code> 來執行，再回來觀察圖型是否變化：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_6.png"
alt="經過測試顯示的 nginx_connections_accepted 圖形" width="800">&lt;figcaption>
&lt;p>經過測試顯示的 nginx_connections_accepted 圖形&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>可以發現剛剛原本只有 1 個的連接數因為我們模擬總共跑了 10 次，所以連接數變成 11 了！&lt;/p>
&lt;br>
&lt;h4>Grafana&lt;span class="hx-absolute -hx-mt-20" id="grafana">&lt;/span>
&lt;a href="#grafana" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>Prometheus 的圖形化比較單調，所以我們使用 Grafana 來美化我們的儀表板，瀏覽器瀏覽 &lt;code>http://localhost:3000/&lt;/code> ，可以看到一個登入頁面：帳號是 &lt;code>admin&lt;/code>，密碼是我們在環境變數中所設定的 &lt;code>pass&lt;/code>：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_7.png"
alt="Grafana 登入頁面" width="1000">&lt;figcaption>
&lt;p>Grafana 登入頁面&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>登入後我們看到首頁，選擇 &lt;strong>Add your first data source&lt;/strong> 來新增資料來源：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_8.png"
alt="Grafana 新增資料來源" width="1000">&lt;figcaption>
&lt;p>Grafana 新增資料來源&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>選擇第一個 &lt;strong>Prometheus&lt;/strong>，我們到 HTTP 的 URL 設定 &lt;code>http://prometheus:9090&lt;/code> 其他設定在我們測試環境中，不需要去調整，滑到最下面按下 &lt;strong>Save &amp;amp; test&lt;/strong>：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_9.png"
alt="Grafana 新增資料來源" width="1000">&lt;figcaption>
&lt;p>Grafana 新增資料來源&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接著我們要來設計我們的儀表板，在 Grafana 除了自己設計以外，還可以 Import 別人做好的儀表板。&lt;/p>
&lt;p>我們點選左側欄位的 &lt;strong>＋&lt;/strong> 符號 &amp;gt; 裡面的 &lt;strong>Import&lt;/strong>，可以在這邊 Import 別人做好的儀表板，使用方式也很簡單，只需要先去 &lt;a href="https://grafana.com/grafana/dashboards/" target="_blank" rel="noopener">Grafana Labs dashboard&lt;/a> 裡面找到自己要使用的儀表板，右側會有一個 ID，把 ID 貼上我們的 Grafana 就 Import 成功囉！很神奇吧 XD&lt;/p>
&lt;p>我們要使用的儀表板是別人已經做好的 &lt;a href="https://grafana.com/grafana/dashboards/12708" target="_blank" rel="noopener">NGINX exporter&lt;/a>，它的 ID 是 &lt;code>12708&lt;/code>，把 ID 貼入後，按下 &lt;strong>Load&lt;/strong>，就會有 NGINX exporter 的基本資訊，我們在最下面的 Prometheus 選擇我們要使用的 data source，就是我們剛剛先設定好的
&lt;strong>Prometheus&lt;/strong>，最後按下 &lt;strong>Import&lt;/strong>，就完成拉。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_10.png"
alt="Grafana 載入別人做好的儀表板" width="800">&lt;figcaption>
&lt;p>Grafana 載入別人做好的儀表板&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>如果設定都沒有錯誤的話，應該可以看到下面這個畫面，最上面是監測 Nginx 服務的狀態，以及下方有不同的指標在顯示：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_11.png"
alt="Grafana 儀表板" width="1000">&lt;figcaption>
&lt;p>Grafana 儀表板&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接下來我們一次用 &lt;code>test.sh&lt;/code> 來測試一下是否有成功抓到資料：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_12.png"
alt="測試 Grafana 是否成功抓到資料" width="1000">&lt;figcaption>
&lt;p>測試 Grafana 是否成功抓到資料&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>可以看到在我們使用完測試腳本後，在該時段的資料有明顯的不一樣，代表我們有成功抓到資料 😄&lt;/p>
&lt;br>
&lt;p>此外也可以將 Nginx 服務暫停，看看儀表板上方的 NGINX Status 狀態是否改變：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/run_13.png"
alt="測試暫停 Nginx 查看 Grafana 儀表板 NGINX Status" width="1000">&lt;figcaption>
&lt;p>測試暫停 Nginx 查看 Grafana 儀表板 NGINX Status&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>Alerting 警報&lt;span class="hx-absolute -hx-mt-20" id="alerting-警報">&lt;/span>
&lt;a href="#alerting-%e8%ad%a6%e5%a0%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>當然除了監控以外，我們還需要有警報系統，因為我們不可能每天都一直盯著儀表板看哪裡有錯誤，所以我們要設定警報的規則，以及警報要發送到哪裡，接著我們一起看下去吧：&lt;/p>
&lt;p>我們先點左側的 &lt;strong>Alerting 🔔&lt;/strong>   &amp;gt; 點選 &lt;strong>Notification channels&lt;/strong> 來新增我們要發送到哪裡。這次我們一樣使用 Telegram，我們在 type 下拉式選單選擇 &lt;strong>Telegram&lt;/strong>，輸入我們的 BOT API Token 以及 Chat ID，儲存之前可以點選 &lt;strong>test&lt;/strong> 來測試！&lt;/p>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">怎麼使用 Telegram Bot：請參考這一篇 &lt;a href="https://pin-yi.me/blog/git-or-cicd/ansible/#ansible-%e7%99%bc%e9%80%81%e9%80%9a%e7%9f%a5%e5%88%b0-telegram-bot" target="_blank" rel="noopener">Ansible 介紹與實作 (Inventory、Playbooks、Module、Template、Handlers)&lt;/a> 來取得 BOT API Token 以及 Chat ID。&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_1.png"
alt="Alerting 設定" width="1000">&lt;figcaption>
&lt;p>Alerting 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_2.png"
alt="Alerting 測試結果" width="600">&lt;figcaption>
&lt;p>Alerting 測試結果&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接著我們來設計一個屬於我們的控制板 (Panel)，順便幫他加上 Alerting，稍後也用 &lt;code>test.sh&lt;/code>，看看他會不會自動發出提醒到 Telegram Bot 😬&lt;/p>
&lt;p>首先點選左側欄位的 &lt;strong>＋&lt;/strong> 符號 &amp;gt; 裡面的 Create，在選擇 &lt;strong>Add an empty panel&lt;/strong>：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_3.png"
alt="Create Panel" width="800">&lt;figcaption>
&lt;p>Create Panel&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>再 Query 的 &lt;strong>A&lt;/strong> Metrics browser 輸入 &lt;code>nginx_connections_accepted&lt;/code> 一樣來取得 Nginx 接受用戶端連接總數量的圖表，到右上角選擇 &lt;strong>Last 5 minutes&lt;/strong>，旁邊的圖型我們選擇 &lt;em>Graph (old)&lt;/em>，下面的 Title 可以修改一下這個圖表的名稱，最後按下 &lt;strong>Save&lt;/strong>，就可以看到我們建好一個控制板囉 🥳&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_4.png"
alt="設定 Panel" width="1200">&lt;figcaption>
&lt;p>設定 Panel&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接著我們來設定 Alert，可以看到剛剛在 &lt;strong>Query&lt;/strong> 旁邊有一個 Alert，點進去後按 &lt;strong>Create Alert&lt;/strong>，我們先修改 Evaluate every 後面的 For 改為 &lt;code>1m&lt;/code> (代表當數值超過我們所設定的閥值後，狀態會從 OK 變成 Pending，這時候還不會發送警報，會等待我們現在設定的 &lt;code>1m&lt;/code> 分鐘後，情況還是沒有好轉，才會發送通知)，再 Conditions 後面欄位加入 10 (我們所設定的閥值，代表 &lt;code>nginx_connections_accepted&lt;/code> 超過 10 就會進入 Pending 狀態)，往下滑 Notifications 的 &lt;strong>Send to&lt;/strong> 選擇我們上面所建立的 channels 名稱，按下 &lt;strong>Save&lt;/strong>。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_5.png"
alt="設定好 Alert 的控制板" width="800">&lt;figcaption>
&lt;p>設定好 Alert 的控制板&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接著執行 &lt;code>test.sh&lt;/code> 兩次，讓 &lt;code>nginx_connections_accepted&lt;/code> 超過我們所設定的閥值，可以看到控制板超過 10 以上變成紅色：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_6.png"
alt="超過閥值，控制板變成紅色" width="800">&lt;figcaption>
&lt;p>超過閥值，控制板變成紅色&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接著等待幾分鐘後，狀態會從 OK 綠色變成黃色的 Pending，最後轉成紅色的 Alert，這時候 Telegram 就會收到通知囉 ❌&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/prometheus-grafana-docker/alert_7.png"
alt="自動發送通知到 Telegram Bot，並附上控制板圖片" width="500">&lt;figcaption>
&lt;p>自動發送通知到 Telegram Bot，並附上控制板圖片&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;br>
&lt;h2>Nginx 指標 (Metrics) 描述&lt;span class="hx-absolute -hx-mt-20" id="nginx-指標-metrics-描述">&lt;/span>
&lt;a href="#nginx-%e6%8c%87%e6%a8%99-metrics-%e6%8f%8f%e8%bf%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>我們在 &lt;code>http://localhost:9113/metrics&lt;/code> 中可以看到許多指標 (Metrics) 那他們各代表什麼意思呢？我把它整理成表格讓大家可以選擇要使用的指標 (Metrics)：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">指標&lt;/th>
&lt;th style="text-align: center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">nginx_connections_accepted&lt;/td>
&lt;td style="text-align: center">接受用戶端的連接總數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">nginx_connections_active&lt;/td>
&lt;td style="text-align: center">當前用戶端連接數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">nginx_connections_handled&lt;/td>
&lt;td style="text-align: center">Handled 狀態的連接數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">nginx_connections_reading&lt;/td>
&lt;td style="text-align: center">正在讀取的用戶端連接數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">nginx_connections_waiting&lt;/td>
&lt;td style="text-align: center">正在等待中的用戶端連接數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">nginx_connections_writing&lt;/td>
&lt;td style="text-align: center">正在寫入的用戶端連接數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">nginx_http_requests_total&lt;/td>
&lt;td style="text-align: center">客戶端總請求數量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">nginx_up&lt;/td>
&lt;td style="text-align: center">Nginx Exporter 是否正常運行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">nginxexporter_build_info&lt;/td>
&lt;td style="text-align: center">Nginx Exporter 的構建資訊&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統：&lt;a href="https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/" target="_blank" rel="noopener">https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/&lt;/a>&lt;/p>
&lt;p>Nginx Exporter 接入：&lt;a href="https://cloud.tencent.com/document/product/1416/56039" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/1416/56039&lt;/a>&lt;/p>
&lt;p>通過 nginx-prometheus-exporter 監控 nginx 指標：&lt;a href="https://maxidea.gitbook.io/k8s-testing/prometheus-he-grafana-de-dan-ji-bian-pai/tong-guo-nginxprometheusexporter-jian-kong-nginx" target="_blank" rel="noopener">https://maxidea.gitbook.io/k8s-testing/prometheus-he-grafana-de-dan-ji-bian-pai/tong-guo-nginxprometheusexporter-jian-kong-nginx&lt;/a>&lt;/p>
&lt;p>使用 nginx-prometheus-exporter 監控 nginx：&lt;a href="https://www.cnblogs.com/rongfengliang/p/13580534.html" target="_blank" rel="noopener">https://www.cnblogs.com/rongfengliang/p/13580534.html&lt;/a>&lt;/p>
&lt;p>使用阿里雲 Prometheus 監控 Nginx（新版）：&lt;a href="https://help.aliyun.com/document_detail/171819.html?spm=5176.22414175.sslink.29.6c9e1df9DdpLPP" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/171819.html?spm=5176.22414175.sslink.29.6c9e1df9DdpLPP&lt;/a>&lt;/p>
&lt;p>Grafana Image Renderer：&lt;a href="https://grafana.com/grafana/plugins/grafana-image-renderer/" target="_blank" rel="noopener">https://grafana.com/grafana/plugins/grafana-image-renderer/&lt;/a>&lt;/p>
&lt;p>grafana 的 image render 设置：&lt;a href="https://blog.csdn.net/dandanfengyun/article/details/115346594" target="_blank" rel="noopener">https://blog.csdn.net/dandanfengyun/article/details/115346594&lt;/a>&lt;/p></description></item><item><title>Docker 介紹 (如何使用 Docker-compose 建置 PHP+MySQl+Nginx 環境)</title><link>https://pin-yi.me/blog/docker/docker/</link><pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/docker/docker/</guid><description>
&lt;h2>什麼是 Docker ?&lt;span class="hx-absolute -hx-mt-20" id="什麼是-docker-">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-docker-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Docker 是一種軟體平台，它可以快速建立、測試和部署應用程式。為什麼可以快速建立呢？因為 Docker 會將軟體封裝到名為『容器』的標準單位。其中會包含程式庫、系統工具、程式碼、執行軟體所需的所有項目。
剛剛有提到容器 (Container)，是一種虛擬化技術，它高效率虛擬化及易於遷移和擴展的特性，非常適合現代雲端的開發及佈署。那 Container 與傳統的虛擬機有什麼差別呢？我們來看看下面這張圖&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/docker/container-vm.png"
alt="Container 與 VM 的差異" width="700">&lt;figcaption>
&lt;p>Container 與 VM 的差異&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>可以看到 Container 是以應用程式為單位，而 VM 則是以作業系統為單位。Container 是一個封裝了相依性資源與應用程式的執行環境 ; VM 則是一個配置好 CPU、RAM 與 Storage 的作業系統，為了更好的做區別，我把 Container、VM 兩個差別用表格來說明～&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">區別比較&lt;/th>
&lt;th style="text-align: center">Container&lt;/th>
&lt;th style="text-align: center">VM&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">單位&lt;/td>
&lt;td style="text-align: center">應用程式&lt;/td>
&lt;td style="text-align: center">作業系統&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">適用服務&lt;/td>
&lt;td style="text-align: center">多使用於微服務&lt;/td>
&lt;td style="text-align: center">使用較大型的服務&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">硬體資源&lt;/td>
&lt;td style="text-align: center">是以程式為單位，需要的硬體資源很少&lt;/td>
&lt;td style="text-align: center">VM 會先佔用 CPU、RAM 等等硬體資源，不管有沒有使用都會先佔用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">造成衝突&lt;/td>
&lt;td style="text-align: center">Container 間是彼此隔離的，因此在同一台機器可以執行不同版本的服務&lt;/td>
&lt;td style="text-align: center">會因為版本不同造成環境衝突&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">系統支援數量&lt;/td>
&lt;td style="text-align: center">單機支援上千個容器&lt;/td>
&lt;td style="text-align: center">一般最多幾十個&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">優點&lt;/td>
&lt;td style="text-align: center">1 . Image 較小，通常都幾 MB&lt;br>2 . 啟動速度快，通常幾秒就可以生成一個 Container&lt;br>3 . 更新較為容易，只需要利用新的 Image 重新啟動就會更新了&lt;/td>
&lt;td style="text-align: center">1 . 因為硬體層以上都虛擬化，因此安全性相對較高&lt;br>2 . 系統選擇較多，在 VM 可以選擇不同的 OS&lt;br>3 . 不需要降低應用程式內服務的耦合性，不需要將程式內的服務個別拆開來部署&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">缺點&lt;/td>
&lt;td style="text-align: center">1 . 安全性較 VM 差，因為環境與硬體都與本機共用&lt;br>2 . 在同一台機器中，每一個 Container 的 OS 都是相同的，無法一個為 Windows、一個為 Linux，還是依賴 Host OS&lt;br>3 . Container 通常會切成微服務的方式作部署，在各元件中的網路連結會比較複雜&lt;/td>
&lt;td style="text-align: center">1 . Image 的大小通常 GB 以上，比 Container 大很多&lt;br>2 . 啟動速度通常要花幾分鐘，因此服務重啟速度較慢&lt;br>3 . 資源使用較多，因為不只程式本身，還要將一部分資源分給 VM 的作業系統&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>總結&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>更快速的交付和部署：對於開發和維運人員來說，最希望就是一次建立或設定，可以再任意地方正常運行。開發者可以使用一個標準的映像檔來建立一套開發容器，開發完成之後，維運人員可以直接使用這個容器來部署程式。Docker 容器很輕很快！容器的啟動時間都是幾秒中的事情，大量地節約開發、測試、部署的時間。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更有效率的虛擬化：Docker 容器的執行不需要額外的虛擬化支援，它是核心層級的虛擬化，因此可以實作更高的效能和效率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更輕鬆的遷移和擴展：Docker 容器幾乎可以在任意的平台上執行，包括實體機器、虛擬機、公有雲、私有雲、個人電腦、伺服器等。 這種兼容性可以讓使用者把一個服務從一個平台直接遷移到另外一個。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更簡單的管理：使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分發和更新，從而實作自動化並且有效率的管理。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>Docker 基本概念&lt;span class="hx-absolute -hx-mt-20" id="docker-基本概念">&lt;/span>
&lt;a href="#docker-%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ul>
&lt;li>Dockerfile&lt;/li>
&lt;li>映像檔 (Image)&lt;/li>
&lt;li>容器 (Container)&lt;/li>
&lt;li>倉庫 (Repository)&lt;/li>
&lt;/ul>
&lt;p>這四個是 Docker 最基本的組成，了解後就可以知道整個 Docker 的生命週期。&lt;/p>
&lt;h3>Dockerfile&lt;span class="hx-absolute -hx-mt-20" id="dockerfile">&lt;/span>
&lt;a href="#dockerfile" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>開發人員在使用 Docker 時發現，大多現成的 Docker 映像檔無法滿足他們的需求，因此需要一種能夠生成映像檔的工具。Dockerfile 是一種簡易的文件檔，裡面包含了建立新映像檔所需的指令。&lt;/p>
&lt;p>Dockerfile 語法主要由 Command（命令）和 Argument （參數選擇）兩大元素組成。以下是一個簡易的 Dockerfile 示意圖：&lt;/p>
&lt;p>命令式語法＋選擇參數（Command + Argument）&lt;/p>
&lt;br>
&lt;h3>映像檔 (Image)&lt;span class="hx-absolute -hx-mt-20" id="映像檔-image">&lt;/span>
&lt;a href="#%e6%98%a0%e5%83%8f%e6%aa%94-image" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Docker 映像檔是一個唯獨的模板。&lt;/p>
&lt;p>例如：一個映像檔可在包含一個完整的 Linux 作業系統環境，裡面可以只安裝 Nginx 或使用者會使用到的其他應用程式。&lt;/p>
&lt;p>我們會使用映像檔來建立 Docker 的容器 (Container) ，Docker 也提供很簡單的機制來建立映像檔或是更新現有的映像檔，也可以去下載別人已經做好的映像檔。&lt;/p>
&lt;br>
&lt;h3>容器 (Container)&lt;span class="hx-absolute -hx-mt-20" id="容器-container">&lt;/span>
&lt;a href="#%e5%ae%b9%e5%99%a8-container" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Docker 是利用容器來執行應用程式。&lt;/p>
&lt;p>每一個容器都是由映像檔所建立的的執行程式。它可以被啟動、開始、停止、刪除。且每一個容器都是相互隔離的，不會相互影響。&lt;/p>
&lt;br>
&lt;h2>Docker 實作&lt;span class="hx-absolute -hx-mt-20" id="docker-實作">&lt;/span>
&lt;a href="#docker-%e5%af%a6%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>本章節會介紹 Docker 三大組件映像檔 (image)、容器 (Container)、倉庫 (Repository) 要如何實際操作，以及他們的關聯性是什麼～
&lt;br>&lt;/p>
&lt;h3>映像檔 (Image)&lt;span class="hx-absolute -hx-mt-20" id="映像檔-image-1">&lt;/span>
&lt;a href="#%e6%98%a0%e5%83%8f%e6%aa%94-image-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>本小節會介紹有關映像檔的內容，包括：&lt;/p>
&lt;ul>
&lt;li>如何從倉庫取得映像檔&lt;/li>
&lt;li>如何管理本地主機上的映像檔&lt;/li>
&lt;li>映像檔實作 (Dockerfile)&lt;/li>
&lt;/ul>
&lt;br>
&lt;h4>如何從倉庫取得映像檔&lt;span class="hx-absolute -hx-mt-20" id="如何從倉庫取得映像檔">&lt;/span>
&lt;a href="#%e5%a6%82%e4%bd%95%e5%be%9e%e5%80%89%e5%ba%ab%e5%8f%96%e5%be%97%e6%98%a0%e5%83%8f%e6%aa%94" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們可以先到 &lt;a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker hub&lt;/a> 上面看看有什麼服務或程式想要下載來做使用 [ 詳細介紹會放到&lt;a href="https://pin-yi.me/docker/#%e5%80%89%e5%ba%ab-repository-1" target="_blank" rel="noopener">倉庫 (Repository) &lt;/a>章節]，找到想要的服務，我們可以下 &lt;code>docker pull {要下載的服務、程式名稱}&lt;/code> ，我們這邊就先下載 Mysql 這個映像檔。&lt;/p>
&lt;ul>
&lt;li>mysql&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker pull mysql
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Using default tag: latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>latest: Pulling from library/mysql
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>15115158dd02: Pull complete
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.... 省略 ....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Digest: sha256:b17a66b49277a68066559416cf44a185cfee538d0e16b5624781019bc716c122
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Status: Downloaded newer image &lt;span style="color:#66d9ef">for&lt;/span> mysql:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker.io/library/mysql:latest&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>由於我們下載的沒有加任何的 &lt;code>tag&lt;/code> ，也就是版本，所以我們都是下載最新版 latest ，如果想要下載特定版本，可以在服務名稱後面加上 &lt;code>:{版本}&lt;/code> ，就可以下載對應的版本囉！&lt;/p>
&lt;br>
&lt;p>如果有標記 &lt;code>Official Image&lt;/code> 就代表是官方釋出的映像檔 ~ 在穩定性以及安全上更有保障，所以大家可以優先下載歐！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/docker/docker-image.png"
alt="Docker hub 下載 Image" width="900">&lt;figcaption>
&lt;p>Docker hub 下載 Image&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>管理本地主機上的映像檔&lt;span class="hx-absolute -hx-mt-20" id="管理本地主機上的映像檔">&lt;/span>
&lt;a href="#%e7%ae%a1%e7%90%86%e6%9c%ac%e5%9c%b0%e4%b8%bb%e6%a9%9f%e4%b8%8a%e7%9a%84%e6%98%a0%e5%83%8f%e6%aa%94" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;h5>查看映像檔 (images)&lt;span class="hx-absolute -hx-mt-20" id="查看映像檔-images">&lt;/span>
&lt;a href="#%e6%9f%a5%e7%9c%8b%e6%98%a0%e5%83%8f%e6%aa%94-images" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>當我們下載好映像檔後，可以使用 &lt;code>docker images&lt;/code> 來列出本機已下載的映像檔。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker images
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>REPOSITORY TAG IMAGE ID CREATED SIZE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>php latest d6229b88aa29 &lt;span style="color:#ae81ff">3&lt;/span> days ago 484MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql latest 826efd84393b &lt;span style="color:#ae81ff">6&lt;/span> days ago 521MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nginx latest c919045c4c2b &lt;span style="color:#ae81ff">13&lt;/span> days ago 142MB&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我們來看看都列出哪些訊息吧！&lt;/p>
&lt;ul>
&lt;li>REPOSITORY：來自於哪一個倉庫，像是 php、mysql、nginx。&lt;/li>
&lt;li>TAG：映像檔的標籤，因為我們都下載最新版本所以是 latest。&lt;/li>
&lt;li>IMAGE ID：它的唯一 &lt;code>ID&lt;/code> 號碼。&lt;/li>
&lt;li>CREATED：建立時間。&lt;/li>
&lt;li>VIRTUAL SIZE：映像檔大小。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h5>儲存映像檔 (save)&lt;span class="hx-absolute -hx-mt-20" id="儲存映像檔-save">&lt;/span>
&lt;a href="#%e5%84%b2%e5%ad%98%e6%98%a0%e5%83%8f%e6%aa%94-save" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>想要儲存映像檔，可以使用 &lt;code>docker save {映像檔名稱} &amp;gt; {檔案名稱}.tar&lt;/code>，來做儲存。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker save mysql &amp;gt; mysql.tar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls | grep &lt;span style="color:#e6db74">&amp;#39;mysql&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql.tar&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h5>刪除映像檔 (rmi)&lt;span class="hx-absolute -hx-mt-20" id="刪除映像檔-rmi">&lt;/span>
&lt;a href="#%e5%88%aa%e9%99%a4%e6%98%a0%e5%83%8f%e6%aa%94-rmi" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>想要刪除映像檔，可以使用 &lt;code>docker rmi {映像檔名稱}&lt;/code> 來做刪除。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker rmi demo-image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Untagged:demo-image:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Deleted: sha256:1f56acbcbe9ec613a37e26934a84d98bed73879059f424dc69754520086baa37&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>想要同時刪除映像檔時，可以先用 &lt;code>docker images -aq&lt;/code> 列出全部映像檔的 IMAGE ID，再一起刪除。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker rmi -f &lt;span style="color:#66d9ef">$(&lt;/span>docker images -aq&lt;span style="color:#66d9ef">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>注意！刪除映像檔(Image)時，要先用 &lt;code>docker rm {容器}&lt;/code> 去刪除所有依賴這個映像檔的容器。&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>接著要怎麼建立自己的映像檔呢？我們要使用 Dockerfile 來建立映像檔。&lt;/p>
&lt;h4>映像檔實作&lt;span class="hx-absolute -hx-mt-20" id="映像檔實作">&lt;/span>
&lt;a href="#%e6%98%a0%e5%83%8f%e6%aa%94%e5%af%a6%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;h5>撰寫 Dockerfile 映像檔&lt;span class="hx-absolute -hx-mt-20" id="撰寫-dockerfile-映像檔">&lt;/span>
&lt;a href="#%e6%92%b0%e5%af%ab-dockerfile-%e6%98%a0%e5%83%8f%e6%aa%94" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>Dockerfile 是一種文字格式的設定檔，可以透過 Dockerfile 快速建立自訂的映像檔，換句話說，Dockerfile 就像是建置 Docker Image 的腳本。&lt;/p>
&lt;p>舉個例子：可以把自己想像成一位設計師，設計好房子的格局、擺飾等，畫好設計圖 (Dockerfile) 後，最後請師傅 (Docker) 依你的構思完成就可以了。&lt;/p>
&lt;br>
&lt;p>我們就來開始實作一個 Dockerfile 吧 ~&lt;/p>
&lt;ol>
&lt;li>我們先創建一個來放 Dockerfile 的資料夾，可以直接在路徑下建立出映像檔&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>mkdir demo-dockerfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd demo-dockerfile/&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>Dockerfile 結構，大致可以分為四個部分&lt;/p>
&lt;ul>
&lt;li>基礎映像檔資訊&lt;/li>
&lt;li>維護者資訊&lt;/li>
&lt;li>映像檔操作指令&lt;/li>
&lt;li>容器啟動時需執行的指令&lt;/li>
&lt;/ul>
&lt;br>
&lt;ol start="2">
&lt;li>我們有說過 Dockerfile 是一個文字格式的設定檔，所以我們用 vim 來編寫 Dockerfile。&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>vim Dockerfile&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 基礎映像檔資訊&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FROM nginx:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 維護者資訊&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LABEL maintainer&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;880831ian@gmail.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 映像檔操作指令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RUN apt-get update -y&lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get install nginx -y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 運行時容器提供服務的通道&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EXPOSE &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 容器啟動時需執行的指令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CMD &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;nginx&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;-g&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;daemon off;&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>&lt;code>FROM nginx:latest&lt;/code>&lt;/p>
&lt;p>第一行為必要的指定基礎映像檔，這邊使用 nginx 作為基礎映像檔，我們用最新版本，所以是 latest。&lt;/p>
&lt;br>
&lt;p>&lt;code>LABEL maintainer=&amp;quot;880831ian@gmail.com&amp;quot;&lt;/code>&lt;/p>
&lt;p>維護者資訊想不也是不可以少的，這邊也可以輸入 Email 資訊，只是要注意的是此資訊會寫入產出映像檔的 Author 名稱屬性中。&lt;/p>
&lt;br>
&lt;p>&lt;code>RUN apt-get update -y\ &amp;amp;&amp;amp; apt-get install nginx -y&lt;/code>&lt;/p>
&lt;p>這邊是最重要的部分，想要在映像檔案上設定或安裝都需要將命令寫在這，格式必須依 RUN &lt;command> ，RUN 指令後面放 Linux 指令，如果指令太長可以使用\來換行。 -y 是在安裝 Nginx，會同意所有進行中所出現的問題。&lt;/p>
&lt;br>
&lt;p>&lt;code>EXPOSE 80&lt;/code>&lt;/p>
&lt;p>設定運行時容器提供服務的通道。&lt;/p>
&lt;br>
&lt;p>&lt;code>CMD [&amp;quot;nginx&amp;quot;,&amp;quot;-g&amp;quot;,&amp;quot;daemon off;&amp;quot;]&lt;/code>&lt;/p>
&lt;p>最後就是啟動指定容器時預設執行的指令，格式是 CMD [&amp;ldquo;executable&amp;rdquo;,&amp;ldquo;param1&amp;rdquo;,&amp;ldquo;param2&amp;rdquo;]。&lt;/p>
&lt;br>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>Docker 運行 Nginx 時為什麼要使用 daemon off;&lt;/p>
&lt;p>因為 Docker 容器啟動時，默認會把容器內部第一個進程，作爲 docker 容器是否正常運行的依據，如果 docker 容器 pid = 1 到進程就掛了，docker 就會退出！&lt;/p>
&lt;p>Docker 未執行自定義的 CMD 之前， Nginx 的 pid 是 1，執行到 CMD 之後，Nginx 就在後台運行，bash 或是 sh 的腳本就會變成 pid =1 。&lt;/p>
&lt;p>所以一但執行完 CMD，Nginx 容器就會退出了，所以才需要加上 &lt;code>-g daemon off;&lt;/code>。&lt;/p>
&lt;p>在 Nginx 官方的 &lt;a href="https://hub.docker.com/_/nginx" target="_blank" rel="noopener">Docker Repository&lt;/a> 也有說明，在 Complex configuration 內。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>順便說一下使用 Dockerfile 的優點：1 . 可以進行 Git 版控，讓你管理或分享更方便 2 . 佔用容量小，因為只是純文字檔而已。&lt;/p>
&lt;br>
&lt;h5>使用 Dockerfile 建立映像檔&lt;span class="hx-absolute -hx-mt-20" id="使用-dockerfile-建立映像檔">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8-dockerfile-%e5%bb%ba%e7%ab%8b%e6%98%a0%e5%83%8f%e6%aa%94" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>我們已經撰寫完 Dockerfile 檔案了，接下來要執行來產生映像檔，我們要使用 &lt;code>docker build&lt;/code> 來建立，我們一起來看看吧&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker build -t demo-image .&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>因為我們在 dockerfile 的目錄下，所以直接使用 “.” 來做建立動作，也可以使用 -f 來指定 dockerfile 的路徑位置。使用 -t 來設定映像檔的名稱，我們這邊取名叫 demo-image。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Building 2.7s &lt;span style="color:#f92672">(&lt;/span>7/7&lt;span style="color:#f92672">)&lt;/span> FINISHED
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">[&lt;/span>internal&lt;span style="color:#f92672">]&lt;/span> load build definition from Dockerfile 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; transferring dockerfile: 44B 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">[&lt;/span>internal&lt;span style="color:#f92672">]&lt;/span> load .dockerignore 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; transferring context: 2B 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">[&lt;/span>internal&lt;span style="color:#f92672">]&lt;/span> load metadata &lt;span style="color:#66d9ef">for&lt;/span> docker.io/library/nginx:latest 2.6s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">[&lt;/span>auth&lt;span style="color:#f92672">]&lt;/span> library/ubuntu:pull token &lt;span style="color:#66d9ef">for&lt;/span> registry-1.docker.io 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">[&lt;/span>1/2&lt;span style="color:#f92672">]&lt;/span> FROM docker.io/library/nginx:latest@sha256:8ae9bafbb64f63a50caab98fd3a5e37b3eb837a3e0780b78e5218e63193961f 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; CACHED &lt;span style="color:#f92672">[&lt;/span>2/2&lt;span style="color:#f92672">]&lt;/span> RUN apt-get update -y &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get install nginx -y 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; exporting to image 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; exporting layers 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; writing image sha256:1f56acbcbe9ec613a37e26934a84d98bed73879059f424dc69754520086baa37 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; naming to docker.io/demo-image&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>完成後我們使用 &lt;code>docker images&lt;/code> 來看看是否建立成功。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker images
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>REPOSITORY TAG IMAGE ID CREATED SIZE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>demo-image latest 1f56acbcbe9e &lt;span style="color:#ae81ff">2&lt;/span> hours ago 166MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>php latest d6229b88aa29 &lt;span style="color:#ae81ff">4&lt;/span> days ago 484MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql latest 826efd84393b &lt;span style="color:#ae81ff">6&lt;/span> days ago 521MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nginx latest c919045c4c2b &lt;span style="color:#ae81ff">13&lt;/span> days ago 142MB&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>執行容器的部分，我們放到容器 (Container)的章節在介紹 ~&lt;/p>
&lt;br>
&lt;h3>容器 (Container)&lt;span class="hx-absolute -hx-mt-20" id="容器-container-1">&lt;/span>
&lt;a href="#%e5%ae%b9%e5%99%a8-container-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們在介紹指令前，先來了解一下 Dockerfile、Docker Image、Docker Container 這三個的關係，可以先參考以下圖片&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/docker/docker/container.png"
alt="容器 Container 組成" width="300">&lt;figcaption>
&lt;p>容器 Container 組成&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們在啟動 Container 時，會有這三個部分組成，最底層是映像檔 (Image)，這一層主要是透過撰寫 Dockerfile 之後 build 出來的 Docker Image，就像我們前面說的它是一個唯獨的檔案。執行啟動了 Docker Container，就會加上第二層，就是需要先 Init Container 的設定，例如是 hostname、環境變數、網路連接等系統設定，最後最上層再加上一層讓使用者可以在此層去讀寫資料。&lt;/p>
&lt;br>
&lt;p>有關於容器 (Container) 的指令非常多，光是簡單的 run 就有很多參數，我們先列出比較常用且基本的 Container 指令～&lt;/p>
&lt;h4>Container 執行時的操作&lt;span class="hx-absolute -hx-mt-20" id="container-執行時的操作">&lt;/span>
&lt;a href="#container-%e5%9f%b7%e8%a1%8c%e6%99%82%e7%9a%84%e6%93%8d%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;h5>執行容器 (run)&lt;span class="hx-absolute -hx-mt-20" id="執行容器-run">&lt;/span>
&lt;a href="#%e5%9f%b7%e8%a1%8c%e5%ae%b9%e5%99%a8-run" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>我們想要創建一個新的容器並運行，就可以使用 &lt;code>docker run&lt;/code>，我們來看看他可以使用哪些參數吧！&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run &lt;span style="color:#f92672">[&lt;/span>OPTIONS&lt;span style="color:#f92672">]&lt;/span> IMAGE &lt;span style="color:#f92672">[&lt;/span>COMMAND&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>ARG...&lt;span style="color:#f92672">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>OPTIONS 說明：&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">參數&lt;/th>
&lt;th style="text-align: center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">-d&lt;/td>
&lt;td style="text-align: center">後台運行容器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">-i&lt;/td>
&lt;td style="text-align: center">命令互動模式，通常與 -t 同時使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">-t&lt;/td>
&lt;td style="text-align: center">為容器重新分配一個假裝的輸入終端，通常與 -i 同時使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">-p&lt;/td>
&lt;td style="text-align: center">指定容器與本機的 Port ，格式是 &lt;code>主機 Port : 容器 Port&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&amp;ndash;name=&amp;quot;{名稱}&amp;quot;&lt;/td>
&lt;td style="text-align: center">為容器設定名稱&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&amp;ndash;net=&amp;quot;{網路類型}&amp;quot;&lt;/td>
&lt;td style="text-align: center">指定容器的網路連接類型，支援 bridge/host/none/container 四種模式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&amp;ndash;link=&amp;quot;{其他容器}&amp;quot;&lt;/td>
&lt;td style="text-align: center">添加連接到另一個容器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&amp;ndash;volume,-v&lt;/td>
&lt;td style="text-align: center">將容器檔案路徑映射到本地端，格式是 &lt;code>本機路徑：容器路徑&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;br>
&lt;p>我們啟動我們下載好的 Nginx 來試試看吧！&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker run -d -p 7777:80 --name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;demo-nginx&amp;#34;&lt;/span> -v /Users/ian_zhuang/Desktop/data:/var/www/html nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>31a4a4a56e3ef2fb75d538c4c9eea4914ac506a84a6ff97e1fbbb6c3213cc6b7&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們將 Nginx 容器在背景執行，且將預設的 80 Port 與本機的 7777 Port 綁在一起，讓我們在本機瀏覽 7777 Port 會直接導向容器的 80Port，設定容器的名字叫做 “demo-nginx&amp;quot; ，我們 Nginx 容器的檔案路徑映射到本地端的桌面 data 資料夾，我們就可以在本機新增檔案同步到容器中。&lt;/p>
&lt;br>
&lt;h5>顯示容器 (ps)&lt;span class="hx-absolute -hx-mt-20" id="顯示容器-ps">&lt;/span>
&lt;a href="#%e9%a1%af%e7%a4%ba%e5%ae%b9%e5%99%a8-ps" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>使用 &lt;code>docker ps&lt;/code> 來檢查一下是否啟動成功 (&lt;code>ps&lt;/code> 可以顯示映像檔的基本資訊，如果沒有加 -a 只會顯示執行中的容器)&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker ps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>31a4a4a56e3e demo-image &lt;span style="color:#e6db74">&amp;#34;nginx -g &amp;#39;daemon of…&amp;#34;&lt;/span> About a minute ago Up About a minute 0.0.0.0:7777-&amp;gt;80/tcp demo-nginx&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>接著我們測試是否有把桌面 data 資料夾掛到容器的路徑，我們先在 data 新增一個 hello.html ，裡面隨意輸入，瀏覽一下 &lt;code>http://127.0.0.1:7777/hello.html&lt;/code> ，看看是否成功。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/docker/container-v.png"
alt="容器 Container -volume 測試" width="700">&lt;figcaption>
&lt;p>容器 Container -volume 測試&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h5>顯示容器紀錄 (logs)&lt;span class="hx-absolute -hx-mt-20" id="顯示容器紀錄-logs">&lt;/span>
&lt;a href="#%e9%a1%af%e7%a4%ba%e5%ae%b9%e5%99%a8%e7%b4%80%e9%8c%84-logs" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>想要看到我們執行 Container 的紀錄，可以使用 &lt;code>logs&lt;/code> 指令來顯示。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker logs demo-nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/docker-entrypoint.sh: Looking &lt;span style="color:#66d9ef">for&lt;/span> shell scripts in /docker-entrypoint.d/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>... 省略 ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022/03/15 09:27:51 &lt;span style="color:#f92672">[&lt;/span>notice&lt;span style="color:#f92672">]&lt;/span> 1#1: start worker process &lt;span style="color:#ae81ff">33&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022/03/15 09:27:51 &lt;span style="color:#f92672">[&lt;/span>notice&lt;span style="color:#f92672">]&lt;/span> 1#1: start worker process &lt;span style="color:#ae81ff">34&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022/03/15 09:27:51 &lt;span style="color:#f92672">[&lt;/span>notice&lt;span style="color:#f92672">]&lt;/span> 1#1: start worker process &lt;span style="color:#ae81ff">35&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h5>刪除容器 (rm -f)&lt;span class="hx-absolute -hx-mt-20" id="刪除容器-rm--f">&lt;/span>
&lt;a href="#%e5%88%aa%e9%99%a4%e5%ae%b9%e5%99%a8-rm--f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>想要刪除不需要的 Container，可以使用 &lt;code>rm&lt;/code> 指令來做刪除，&lt;code>-f&lt;/code> 是強制刪除容器。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker rm -f demo-nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>demo-nginx&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h5>進入容器 (exec)&lt;span class="hx-absolute -hx-mt-20" id="進入容器-exec">&lt;/span>
&lt;a href="#%e9%80%b2%e5%85%a5%e5%ae%b9%e5%99%a8-exec" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>想要進入 container 來查看資料或是修改檔案，可以使用 &lt;code>exec&lt;/code> 來進入容器中。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker exec -it demo-nginx /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@31a4a4a56e3e:/# ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bin boot dev docker-entrypoint.d docker-entrypoint.sh etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@31a4a4a56e3e:/# cd usr/bin/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@31a4a4a56e3e:/usr/bin# pwd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/bin&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h5>匯出檔案 (export)&lt;span class="hx-absolute -hx-mt-20" id="匯出檔案-export">&lt;/span>
&lt;a href="#%e5%8c%af%e5%87%ba%e6%aa%94%e6%a1%88-export" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>我們前面有提到說，如果刪除了容器，以前寫入的資料也會不見，如果想要輸出資料，可以使用 &lt;code>export&lt;/code> 將可讀可寫的那一層匯成檔案。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker export demo-nginx &amp;gt; demo-nginx.tar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls | grep &lt;span style="color:#e6db74">&amp;#39;demo&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>demo-nginx.tar&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>save 跟 export 的區別：&lt;/p>
&lt;p>還記得我們在儲存映像檔的時候有介紹到 save 嗎，那他跟 export 的區別是什麼呢？我們可以理解成&lt;/p>
&lt;p>save 是把 Docker Image 原始檔做儲存，export 是把修改 Docker Image 的內容都一併儲存。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h5>匯入檔案 (import)&lt;span class="hx-absolute -hx-mt-20" id="匯入檔案-import">&lt;/span>
&lt;a href="#%e5%8c%af%e5%85%a5%e6%aa%94%e6%a1%88-import" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>有匯出檔案，當然也有匯入檔案拉，可以使用 &lt;code>import&lt;/code> 將我們匯出的檔案匯入 Docker Image 裡面。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ cat ~/Desktop/demo-nginx.tar| docker import - import-nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sha256:7106935f0bfbdbb84f9eb20edb8cdb2c53207f5e0963f6a4e89d8267e9d98c56
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker images
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>REPOSITORY TAG IMAGE ID CREATED SIZE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>import-nginx latest 7106935f0bfb &lt;span style="color:#ae81ff">19&lt;/span> seconds ago 140MB&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h4>Container 的狀態&lt;span class="hx-absolute -hx-mt-20" id="container-的狀態">&lt;/span>
&lt;a href="#container-%e7%9a%84%e7%8b%80%e6%85%8b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;h5>檢查容器狀態 (inspect)&lt;span class="hx-absolute -hx-mt-20" id="檢查容器狀態-inspect">&lt;/span>
&lt;a href="#%e6%aa%a2%e6%9f%a5%e5%ae%b9%e5%99%a8%e7%8b%80%e6%85%8b-inspect" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>想要查看容器的狀態數據，可以使用 &lt;code>inspect&lt;/code> 來顯示。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:1f56acbcbe9ec613a37e26934a84d98bed73879059f424dc69754520086baa37&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;RepoTags&amp;#34;&lt;/span>: &lt;span style="color:#f92672">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;demo-image:latest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;RepoDigests&amp;#34;&lt;/span>: &lt;span style="color:#f92672">[]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Parent&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Comment&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;buildkit.dockerfile.v0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2022-03-15T03:02:26.8321887Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Container&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ContainerConfig&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Hostname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Domainname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;User&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.... 省略 ....&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h5>查看容器的 CPU、記憶體及網路使用 (stats)&lt;span class="hx-absolute -hx-mt-20" id="查看容器的-cpu記憶體及網路使用-stats">&lt;/span>
&lt;a href="#%e6%9f%a5%e7%9c%8b%e5%ae%b9%e5%99%a8%e7%9a%84-cpu%e8%a8%98%e6%86%b6%e9%ab%94%e5%8f%8a%e7%b6%b2%e8%b7%af%e4%bd%bf%e7%94%a8-stats" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>想要查看容器的 CPU、記憶體及網路使用，可以使用 &lt;code>stats&lt;/code> 來顯示。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>31a4a4a56e3e demo-nginx 0.00% 5.797MiB / 1.939GiB 0.29% 6.29kB / 2.83kB 1.46MB / 20.5kB &lt;span style="color:#ae81ff">5&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>倉庫 (Repository)&lt;span class="hx-absolute -hx-mt-20" id="倉庫-repository">&lt;/span>
&lt;a href="#%e5%80%89%e5%ba%ab-repository" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們在映像檔的章節有使用 &lt;code>docker pull&lt;/code> 來下載別人的映像檔來使用，那我們要如何把我們做好的上傳上去 Docker hub 呢！(由於 Docker hub 是公開平台，所以大家都可以自由的下載映像檔，所以是公司機密的映像檔，就要避免上傳歐！)&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker login
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authenticating with existing credentials...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Login Succeeded&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>由於我有下載桌面版的 Docker ，所以登入時不需要再另外設定！&lt;/p>
&lt;br>
&lt;p>我們在上傳到 Docker hub 之前，需要先修改 Image 的 tag ，格式 &lt;code>docker tag {Image Name} {DockerHub帳號}/{想要取的 Image Name}&lt;/code>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker images | grep &lt;span style="color:#e6db74">&amp;#39;demo-image&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>demo-image latest 1f56acbcbe9e &lt;span style="color:#ae81ff">24&lt;/span> hours ago 166MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker tag demo-image 880831ian/demo-image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker images | grep &lt;span style="color:#e6db74">&amp;#39;demo-image&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>880831ian/demo-image latest 1f56acbcbe9e &lt;span style="color:#ae81ff">24&lt;/span> hours ago 166MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>demo-image latest 1f56acbcbe9e &lt;span style="color:#ae81ff">24&lt;/span> hours ago 166MB&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>接下來就使用 &lt;code>docker push&lt;/code>，將映像檔上傳到 Docker hub 上！&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker push 880831ian/demo-image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Using default tag: latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The push refers to repository &lt;span style="color:#f92672">[&lt;/span>docker.io/880831ian/demo-image&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7722c88c8d69: Pushed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>68a85fa9d77e: Mounted from library/ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>latest: digest: sha256:814caacaf3dad3eccb43dc9bcad635d0473bd5946295d40ca1ec23d13a5f6d0f size: &lt;span style="color:#ae81ff">741&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我們也登入 Docker hub 看一下，是不是真的上傳成功了～&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/docker/docker/repository.png"
alt="repository" width="1000">&lt;figcaption>
&lt;p>repository&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>Docker 進階&lt;span class="hx-absolute -hx-mt-20" id="docker-進階">&lt;/span>
&lt;a href="#docker-%e9%80%b2%e9%9a%8e" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>本章節會分成三個常用功能來說明&lt;/p>
&lt;ul>
&lt;li>Volumes 介紹&lt;/li>
&lt;li>Network 模式介紹和比較&lt;/li>
&lt;li>Docker-compose 介紹與實作&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>Volumes 介紹&lt;span class="hx-absolute -hx-mt-20" id="volumes-介紹">&lt;/span>
&lt;a href="#volumes-%e4%bb%8b%e7%b4%b9" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們在先前介紹 Container 時，也有說到，Container 會分成 Image 層、Init 層以及使用者可讀可寫層的這三層。當我們將 Container 刪除後，存放在 Docker Container 上的資料也會不見，雖然可以用 &lt;code>export&lt;/code> 來儲存，但我們應該在根本上解決問題。&lt;/p>
&lt;p>所以我們可以使用兩種方式來解決！&lt;/p>
&lt;ol>
&lt;li>在執行 &lt;code>docker run&lt;/code> 指令時加入 &lt;code>-v&lt;/code> 參數，將 Container 的檔案路徑映射到本地端的檔案路徑。&lt;/li>
&lt;li>在撰寫 Dockerfile 時，加入 &lt;code>VOLUME&lt;/code> 指令，可以將資料存放在實體主機上。使用這個方法還要搭配我們介紹 &lt;a href="https://pin-yi.me/docker/#%e6%aa%a2%e6%9f%a5%e5%ae%b9%e5%99%a8%e7%8b%80%e6%85%8b-inspect" target="_blank" rel="noopener">Container 的狀態 &amp;gt; 檢查容器狀態 (inspect)&lt;/a> ，來查詢本地端檔案的存放路徑在哪。&lt;/li>
&lt;/ol>
&lt;br>
&lt;h4>使用 -v 指令將容器映射到本地端&lt;span class="hx-absolute -hx-mt-20" id="使用--v-指令將容器映射到本地端">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8--v-%e6%8c%87%e4%bb%a4%e5%b0%87%e5%ae%b9%e5%99%a8%e6%98%a0%e5%b0%84%e5%88%b0%e6%9c%ac%e5%9c%b0%e7%ab%af" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>在使用 &lt;code>docker run&lt;/code> 指令時，使用 &lt;code>-v&lt;/code> 將容器檔案路徑映射到本地的檔案路徑。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker run -it -v /Users/ian_zhuang/Desktop/data:/storage centos /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>latest: Pulling from library/centos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Digest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Status: Downloaded newer image &lt;span style="color:#66d9ef">for&lt;/span> centos:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@a99b41fba3ca /&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我們在著面的 data 資料夾隨意新增檔案或是資料，再進入 Docker Container 內的 /storage (該檔案是因為使用 -v 而新增的資料夾) ，看看有沒有同步新增。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@a99b41fba3ca /&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cd storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@a99b41fba3ca storage&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># pwd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/storage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@a99b41fba3ca storage&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1.html 2.html 3.html&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h4>Dockerfile VOLUME 使用&lt;span class="hx-absolute -hx-mt-20" id="dockerfile-volume-使用">&lt;/span>
&lt;a href="#dockerfile-volume-%e4%bd%bf%e7%94%a8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們先打開上次的 &lt;a href="https://pin-yi.me/docker/#%e6%92%b0%e5%af%ab-dockerfile-%e6%98%a0%e5%83%8f%e6%aa%94" target="_blank" rel="noopener">Dockerfile&lt;/a> 檔案，在基礎映像檔資訊的底下使用 &lt;code>VOLUME&lt;/code> 指令，加入 storage 資料夾，再將 Image Build 起來，啟動 Container，在 /storage 裡面隨便新增資料，最後我們在用 &lt;code>docker inspect&lt;/code> 指令來找映射在本地端的路徑。&lt;/p>
&lt;br>
&lt;ol>
&lt;li>在基礎映像檔資訊的底下使用 &lt;code>VOLUME&lt;/code> 指令，加入 storage 資料夾&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 基礎映像檔資訊&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FROM ubuntu:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VOLUME &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/storage&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.... 省略 ....&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>建立映像檔&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker build -t demo-image:v2 .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Building 1.3s &lt;span style="color:#f92672">(&lt;/span>6/6&lt;span style="color:#f92672">)&lt;/span> FINISHED
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">[&lt;/span>internal&lt;span style="color:#f92672">]&lt;/span> load build definition from Dockerfile 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; transferring dockerfile: 44B 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">[&lt;/span>internal&lt;span style="color:#f92672">]&lt;/span> load .dockerignore 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; transferring context: 2B 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">[&lt;/span>internal&lt;span style="color:#f92672">]&lt;/span> load metadata &lt;span style="color:#66d9ef">for&lt;/span> docker.io/library/ubuntu:latest 1.2s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">[&lt;/span>1/2&lt;span style="color:#f92672">]&lt;/span> FROM docker.io/library/ubuntu:latest@sha256:8ae9bafbb64f63a50caab98fd3a5e37b3eb837a3e0780b78e5218e63193961f9 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; CACHED &lt;span style="color:#f92672">[&lt;/span>2/2&lt;span style="color:#f92672">]&lt;/span> RUN apt-get update -y &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get install nginx -y 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; exporting to image 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; exporting layers 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; writing image sha256:0618bb2685ecfe200d9df4a91380d482031352d0e00cbfdf70fcd063aa8654fa 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; naming to docker.io/library/demo-image:v2&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="3">
&lt;li>啟動 Container，並在 /storage 內新增隨意資料&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker run -it demo-image:v2 /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@4f8712562dfe:/# echo &lt;span style="color:#e6db74">&amp;#34;Hello ian&amp;#34;&lt;/span> &amp;gt; /storage/helloworld.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@4f8712562dfe:/# ll /storage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">2&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Mar &lt;span style="color:#ae81ff">16&lt;/span> 05:39 ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Mar &lt;span style="color:#ae81ff">16&lt;/span> 05:38 ../
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">10&lt;/span> Mar &lt;span style="color:#ae81ff">16&lt;/span> 05:39 helloworld.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="4">
&lt;li>使用 &lt;code>inspect&lt;/code> 指令，來找到 Volume 在本地端映射的資料夾路徑，看看裡面有沒有我們在 Container 裡面新增的資料吧&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker inspect -f &lt;span style="color:#e6db74">&amp;#39;{{.Mounts}}&amp;#39;&lt;/span> 4f8712562dfe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[{&lt;/span>volume 4fe10ca3f...省略 /var/lib/docker/volumes/4fe10ca3f234633164d9b3c541893c68db1b4f98806525076a2edd5c1c7863c4/_data /storage local true &lt;span style="color:#f92672">}]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker run -it --privileged --pid&lt;span style="color:#f92672">=&lt;/span>host debian nsenter -t &lt;span style="color:#ae81ff">1&lt;/span> -m -u -n -i sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/ &lt;span style="color:#75715e"># cd /var/lib/docker/volumes/4fe10ca3f234633164d9b3c541893c68db1b4f98806525076a2edd5c1c7863c4/_data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/var/lib/docker/volumes/4fe10ca3f234633164d9b3c541893c68db1b4f98806525076a2edd5c1c7863c4/_data &lt;span style="color:#75715e"># ls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>helloworld.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>mac OS 找不到 /var/lib/docker/volumes：
由於 macOS 下的 docker 實際是在 vm 裡又多加一層，所以沒辦法直接訪問 /var/lib/docker/volumes，必須先透過以下指令進入 VM 中。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run -it --privileged --pid&lt;span style="color:#f92672">=&lt;/span>host debian nsenter -t &lt;span style="color:#ae81ff">1&lt;/span> -m -u -n -i sh&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>詳細內容可以參考 &lt;a href="https://stackoverflow.com/questions/38532483/where-is-var-lib-docker-on-mac-os-x" target="_blank" rel="noopener">Where is /var/lib/docker on Mac/OS X&lt;/a>。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h4>容器與容器之間資料共享&lt;span class="hx-absolute -hx-mt-20" id="容器與容器之間資料共享">&lt;/span>
&lt;a href="#%e5%ae%b9%e5%99%a8%e8%88%87%e5%ae%b9%e5%99%a8%e4%b9%8b%e9%96%93%e8%b3%87%e6%96%99%e5%85%b1%e4%ba%ab" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>如何啟用容器與容器之間的資料共享，可以用以下方式&lt;/p>
&lt;ol>
&lt;li>先啟動第一個容器指令如下&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run -it -v /data --name&lt;span style="color:#f92672">=&lt;/span>container1 centos /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@ a0307ce757ca /&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>另二個容器指令如下&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run -it --volumes-from container1 --name&lt;span style="color:#f92672">=&lt;/span>container2 centos /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@720d57983cd4 /&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>&lt;code>--volumes-from&lt;/code> 參數指定 container1 的資料會與 container2 做共享。&lt;/li>
&lt;/ul>
&lt;br>
&lt;ol start="3">
&lt;li>我們在第一個容器，進入 /data 資料夾，隨機輸入資料&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@a0307ce757ca /&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cd /data/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@a0307ce757ca data&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># echo &amp;#34;ian~&amp;#34; &amp;gt; hello.txt&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="4">
&lt;li>再來看一下第二個容器 /data 資料夾，是否有我們在容器(a0307ce757ca)產生的資料&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@720d57983cd4 /&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /data/hello.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ian~&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>Network 模式和比較&lt;span class="hx-absolute -hx-mt-20" id="network-模式和比較">&lt;/span>
&lt;a href="#network-%e6%a8%a1%e5%bc%8f%e5%92%8c%e6%af%94%e8%bc%83" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>在執行 &lt;code>docker run&lt;/code> 其中一個參數是 &lt;code>--net&lt;/code> ，他可以設定 Container 要使用哪一種的網路模式，以下分別說明這些網路模式&lt;/p>
&lt;ul>
&lt;li>none：在執行 Container 時，網路功能是關閉的，所以無法與此 Container 連線。&lt;/li>
&lt;li>container：使用相同的 Network Namespace ，假設 Container 1 的 IP 是 172.17.0.2，那 Container 2 的 IP 也是 172.17.0.2。&lt;/li>
&lt;li>host：Container 的網路設定和實體主機使用相同的網路設定，所以 Container 裡面也可以修改實體機器的網路設定，因此使用此模式需要考慮網路安全性上的問題。&lt;/li>
&lt;li>bridge：Docker 預設就是此網路模式，這個網路模式就像是 NAT 的網路模式，例如實體主機的 IP 是 192.168.1.10 它會對應到 Container 裡面的 172.17.0.2，在啟動 Docker 的服務時會有一個 docker0 的網路卡來做此網路的橋接。&lt;/li>
&lt;li>overlay：Container 之間可以在不同的實體機器上做連線，例如 Ｈ ost 1 有一個 Container 1 ，然後 Host 2 有一個 Container 2，Container 1 可以直接使用 overlay 的網路模式和 Container 2 做網路連線。&lt;/li>
&lt;li>macvlan：可以直接分配實體網卡的 MAC address 給特定的 Container，讓 Container 透過實體的網卡使用網路。&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>那我們就來實作每一個網路模式吧！&lt;/p>
&lt;h4>none&lt;span class="hx-absolute -hx-mt-20" id="none">&lt;/span>
&lt;a href="#none" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們使用 &lt;code>docker run&lt;/code>指令，在後面加入參數 &lt;code>--net=none&lt;/code> ，我們建立 &lt;code>jonlabelle/network-tools&lt;/code> (裡面有很多網路測試工具)。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker run -it --net&lt;span style="color:#f92672">=&lt;/span>none jonlabelle/network-tools
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>docker@network-tools&lt;span style="color:#f92672">]&lt;/span>$ ifconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lo Link encap:Local Loopback
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet addr:127.0.0.1 Mask:255.0.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .... 省略 ....&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以看到我們使用 &lt;code>ifconfig&lt;/code> 查詢，只有本地端的 127.0.0.1 IP，我們在使用 &lt;code>ping&lt;/code> 來測試 google 網站吧&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>docker@network-tools&lt;span style="color:#f92672">]&lt;/span>$ ping www.google.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ping: www.google.com: Try again&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h4>container&lt;span class="hx-absolute -hx-mt-20" id="container">&lt;/span>
&lt;a href="#container" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們先啟動一個名為 container1 的容器&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run --name container1 -it jonlabelle/network-tools&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>再開啟另一個 Terminal 來啟動 container2 的容器，並設定相同的 Network Namespace&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run --name container2 --net&lt;span style="color:#f92672">=&lt;/span>container:container1 -it jonlabelle/network-tools&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>一樣使用 &lt;code>ifconfig&lt;/code> 查詢，可以發現兩個容器的 IP 都是相同的&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>eth0 Link encap:Ethernet HWaddr 02:42:AC:11:00:02
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet addr:172.17.0.2 Bcast:172.17.255.255 Mask:255.255.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .... 省略 ....&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h4>host&lt;span class="hx-absolute -hx-mt-20" id="host">&lt;/span>
&lt;a href="#host" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>在執行 &lt;code>docker run&lt;/code> 指令時，在後面加入參數 &lt;code>--net=host&lt;/code> ，來測試 host 模式&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run --net&lt;span style="color:#f92672">=&lt;/span>host -it jonlabelle/network-tools&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>可以看到 Container 的網路資訊和實體主機的網路資訊是相同的結果&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>docker@network-tools&lt;span style="color:#f92672">]&lt;/span>$ ifconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>br-36a27cab1817 Link encap:Ethernet HWaddr 02:42:20:DF:DB:FD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet addr:172.20.0.1 Bcast:172.20.255.255 Mask:255.255.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UP BROADCAST MULTICAST MTU:1500 Metric:1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RX packets:0 errors:0 dropped:0 overruns:0 frame:0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .... 省略 ....&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;figure>&lt;img src="https://pin-yi.me/docker/docker/host.png"
alt="host 網路模式" width="500">&lt;figcaption>
&lt;p>host 網路模式&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>bridge&lt;span class="hx-absolute -hx-mt-20" id="bridge">&lt;/span>
&lt;a href="#bridge" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>在執行 &lt;code>docker run&lt;/code> 指令時，在後面加入參數 &lt;code>--net=bridge&lt;/code> ，來測試 bridge 模式&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run --net&lt;span style="color:#f92672">=&lt;/span>bridge -it jonlabelle/network-tools&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>docker 會新增一個虛擬網卡作為容器網路對外的出口，預設名稱為 &lt;code>docker0&lt;/code>，docker0 會跟本機的對外網卡(圖中的 &lt;code>eth0&lt;/code> )相連，藉此取得對外連線的能力，也因為每一個容器都會使用一個 veth device 與 docker0 相連，所以也具備對外連線的能力。&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/docker/docker/host.png"
alt="bridge 網路模式" width="600">&lt;figcaption>
&lt;p>bridge 網路模式&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>overlay&lt;span class="hx-absolute -hx-mt-20" id="overlay">&lt;/span>
&lt;a href="#overlay" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>下圖是說明 Host1 實體主機裡面有 Container1，然後 Host2 實體主機裡面有 Container2，可以透過 Docker overlay 模式將 Container1 和 Container2 連接做溝通。另外還需要一個 Consol 來存連線的資料庫，在使用 overlay 時要先在 Docker 做設定，這樣才能存放 overlay 網路模式的連線資訊。&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/docker/docker/overlay.png"
alt="overlay 網路模式" width="550">&lt;figcaption>
&lt;p>overlay 網路模式&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>macvlan&lt;span class="hx-absolute -hx-mt-20" id="macvlan">&lt;/span>
&lt;a href="#macvlan" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>macvlan 的原理就是在本機的網卡上虛擬出很多個子網卡，通過不同的 MAC 位置在數據鏈路層進行網路資料的轉發。&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/docker/docker/macvlan.png"
alt="macvlan 網路模式" width="450">&lt;figcaption>
&lt;p>macvlan 網路模式&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>Docker-compose&lt;span class="hx-absolute -hx-mt-20" id="docker-compose">&lt;/span>
&lt;a href="#docker-compose" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們在執行多個容器時，需要重複的下 &lt;code>run&lt;/code> 指令來執行，以及容器與容器之間要做關聯也要記得每一個之間要怎麼連結，會變得很麻煩且不易管理，所以有了 &lt;code>docker-compose&lt;/code> 可以將多個容器組合起來，變成一個強大的功能。&lt;/p>
&lt;p>只要寫一個 &lt;code>docker-compose.yml&lt;/code> 把所有會使用到的 Docker image 以及每一個容器之間的關聯或是網路的設定都寫上去，最後再使用 &lt;code>docker-compose up&lt;/code> 指令，就可以把所有的容器都執行起來囉！&lt;/p>
&lt;br>
&lt;p>我們就直接來實作我們這次的標題，要使用 docker-compose 來整合 PHP MySQL Nginx 環境。&lt;/p>
&lt;ol>
&lt;li>我們先開啟一個資料夾，取名叫 &lt;code>docker-compose&lt;/code> ，來放置我們的 docker-compose 檔案&lt;/li>
&lt;li>接著新增 &lt;code>docker-compose.yml&lt;/code> 檔案，要準備來撰寫我們的設定檔囉！ 由於內容有點長，所以我分段說明，(&lt;a href="https://github.com/880831ian/docker-compose-php-mysql-nginx" target="_blank" rel="noopener">這邊有放已經寫好的檔案歐&lt;/a>)&lt;/li>
&lt;/ol>
&lt;br>
&lt;p>&lt;strong>檔案目錄&lt;/strong>&lt;/p>
&lt;div class="hextra-filetree hx-mt-6 hx-select-none hx-text-sm hx-text-gray-800 dark:hx-text-gray-300 not-prose">
&lt;div class="hx-inline-block hx-rounded-lg hx-border hx-px-4 hx-py-2 dark:hx-border-neutral-800">
&lt;li class="hx-flex hx-list-none">
&lt;span class="hx-inline-flex hx-cursor-default hx-items-center hx-py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">Docker-compose.yml&lt;/span>
&lt;/span>
&lt;/li>
&lt;li class="hx-group hx-flex hx-list-none hx-flex-col">
&lt;button class="hextra-filetree-folder hx-inline-flex hx-cursor-pointer hx-items-center hx-py-1 hover:hx-opacity-60">
&lt;span data-state="open" class="data-[state=open]:hx-hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/>&lt;/svg>&lt;/span>
&lt;span data-state="open" class="data-[state=closed]:hx-hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/>&lt;/svg>&lt;/span>
&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">docker-volume&lt;/span>
&lt;/button>
&lt;ul data-state="open" class="ltr:hx-pl-5 rtl:hx-pr-5 data-[state=closed]:hx-hidden">
&lt;li class="hx-group hx-flex hx-list-none hx-flex-col">
&lt;button class="hextra-filetree-folder hx-inline-flex hx-cursor-pointer hx-items-center hx-py-1 hover:hx-opacity-60">
&lt;span data-state="open" class="data-[state=open]:hx-hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/>&lt;/svg>&lt;/span>
&lt;span data-state="open" class="data-[state=closed]:hx-hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/>&lt;/svg>&lt;/span>
&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">html&lt;/span>
&lt;/button>
&lt;ul data-state="open" class="ltr:hx-pl-5 rtl:hx-pr-5 data-[state=closed]:hx-hidden">
&lt;li class="hx-flex hx-list-none">
&lt;span class="hx-inline-flex hx-cursor-default hx-items-center hx-py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">index.php&lt;/span>
&lt;/span>
&lt;/li>
&lt;li class="hx-flex hx-list-none">
&lt;span class="hx-inline-flex hx-cursor-default hx-items-center hx-py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">info.php&lt;/span>
&lt;/span>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li class="hx-group hx-flex hx-list-none hx-flex-col">
&lt;button class="hextra-filetree-folder hx-inline-flex hx-cursor-pointer hx-items-center hx-py-1 hover:hx-opacity-60">
&lt;span data-state="open" class="data-[state=open]:hx-hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/>&lt;/svg>&lt;/span>
&lt;span data-state="open" class="data-[state=closed]:hx-hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/>&lt;/svg>&lt;/span>
&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">nginx&lt;/span>
&lt;/button>
&lt;ul data-state="open" class="ltr:hx-pl-5 rtl:hx-pr-5 data-[state=closed]:hx-hidden">
&lt;li class="hx-flex hx-list-none">
&lt;span class="hx-inline-flex hx-cursor-default hx-items-center hx-py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">Dockerfile&lt;/span>
&lt;/span>
&lt;/li>
&lt;li class="hx-flex hx-list-none">
&lt;span class="hx-inline-flex hx-cursor-default hx-items-center hx-py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">default.conf&lt;/span>
&lt;/span>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li class="hx-group hx-flex hx-list-none hx-flex-col">
&lt;button class="hextra-filetree-folder hx-inline-flex hx-cursor-pointer hx-items-center hx-py-1 hover:hx-opacity-60">
&lt;span data-state="open" class="data-[state=open]:hx-hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/>&lt;/svg>&lt;/span>
&lt;span data-state="open" class="data-[state=closed]:hx-hidden">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/>&lt;/svg>&lt;/span>
&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">php&lt;/span>
&lt;/button>
&lt;ul data-state="open" class="ltr:hx-pl-5 rtl:hx-pr-5 data-[state=closed]:hx-hidden">
&lt;li class="hx-flex hx-list-none">
&lt;span class="hx-inline-flex hx-cursor-default hx-items-center hx-py-1">&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>&lt;/svg>&lt;span class="ltr:hx-ml-1 rtl:hx-mr-1">Dockerfile&lt;/span>
&lt;/span>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/div>
&lt;/div>
&lt;br>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3.8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>... &lt;span style="color:#ae81ff">省略 ....&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以看到一開頭，會先寫版本，這邊代表的是會使用 3.8 版本的設定檔，詳細版本對照可以參考 &lt;a href="https://docs.docker.com/compose/compose-file/compose-versioning/" target="_blank" rel="noopener">Compose file versions and upgrading&lt;/a>&lt;/p>
&lt;p>services 可以設定用來啟動多的容器，裡面我們總共放了三個容器，分別是 nginx、php、mysql 。&lt;/p>
&lt;p>那我們來看看 nginx 裡面放了什麼吧！我會依照程式碼往下說明，有不清楚的可以底下留言！&lt;/p>
&lt;br>
&lt;h4>nginx&lt;span class="hx-absolute -hx-mt-20" id="nginx">&lt;/span>
&lt;a href="#nginx" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">nginx&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>: &lt;span style="color:#ae81ff">./nginx/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">7777&lt;/span>:&lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./docker-volume/log/:/var/log/nginx/&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>nginx 的 &lt;code>build&lt;/code> 就是要執行這個 nginx 容器的映像檔，還記得我們也可以使用 Dockerfile 來撰寫映像檔案嗎！?&lt;/p>
&lt;p>由於我們還要設定其他內容，所以特別另外拉一個 nginx 資料夾來放置，裡面放了兩個檔案，分別是 Dockerfile、default.conf。&lt;/p>
&lt;p>Dockerfile 檔案裡面會使用 nginx 版本 1.20 ，並將 default.conf 複製到容器的 /etc/nginx/conf.d/default.conf 來取代設定。&lt;/p>
&lt;p>以及我們使用 &lt;code>ports&lt;/code> 將容器 80 Port 指向本機 7777 Port ，格式是 &lt;code>本機 Port : 容器 Port&lt;/code>，&lt;/p>
&lt;p>再使用 &lt;code>volumes&lt;/code> 來設定我們 nginx 容器 &lt;code>log&lt;/code> 資料夾映射到本機的 &lt;code>./docker-volume/log/&lt;/code> 資料夾。&lt;/p>
&lt;br>
&lt;h4>php&lt;span class="hx-absolute -hx-mt-20" id="php">&lt;/span>
&lt;a href="#php" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">php&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>: &lt;span style="color:#ae81ff">./php/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">expose&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">9000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./docker-volume/html/:/var/www/html/&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>php 的 &lt;code>build&lt;/code> 是要執行這個 php 容器的映像檔，由於我們還要設定其他內容，所以特別另外拉一個 php 資料夾來放置 Dokcerfile。&lt;/p>
&lt;p>Dockerfile 檔案裡面會使用 php 版本 7.4-fpm，並且在容器執行 &lt;code>docker-php-ext-install&lt;/code>、&lt;code>mysqli&lt;/code>。&lt;/p>
&lt;p>並將 Port 9000 發佈於本機，再使用 &lt;code>volumes&lt;/code> 來設定 &lt;code>/var/www/html&lt;/code> 網站根目錄映射到本機的 &lt;code>./docker-volume/html/&lt;/code> 資料夾。&lt;/p>
&lt;br>
&lt;h4>mysql&lt;span class="hx-absolute -hx-mt-20" id="mysql">&lt;/span>
&lt;a href="#mysql" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">mysql&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">mysql:8.0.28&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./docker-volume/mysql/:/var/lib/mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">MYSQL_ROOT_PASSWORD&lt;/span>: &lt;span style="color:#ae81ff">secret&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">MYSQL_DATABASE&lt;/span>: &lt;span style="color:#ae81ff">mydb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">MYSQL_USER&lt;/span>: &lt;span style="color:#ae81ff">myuser&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">MYSQL_PASSWORD&lt;/span>: &lt;span style="color:#ae81ff">password&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>mysql 使用的映像檔是 mysql 版本是 8.0.28，我們為了要保留資料庫的資料，所以將容器的 &lt;code>/var/lib/mysql&lt;/code> 映射到本地端 &lt;code>./docker-volume/mysql&lt;/code> 資料夾。&lt;/p>
&lt;p>最後的環境變數，設定 root 帳號的登入密碼，以及要使用的資料庫、使用者的帳號、使用者的密碼。&lt;/p>
&lt;br>
&lt;p>最後在上面的 (&lt;a href="https://github.com/880831ian/docker-compose-php-mysql-nginx" target="_blank" rel="noopener">這邊有放已經寫好的檔案歐&lt;/a>) 裡面還有多一個 docker-volume/html 的資料夾，就是我們剛剛映射到本地端的資料夾，資料夾內已經放有連線測試的檔案，輸入網址 &lt;code>http://127.0.0.1:7777/index.php&lt;/code>，如果開啟後有顯示下方畫面，就代表我們成功用 docker-compose 將 PHP MySQL Nginx 整合再一起囉！&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/docker/docker/localhost-7777.png"
alt="測試是否成功用 docker-compose 整合 PHP MySQL Nginx" width="450">&lt;figcaption>
&lt;p>測試是否成功用 docker-compose 整合 PHP MySQL Nginx&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Docker 官網：&lt;a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">https://docs.docker.com/get-started/&lt;/a>&lt;/p>
&lt;p>什麼是 Docker？：&lt;a href="https://aws.amazon.com/tw/docker/" target="_blank" rel="noopener">https://aws.amazon.com/tw/docker/&lt;/a>&lt;/p>
&lt;p>Docker－－從入門到實踐：&lt;a href="https://philipzheng.gitbook.io/docker_practice/#yuan-chu-chu-ji-can-kao-zi-liao" target="_blank" rel="noopener">https://philipzheng.gitbook.io/docker_practice/#yuan-chu-chu-ji-can-kao-zi-liao&lt;/a>&lt;/p>
&lt;p>Dockerfile 建立自訂映像檔 — 架起網站快速又簡單（一）：&lt;a href="https://medium.com/@jackercleaninglab/dockerfile-%E5%BB%BA%E7%AB%8B%E8%87%AA%E8%A8%82%E6%98%A0%E5%83%8F%E6%AA%94-%E6%9E%B6%E8%B5%B7%E7%B6%B2%E7%AB%99%E5%BF%AB%E9%80%9F%E5%8F%88%E7%B0%A1%E5%96%AE-%E4%B8%80-22b2743f97b9" target="_blank" rel="noopener">https://medium.com/@jackercleaninglab/dockerfile-%E5%BB%BA%E7%AB%8B%E8%87%AA%E8%A8%82%E6%98%A0%E5%83%8F%E6%AA%94-%E6%9E%B6%E8%B5%B7%E7%B6%B2%E7%AB%99%E5%BF%AB%E9%80%9F%E5%8F%88%E7%B0%A1%E5%96%AE-%E4%B8%80-22b2743f97b9&lt;/a>&lt;/p>
&lt;p>用 30 天來介紹和使用 Docker：&lt;a href="https://ithelp.ithome.com.tw/users/20103456/ironman/1320" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/users/20103456/ironman/1320&lt;/a>&lt;/p>
&lt;p>Docker 網路簡介：&lt;a href="https://godleon.github.io/blog/Docker/docker-network-overview/" target="_blank" rel="noopener">https://godleon.github.io/blog/Docker/docker-network-overview/&lt;/a>&lt;/p>
&lt;p>Docker-compose Giving static IP in network mode : bridge：&lt;a href="https://stackoverflow.com/questions/61949319/docker-compose-giving-static-ip-in-network-mode-bridge" target="_blank" rel="noopener">https://stackoverflow.com/questions/61949319/docker-compose-giving-static-ip-in-network-mode-bridge&lt;/a>&lt;/p></description></item></channel></rss>