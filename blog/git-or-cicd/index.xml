<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PIN-YI – Git 或 CICD 相關</title><link>https://pin-yi.me/blog/git-or-cicd/</link><description>Recent content in Git 或 CICD 相關 on PIN-YI</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><atom:link href="https://pin-yi.me/blog/git-or-cicd/index.xml" rel="self" type="application/rss+xml"/><item><title>如何啟用 GitLab 的 Package Registry 以及將儲存位置從伺服器改到 GCS 上</title><link>https://pin-yi.me/blog/git-or-cicd/gitlab-package-registry-to-gcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/git-or-cicd/gitlab-package-registry-to-gcs/</guid><description>
&lt;p>今天接到一個案子，RD 部門之後想要使用 GitLab 的 Package Registry 功能來發布套件，且不想把它存在 GitLab 伺服器上，希望可以直接存到 GCP 的 Google Cloud Storage 上，所以才會有了此篇筆記來記錄一下整個過程。&lt;/p>
&lt;br>
&lt;p>版本資訊&lt;/p>
&lt;ul>
&lt;li>GitLab 14.10 (有部分設定會於新版本棄用，請記得確認好自己的版本是否支援)&lt;/li>
&lt;/ul>
&lt;p>先說一下，我們的 GitLab 是使用 docker-compose 來建置，所以後續的實作內容都會以 docker-compose 的方式來介紹。&lt;/p>
&lt;br>
&lt;h2>啟動 GitLab 的 Package Registry&lt;span class="absolute -mt-20" id="啟動-gitlab-的-package-registry">&lt;/span>
&lt;a href="#%e5%95%9f%e5%8b%95-gitlab-%e7%9a%84-package-registry" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>首先，我們當然要先啟動這項 Package Registry 功能，才可以再之後使用它，我們先看一下 GitLab 啟動的 docker-compose.yml 檔案：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gitlab&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;gitlab/gitlab-ee:14.10.5-ee.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">gitlab&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hostname&lt;/span>: &lt;span style="color:#ae81ff">gitlab-pid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">logging&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">driver&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;json-file&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">options&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max-size&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;100m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max-file&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;50&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GITLAB_OMNIBUS_CONFIG&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> external_url &amp;#39;${GITLAB_DOMAIN}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> letsencrypt[&amp;#39;enable&amp;#39;] = false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> gitlab_rails[&amp;#39;initial_root_password&amp;#39;] = &amp;#39;${GITLAB_ROOT_PASSWORD}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = &amp;#39;${GITLAB_HOST_SSH_PORT}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> gitlab_rails[&amp;#39;backup_keep_time&amp;#39;] = 79200
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> gitlab_rails[&amp;#39;omniauth_allow_single_sign_on&amp;#39;] = [&amp;#39;google_oauth2&amp;#39;]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> gitlab_rails[&amp;#39;omniauth_block_auto_created_users&amp;#39;] = false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> gitlab_rails[&amp;#39;omniauth_sync_profile_from_provider&amp;#39;] = [&amp;#39;google_oauth2&amp;#39;]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> gitlab_rails[&amp;#39;omniauth_sync_profile_attributes&amp;#39;] = [&amp;#39;name&amp;#39;, &amp;#39;email&amp;#39;]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> gitlab_rails[&amp;#39;omniauth_providers&amp;#39;] = [
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">略過．．．&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;${GITLAB_HOST_SSH_PORT}:22&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;${GITLAB_HOST_HTTP_PORT}:80&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;${GITLAB_HOST_HTTPS_PORT}:443&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;./config:/etc/gitlab&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;./logs:/var/log/gitlab&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;./data:/var/opt/gitlab&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>有些設定有略過或是省略不寫，大家就依照自己的設定來看就好～&lt;/p>
&lt;br>
&lt;h2>新增 Package Registry 設定&lt;span class="absolute -mt-20" id="新增-package-registry-設定">&lt;/span>
&lt;a href="#%e6%96%b0%e5%a2%9e-package-registry-%e8%a8%ad%e5%ae%9a" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>我們在上方的 &lt;code>gitlab_rails['omniauth_providers'] = [ ... 略 ... ] &lt;/code> 之後加上新增 Package Registry 設定內容：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">gitlab_rails[&amp;#39;packages_enabled&amp;#39;] = true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">gitlab_rails[&amp;#39;packages_object_store_enabled&amp;#39;] = true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">gitlab_rails[&amp;#39;packages_object_store_remote_directory&amp;#39;] = &amp;#34;GCS 名稱&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">gitlab_rails[&amp;#39;packages_object_store_direct_upload&amp;#39;] = true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">gitlab_rails[&amp;#39;packages_object_store_background_upload&amp;#39;] = true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">gitlab_rails[&amp;#39;packages_object_store_proxy_download&amp;#39;] = true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">gitlab_rails[&amp;#39;packages_object_store_connection&amp;#39;] = {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;provider&amp;#39;&lt;/span> &lt;span style="color:#ae81ff">=&amp;gt; &amp;#39;Google&amp;#39;,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;google_project&amp;#39;&lt;/span> &lt;span style="color:#ae81ff">=&amp;gt; &amp;#39;專案 ID&amp;#39;,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;google_json_key_location&amp;#39;&lt;/span> &lt;span style="color:#ae81ff">=&amp;gt; &amp;#39;/etc/gitlab/google_key.json&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>packages_enabled：啟動 packages&lt;/li>
&lt;li>packages_object_store_enabled：啟動 packages 對象存儲&lt;/li>
&lt;li>packages_object_store_remote_directory：設定 packages 對象存儲位置，這邊要輸入 GCS 的名稱&lt;/li>
&lt;li>packages_object_store_direct_upload：設定是否可以直接上傳到對象存儲位置&lt;/li>
&lt;li>packages_object_store_background_upload：設定是否以後台方式上傳到對象存儲位置&lt;/li>
&lt;li>packages_object_store_proxy_download：設定是否可以透過代理伺服器進行套件下載&lt;/li>
&lt;li>packages_object_store_connection：設定連接到對象存儲，由於我們要存到 GCS 上面，需要有這三項 provider、google_project、google_json_key_location 才可以將 packages 存到 GCS 上。如果想用其他的儲存位置，例如 Amazon S3、Azure Blob storage 可以參考 &lt;a href="https://docs.gitlab.com/ee/administration/object_storage.html" target="_blank" rel="noopener">Object storage 詳細設定&lt;/a> ( 其中的 google_json_key_location 是要放可以讀寫 GCS 的 SA SECRET 檔案 )&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>先查看尚未重啟的 GitLab Package&lt;span class="absolute -mt-20" id="先查看尚未重啟的-gitlab-package">&lt;/span>
&lt;a href="#%e5%85%88%e6%9f%a5%e7%9c%8b%e5%b0%9a%e6%9c%aa%e9%87%8d%e5%95%9f%e7%9a%84-gitlab-package" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>由於公司 GitLab 預設有先開啟 packages_enabled，所以我就拿同事用 Helm 寫的 CI，來做測試。當更新 value.yaml 後會自動打包 Package 放到 Package Registry 中，我們直接進入到預設 Package Registry 的儲存位置，是在 &lt;code>/var/opt/gitlab/gitlab-rails/shared/packages/&lt;/code>，用指令發現打包的 Package 的確存放於此 ，如下：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-package-registry-to-gcs/1.png"
alt="檢查是否還有 Package 在預設儲存位置 (尚未遷移)" width="800">&lt;figcaption>
&lt;p>檢查是否還有 Package 在預設儲存位置 (尚未遷移)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>重啟設定後再次檢查 GitLab Package&lt;span class="absolute -mt-20" id="重啟設定後再次檢查-gitlab-package">&lt;/span>
&lt;a href="#%e9%87%8d%e5%95%9f%e8%a8%ad%e5%ae%9a%e5%be%8c%e5%86%8d%e6%ac%a1%e6%aa%a2%e6%9f%a5-gitlab-package" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>當我們重啟設定後，也有建立好可供我們權限 SA 的 GCS 後，會發現原本存在預設 &lt;code>/var/opt/gitlab/gitlab-rails/shared/packages/&lt;/code> 沒有自動跑到 GCS 上，是因為我們還需要手動下指令將他遷移過去，指令是 &lt;code>gitlab-rake &amp;quot;gitlab:packages:migrate&amp;quot;&lt;/code>，最後等他跑完我們在檢查一下預設儲存位置就發現已經沒有 Package 了&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-package-registry-to-gcs/2.png"
alt="檢查是否還有 Package 在預設儲存位置 (已遷移)" width="800">&lt;figcaption>
&lt;p>檢查是否還有 Package 在預設儲存位置 (已遷移)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>開 GCS 網站來看會發現原先在預設儲存位置的 Package 都可以跑到 GCS 上：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-package-registry-to-gcs/3.png"
alt="查看已遷移到 Google Cloud Storage 的 Package" width="800">&lt;figcaption>
&lt;p>查看已遷移到 Google Cloud Storage 的 Package&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>參考資料&lt;span class="absolute -mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>GitLab Package Registry administration：&lt;a href="https://docs.gitlab.com/14.10/ee/administration/packages/" target="_blank" rel="noopener">https://docs.gitlab.com/14.10/ee/administration/packages/&lt;/a>&lt;/p></description></item><item><title>如何合併多個 commit，且推到遠端呢？</title><link>https://pin-yi.me/blog/git-or-cicd/git-merge-multiple-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/git-or-cicd/git-merge-multiple-commit/</guid><description>
&lt;p>當我們在使用 Git 時，常常修改完內容後，會推 commit 到 github or gitlab，在一個分支上開發久了， commit 會累積很多，很雜且很亂，所以我們可以試著將 commit 給合併。&lt;/p>
&lt;br>
&lt;p>大家可以使用這個檔案來做練習：&lt;a href="https://github.com/880831ian/git-merge-multiple-commit" target="_blank" rel="noopener">點我 GoGo&lt;/a> 😉&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/git-merge-multiple-commit/1.png"
alt="git commit" width="400">&lt;figcaption>
&lt;p>git commit&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>可以看到上面這張圖，這個與&lt;a href="https://github.com/880831ian/git-merge-multiple-commit" target="_blank" rel="noopener">範例檔案&lt;/a>的 commit 相似(不同專案，所以 SHA-1 也會不同，為了模擬所以 commit 相同而已)，我們模擬在同一個分支底下，有很多的 commit，那我們試著把他給合併起來。先說明一下目前的 commit 狀況，我們在 master 分支上有 3 個 commit，且已經推到遠端上。所以我們本地修改後，還要讓遠端的也合併，這個步驟要怎麼做呢？大家可以先想想看，後面會告訴大家答案 🥰&lt;/p>
&lt;br>
&lt;h2>合併本地端 commit&lt;span class="absolute -mt-20" id="合併本地端-commit">&lt;/span>
&lt;a href="#%e5%90%88%e4%bd%b5%e6%9c%ac%e5%9c%b0%e7%ab%af-commit" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>首先我們目的是想要讓 add 2.txt 與 add 3.txt 的 commit 合併成 add txt，可以先使用以下指令來找到他的 commit 的 SHA-1：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git log&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/git-merge-multiple-commit/2.png"
alt="git log 查看 commit 的 SHA-1" width="600">&lt;figcaption>
&lt;p>git log 查看 commit 的 SHA-1&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>要怎麼合併呢？我們先使用 rebase 到不會變動的 commit，也就是 add 1.txt 這個 commit：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git rebase -i 3b5bab9d5fb65b965ae55236734103b178f9daf2&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/git-merge-multiple-commit/3.png"
alt="git rebase" width="600">&lt;figcaption>
&lt;p>git rebase&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>下完後，會跳出上面圖片內容，可以看到上面是 rebase interactive (-i) 要執行的指令，下面是每個指令的簡單說明，我們本次會使用的只有 &lt;code>pick&lt;/code> 以及 &lt;code>squash&lt;/code>，分別的意思是：&lt;/p>
&lt;ul>
&lt;li>pick：會執行該 commit。&lt;/li>
&lt;li>squash：會把這個版本的 commit 合併到前一個 commit。&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>所以我們要將它改成以下：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>pick f8e5882 add 2.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>squash 3eb0ef4 add 3.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>也就是將 3eb0ef4 這個版本的 commit 合併到 f8e5882 的 commit，對應我們的例子，將 add 3.txt 合併到 add 2.txt 這個 commit。&lt;/p>
&lt;p>儲存離開後，會跳出以下的畫面，他會告訴你原本兩個的 commit message 分別是 add 2.txt 以及 add 3.txt，這時候我們要輸入新的 commit message，也就是 add txt，建議可以把原本的訊息註解掉。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/git-merge-multiple-commit/4.png"
alt="輸入新的 commit" width="600">&lt;figcaption>
&lt;p>輸入新的 commit&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>儲存後，我們查看 &lt;code>git log&lt;/code>，就可以看到我們將 add 2.txt 跟 add 3.txt 合併成 add txt 😝&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/git-merge-multiple-commit/5.png"
alt="查看目前合併狀態的 git log" width="600">&lt;figcaption>
&lt;p>查看目前合併狀態的 git log&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>合併遠端 commit&lt;span class="absolute -mt-20" id="合併遠端-commit">&lt;/span>
&lt;a href="#%e5%90%88%e4%bd%b5%e9%81%a0%e7%ab%af-commit" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>可以看到下方是我們已經將本機端的 commit 給合併，但遠端還是一樣有 3 個 commit，如果我們就這樣直接推上去，只會多一次的 commit，所以我們該怎辦呢 ?&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/git-merge-multiple-commit/6.png"
alt="遠端與本地端的 commit 不同" width="450">&lt;figcaption>
&lt;p>遠端與本地端的 commit 不同&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們就是要使用大家都害怕的：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git push -f&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>強制覆蓋掉分支上的內容，但&lt;strong>切記切記&lt;/strong>，這個只適用於自己的分支上歐～不然會直接大爆炸 💣&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/git-merge-multiple-commit/7.png"
alt="使用 git push -f 後的 commit" width="450">&lt;figcaption>
&lt;p>使用 git push -f 後的 commit&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>參考資料&lt;span class="absolute -mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>如何合併多個 commits：&lt;a href="https://zerodie.github.io/blog/2012/01/19/git-rebase-i/" target="_blank" rel="noopener">https://zerodie.github.io/blog/2012/01/19/git-rebase-i/&lt;/a>&lt;/p>
&lt;p>【狀況題】聽說 git push -f 這個指令很可怕，什麼情況可以使用它呢？：&lt;a href="https://gitbook.tw/chapters/github/using-force-push" target="_blank" rel="noopener">https://gitbook.tw/chapters/github/using-force-push&lt;/a>&lt;/p></description></item><item><title>部署 Laravel 於 Heroku 搭配 GitLab CI/CD</title><link>https://pin-yi.me/blog/git-or-cicd/laravel-gitlab-cicd-heroku/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/git-or-cicd/laravel-gitlab-cicd-heroku/</guid><description>
&lt;p>經過上一篇文章 &lt;a href="../../git-or-cicd/gitlab-cicd/" >如何從頭打造專屬的 GitLab CI/CD&lt;/a> 的學習，讓我們了解到 GitLab CI/CD 的整個流程，接著我們本次要把 Laravel 給部署到 Heroku 透過 GitLab 的 CI/CD 去達成，不需要透過任何人工去測試，並上架程式到 HeroKu 上，全部都依賴 GitLab CI/CD，讓我們接著看下去吧！&lt;/p>
&lt;br>
&lt;p>當然，此文章程式碼也會同步到 Github ，需要的也可以去查看歐！要記得先確定一下自己的版本 &lt;a href="https://github.com/880831ian/Laravel-GitLab-CICD-Heroku" target="_blank" rel="noopener">Github 程式碼連結&lt;/a> 😏&lt;/p>
&lt;h2>版本資訊&lt;span class="absolute -mt-20" id="版本資訊">&lt;/span>
&lt;a href="#%e7%89%88%e6%9c%ac%e8%b3%87%e8%a8%8a" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ul>
&lt;li>macOS：11.6&lt;/li>
&lt;li>Docker：Docker version 20.10.14, build a224086&lt;/li>
&lt;li>Laravel Installer：2.3.0&lt;/li>
&lt;li>Laravel Framework：9.14.1&lt;/li>
&lt;li>gitlab.com：GitLab Enterprise Edition 15.1.0-pre&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>首先，我們第一步驟就是先建立一個 Laravel 專案，至於為什麼要選擇用 Laravel 來當作 GitLab CI/CD 的範例呢？因為 Laravel 內建有 PHPUnit 的測試腳本，可以讓我們在 CI 測試時，更好的展現 CI 的功能！，有關於 Laravel 相關內容，這邊一樣推薦兩篇文章給大家閱讀：🤣&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../../code/laravel/" >Laravel 介紹 (使用 Laravel 從零到有開發出一個留言板功能並搭配 RESTful API 來實現 CRUD)&lt;/a>&lt;/li>
&lt;li>&lt;a href="../../code/laravel-advanced/" >Laravel 進階 (內建會員系統、驗證 RESTful API 是否登入、使用 Repository 設計模式)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>又工商了一波 XD&lt;/p>
&lt;br>
&lt;h2>建立 Laravel 專案&lt;span class="absolute -mt-20" id="建立-laravel-專案">&lt;/span>
&lt;a href="#%e5%bb%ba%e7%ab%8b-laravel-%e5%b0%88%e6%a1%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>請大家依照 Laravel 官方文件來建立 Laravel 環境，也可以看小弟我的文章拉 👆👆👆，請記得要先安裝好 php 以及 composer，接著按照以下步驟來建立。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/create.png"
alt="新建一個 Laravel 新專案" width="900">&lt;figcaption>
&lt;p>新建一個 Laravel 新專案&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>這時候瀏覽 &lt;code>http://127.0.0.1:8000&lt;/code>，如果都正確，應該會看到 Laravel 的首頁&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/laravel.png"
alt="Laravel 首頁" width="900">&lt;figcaption>
&lt;p>Laravel 首頁&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>測試本地 Unit Test&lt;span class="absolute -mt-20" id="測試本地-unit-test">&lt;/span>
&lt;a href="#%e6%b8%ac%e8%a9%a6%e6%9c%ac%e5%9c%b0-unit-test" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>接著我們剛剛有提到選用 Laravel 的原因是 Laravel 有 PHPUnit 單元測試可以使用，所以我們現在先在本地端來測試 Unit Test，專案預設有放一個單元測試在 &lt;code>tests/Unit/ExampleTest.php&lt;/code>。我們先再次確認環境是否有安裝好，再來執行單元測試。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/unittest.png"
alt="在本地端執行單元測試" width="900">&lt;figcaption>
&lt;p>在本地端執行單元測試&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>執行後，應該都會是通過的畫面，如下圖：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/demo_test.png"
alt="執行單元測試結果" width="900">&lt;figcaption>
&lt;p>執行單元測試結果&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>GitLab CI 建置&lt;span class="absolute -mt-20" id="gitlab-ci-建置">&lt;/span>
&lt;a href="#gitlab-ci-%e5%bb%ba%e7%bd%ae" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>上傳 Laravel 專案&lt;span class="absolute -mt-20" id="上傳-laravel-專案">&lt;/span>
&lt;a href="#%e4%b8%8a%e5%82%b3-laravel-%e5%b0%88%e6%a1%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>接下來我們要上傳含有 Unit Test 專案到 GitLab 上，步驟如下，如果已經熟悉如何將專案推到 GitLab，可以直接跳到 &lt;a href="#%e5%9c%a8-gitlab-%e4%b8%8a%e5%9f%b7%e8%a1%8c%e5%96%ae%e5%85%83%e6%b8%ac%e8%a9%a6" >在 GitLab 上執行單元測試&lt;/a>&lt;/p>
&lt;ol>
&lt;li>在 &lt;a href="https://gitlab.com" target="_blank" rel="noopener">gitlab.com&lt;/a> 上點選建立專案，選擇 &lt;strong>Create blank project&lt;/strong>，也可以直接瀏覽該網址 &lt;code>https://gitlab.com/projects/new#blank_project&lt;/code>。&lt;/li>
&lt;li>輸入專案名稱可以選擇 Project deployment target 為 &lt;strong>Heroko&lt;/strong>，選擇 Public，最後按下 &lt;strong>Create project&lt;/strong>&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/gitlab.png"
alt="在 GitLab 上建立新專案" width="800">&lt;figcaption>
&lt;p>在 GitLab 上建立新專案&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol start="3">
&lt;li>於專案資料夾下加入 remote 遠端 GitLab，並 Push 將專案推上去。&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/gitlab_push.png"
alt="將 Laravel 專案推到 GitLab 上" width="800">&lt;figcaption>
&lt;p>將 Laravel 專案推到 GitLab 上&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>成功推上去，可以到 GitLab 上，看到我們剛剛的專案！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/gitlab_show.png"
alt="成功推到 GitLab 上" width="800">&lt;figcaption>
&lt;p>成功推到 GitLab 上&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>在 GitLab 上執行單元測試&lt;span class="absolute -mt-20" id="在-gitlab-上執行單元測試">&lt;/span>
&lt;a href="#%e5%9c%a8-gitlab-%e4%b8%8a%e5%9f%b7%e8%a1%8c%e5%96%ae%e5%85%83%e6%b8%ac%e8%a9%a6" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>要在 GitLab 上執行 CI/CD 就需要有 Runner，這次我們選擇使用 &lt;a href="https://gitlab.com" target="_blank" rel="noopener">gitlab.com&lt;/a> 的 Shared runners，想要使用 Specific runners，可以查看上一篇 &lt;a href="../../git-or-cicd/gitlab-cicd/#%E8%87%AA%E6%9E%B6-runner-specific-runners" >如何從頭打造專屬的 GitLab CI/CD&lt;/a> 文章&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/runner.png"
alt="本次使用 Share runners" width="800">&lt;figcaption>
&lt;p>本次使用 Share runners&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接下來在專案的根目錄撰寫我們的 &lt;code>.gitlab-ci.yml&lt;/code> 檔案，之後再次上傳 GitLab，當我們根目錄有此檔案，GitLab-CI 就會讀取並依照內容啟動 Runner 來執行工作：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div class="filename">.gitlab-ci.yml&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">lorisleiva/laravel-docker:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Unit_test&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">before_script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./vendor/bin/phpunit --testsuit Unit --coverage-text --colors=never&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-8">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>說明一下這個 &lt;code>yml&lt;/code> 檔內的設定是在做什麼：&lt;/p>
&lt;ul>
&lt;li>image：因為我們執行 CI/CD 過程中，需要有 PHP、Compose、NPM 等工具，有這些套件管理工具就可以延伸去安裝更多套件，如果一開始沒有安裝，就會很麻煩，其中一個辦法就是去 Runner 環境修改並安裝，但因為方便以及我們這次使用 Share runners，所以不能修改別人的 Runner，另一個辦法是可以使用 &lt;code>image&lt;/code> 關鍵字，可以讓 Runner 切換到另一個環境去執行工作 (Job)，我們這邊使用 &lt;a href="https://github.com/lorisleiva/laravel-docker" target="_blank" rel="noopener">lorisleiva/laravel-docker:latest&lt;/a> ，他裡面已經幫我們安裝好上述的工具了！&lt;/li>
&lt;li>Unit_test：這邊也是我們的 Job，那裡面主要是先用 composer install 去安裝我們需要的套件，最後在執行 phpunit 來做單元測試。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>上傳 .gitlab-ci.yml&lt;span class="absolute -mt-20" id="上傳-gitlab-ciyml">&lt;/span>
&lt;a href="#%e4%b8%8a%e5%82%b3-gitlab-ciyml" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>接著我們使用以下指令將含有 &lt;code>.gitlab-ci.yml&lt;/code> 的專案上傳到 GitLab，並回到 GitLab 選擇 CI/CD，可以查看目前的 Pipelines，會有我們剛剛所新增的 Runner。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/gitlab-ci.png"
alt="將 .gitlab-ci.yml 推到 GitLab" width="600">&lt;figcaption>
&lt;p>將 &lt;code>.gitlab-ci.yml&lt;/code> 推到 GitLab&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/pipeline.png"
alt="查看 Runner 已經進行執行單元測試檢測" width="700">&lt;figcaption>
&lt;p>查看 Runner 已經進行執行單元測試檢測&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/runner-cicd.png"
alt="可以看到 Runner 先安裝我們的環境，再執行單元測試的腳本" width="700">&lt;figcaption>
&lt;p>可以看到 Runner 先安裝我們的環境，再執行單元測試的腳本&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>設置須通過測試才可以合併&lt;span class="absolute -mt-20" id="設置須通過測試才可以合併">&lt;/span>
&lt;a href="#%e8%a8%ad%e7%bd%ae%e9%a0%88%e9%80%9a%e9%81%8e%e6%b8%ac%e8%a9%a6%e6%89%8d%e5%8f%af%e4%bb%a5%e5%90%88%e4%bd%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>當我們有了測試還不夠，要怎麼確保每隻要上線 (合併到主分支) 的程式都有經過測試才上線呢？&lt;/p>
&lt;p>接下來我們可以在 GitLab 裡面做這些設定，先到專案的 Setting → General → Merge requests → Merge checks 點選 &lt;strong>Pipelines must succeed&lt;/strong>：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/mergechecks.png"
alt="點選 Pipelines must succeed 來確保程式合併前都必須經過測試" width="700">&lt;figcaption>
&lt;p>點選 &lt;strong>Pipelines must succeed&lt;/strong> 來確保程式合併前都必須經過測試&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>測試是否可以阻擋未成功情況&lt;span class="absolute -mt-20" id="測試是否可以阻擋未成功情況">&lt;/span>
&lt;a href="#%e6%b8%ac%e8%a9%a6%e6%98%af%e5%90%a6%e5%8f%af%e4%bb%a5%e9%98%bb%e6%93%8b%e6%9c%aa%e6%88%90%e5%8a%9f%e6%83%85%e6%b3%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們先模擬要開發新功能，所以在 master 最新 commit 下，建立一個新分支 &lt;code>new&lt;/code>&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git checkout -b &lt;span style="color:#e6db74">&amp;#34;new&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>接著修改單元測試，故意新增錯誤的測試，開啟專案的 &lt;code>tests/Unit/ExampleTest.php&lt;/code>，最下面加上紅色框框程式碼：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/exampletest.png"
alt="新增錯誤測試，還模擬看看是否能成功擋住" width="500">&lt;figcaption>
&lt;p>新增錯誤測試，還模擬看看是否能成功擋住&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>&lt;code>assertEquals&lt;/code> 會檢查這兩個值是否相同，不同的話，就會跳出錯誤，所以我們故意輸入 1 和 2。&lt;/p>
&lt;br>
&lt;p>並將它上傳到 GitLab，並發出 Merge Request 看看會有什麼結果！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/gitlab-test.png"
alt="將新增錯誤的 ExampleTest 加入暫存，推到 GitLab" width="600">&lt;figcaption>
&lt;p>將新增錯誤的 ExampleTest 加入暫存，推到 GitLab&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/mergerequest.png"
alt="並將 new 分支透過 Merge Request 來合併到 master" width="1000">&lt;figcaption>
&lt;p>並將 new 分支透過 Merge Request 來合併到 master&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>可以看到我們合併在 Pipeline 測試時，因為 new 沒有通過測試，所以也沒有辦法進行合併！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/mergeerror.png"
alt="分支 new 沒有通過測試，所以沒有進行 Merge" width="700">&lt;figcaption>
&lt;p>分支 new 沒有通過測試，所以沒有進行 Merge&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>GitLab CD 建置&lt;span class="absolute -mt-20" id="gitlab-cd-建置">&lt;/span>
&lt;a href="#gitlab-cd-%e5%bb%ba%e7%bd%ae" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>我們玩完 CI 後，接著要把程式部署到伺服器或是雲端上，這時候我們不需要透過人工手動的方式，只需要有 CD 來幫我們自動化部署就可以拉！如果不太清楚，可以參考這張圖片：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/gitlab_workflow.png"
alt="GitLab CI/CD workflow (圖片來源：GitLab)" width="900">&lt;figcaption>
&lt;p>GitLab CI/CD workflow (圖片來源：&lt;a href="https://docs.gitlab.com/ee/ci/introduction/" target="_blank" rel="noopener">GitLab&lt;/a>)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>當我們剛剛進行 CI 的整合測試，最後經過 Review and approve 合併到主分支，這時候如果我們有設定 CD，CD 就會幫我們部署到服務上，我把 CD 流程轉成文字步驟說明：&lt;/p>
&lt;br>
&lt;ol>
&lt;li>把新功能分支合併到 master 分支，代表功能已經可以上線&lt;/li>
&lt;li>GitLab 觸發 Gitlab-CI 執行 pipeline&lt;/li>
&lt;li>Gitlab-CI 執行自動化測試&lt;/li>
&lt;li>Gitlab-CI 測試成功後，執行部署到正式伺服器&lt;/li>
&lt;li>回傳執行結果至 GitLab&lt;/li>
&lt;/ol>
&lt;br>
&lt;p>那想要達成自動化部署之前，必須能在遠端用指令下達部署更新！簡單來說有兩件事情：&lt;/p>
&lt;ol>
&lt;li>要先整理再更新專案時需要哪些指令，並將其寫成腳本&lt;/li>
&lt;li>需要獲得伺服器的授權，可以對伺服器下達更新專案的腳本&lt;/li>
&lt;/ol>
&lt;br>
&lt;p>我們以現在 Laravel 專案來說，套用上面講的兩件事情：&lt;/p>
&lt;ol>
&lt;li>腳本製作：上線新版本大概要執行以下圖片的內容&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/laravel_up.png"
alt="Laravel 專案上線前會下達的指令" width="800">&lt;figcaption>
&lt;p>Laravel 專案上線前會下達的指令&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol start="2">
&lt;li>對遠端伺服器下指令：通常使用 ssh 與 伺服器做溝通，所以先在伺服器產生授權金鑰給要遠端控制的電腦，如果要給 Gitlab-CI 控制的話，也需要把金鑰存在 GitLab 上，通常使用 &lt;code>ssh user@remote.server 'git pull'&lt;/code> 來下達更新專案的指令&lt;/li>
&lt;/ol>
&lt;br>
&lt;p>本篇我們要部署的是 PaaS 的 HeroKu，可以減少時間去架設環境，就可以達到我們想要的效果，那接著會帶大家從 Heroku 設定開始歐！先簡單介紹一下 Heroku：&lt;/p>
&lt;p>Heroku 是一個支援多種程式語言的雲平台即時服務(PaaS)， 是一種雲端運算服務，提供運算平台與解決方案服務，PaaS 提供使用者將雲端基礎設施部署與建立至使用者端，或者藉此獲得使用程式語言、程式庫與服務。使用者不需要管理與控制雲端基礎設施（包含網路、伺服器、作業系統或儲存），但需要控制上層的應用程式部署與應用代管的環境。&lt;/p>
&lt;br>
&lt;h3>創建 Heroku 專案&lt;span class="absolute -mt-20" id="創建-heroku-專案">&lt;/span>
&lt;a href="#%e5%89%b5%e5%bb%ba-heroku-%e5%b0%88%e6%a1%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>那要使用 Heroku 當然需要一組帳號拉，建立帳號我應該不用再多介紹了吧 🤡  我們直接到 Heroku 頁面，右上角 New，點選 Create new app，輸入本次專案名稱，我就取叫 &lt;code>laravel-gitlab-cicd-heroku&lt;/code> (這個不能與別人重複，因為他會生成專屬網頁)， 進去後，點選右上角有一個 &lt;strong>Open app&lt;/strong>，就會跳出這個專案專屬的網頁：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/herokuapp.png"
alt="Heroku 專屬網頁" width="1000">&lt;figcaption>
&lt;p>Heroku 專屬網頁&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>設定 HeroKu 與 GitLab 連線&lt;span class="absolute -mt-20" id="設定-heroku-與-gitlab-連線">&lt;/span>
&lt;a href="#%e8%a8%ad%e5%ae%9a-heroku-%e8%88%87-gitlab-%e9%80%a3%e7%b7%9a" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>先點選右上角個人頭像 → Account setrtings → 在 Account 往下滑 → API Key，點選 &lt;strong>Reveal&lt;/strong> 並將該 API 記住，這是等等透過 GitLab 部署時會用到的 API Token：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/token.png"
alt="取得部署的 API Token" width="1000">&lt;figcaption>
&lt;p>取得部署的 API Token&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>回到 GitLab 專案底下，Settings → CI/CD → Variables，他可以將變數設定在這邊，再讓 &lt;code>.gitlab-ci.yml&lt;/code> 來抓取變數，設定以下兩個變數：(詳細可以參考&lt;a href="https://docs.gitlab.com/ee/ci/variables/index.html#add-a-cicd-variable-to-a-project" target="_blank" rel="noopener">官網&lt;/a>)&lt;/p>
&lt;ol>
&lt;li>Key 名稱(HEROKU_PRODUCTION_PROJECT_NAME)，Value 值(設定我們剛剛在 Heroku 部署的專案名稱，我的是 &lt;code>laravel-gitlab-cicd-heroku&lt;/code>)&lt;/li>
&lt;li>Key 名稱(HEROKU_PRODUCTION_API_KEY)，Value 值(這個就是我們上面的 API Key，每個人都要用自己的歐！上面的我已經重設了 😎  )&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/variables.png"
alt="gitLab 設定 Variables" width="800">&lt;figcaption>
&lt;p>gitLab 設定 Variables&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;ul>
&lt;li>這邊要注意先把預設的 Protect variable 給關閉，他預設會只能在受保護的分支或標籤運行，但我們這此以簡單為主，所以這些設定都先關掉。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>新增 Heroku 識別檔案&lt;span class="absolute -mt-20" id="新增-heroku-識別檔案">&lt;/span>
&lt;a href="#%e6%96%b0%e5%a2%9e-heroku-%e8%ad%98%e5%88%a5%e6%aa%94%e6%a1%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>接下來我們要新增一個檔案名為 &lt;code>Procfile&lt;/code>，它是 Heroku 部署更新時會啟動的對象，注意他沒有副檔名，我們在裡面輸入以下：(我們使用合併後的 master)&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/procfile.png"
alt="新增 HeroKu 識別檔案" width="650">&lt;figcaption>
&lt;p>新增 HeroKu 識別檔案&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>它代表我們網頁服務使用 apache2 指令運行並把入口指向專案資料夾中的 laravel 專案的入口資料夾。&lt;/p>
&lt;br>
&lt;h3>修改 .gitlab-ci.yml&lt;span class="absolute -mt-20" id="修改-gitlab-ciyml">&lt;/span>
&lt;a href="#%e4%bf%ae%e6%94%b9-gitlab-ciyml" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們修改原本用來 CI 的腳本，來設定自動化部署的任務 Job 及腳本&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div class="filename">.gitlab-ci.yml&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">lorisleiva/laravel-docker:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Production_Deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">Production_Deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">before_script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">apk add ruby ruby-dev ruby-irb ruby-rake ruby-io-console ruby-bigdecimal ruby-json ruby-bundler yarn ruby-rdoc &amp;gt;&amp;gt; /dev/null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">apk update&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">gem install dpl &amp;gt;&amp;gt; /dev/null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dpl --provider=heroku --app=$HEROKU_PRODUCTION_PROJECT_NAME --api-key=$HEROKU_PRODUCTION_API_KEY&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-8">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>最後上傳 GitLab 來觸發 Gitlab-CI 執行自動化部署 (上傳指令就不多說囉，想必大家都會了吧！，不會的話可以去看 &lt;a href="../../git-or-cicd/git/" >Git 介紹&lt;/a>，裡面有詳細的介紹 😍  )&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/cd_pass.png"
alt="觸發 Gitlab-CI 執行自動化部署" width="700">&lt;figcaption>
&lt;p>觸發 Gitlab-CI 執行自動化部署&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>可以看到部署成功，我們也來看看 Runner 運作狀況：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/cd_runner.png"
alt="Runner 運作狀況" width="800">&lt;figcaption>
&lt;p>Runner 運作狀況&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>看到他成功將服務給部署到 &lt;code>https://laravel-gitlab-cicd-heroku.herokuapp.com/&lt;/code>。&lt;/p>
&lt;br>
&lt;p>既然已經部署好了，當然要去看一下我們的網頁啊，但當我們打開部署好的網頁，會發現跳出 500 Error，雖然他與我們 CI/CD 沒有關係，但我們還是試著解決，那這個問題會發生是因為我們沒有給環境變數的 APP_KEY，這個 Key 可以在專案的 .env 取得，拿到後開啟 Heroku → Setting → Config vars 將 APP_KEY 設定上去。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/key.png"
alt="Runner 運作狀況" width="900">&lt;figcaption>
&lt;p>Runner 運作狀況&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>最後重新整理 &lt;code>https://laravel-gitlab-cicd-heroku.herokuapp.com/&lt;/code>，就可以看到我們部署上去的網站囉！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/laravel-gitlab-cicd-heroku/laravel_show.png"
alt="透過 CD 部署到 Heroku 的 Laravel 首頁" width="1000">&lt;figcaption>
&lt;p>透過 CD 部署到 Heroku 的 Laravel 首頁&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>參考資料&lt;span class="absolute -mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Gitlab-CI 入門實作教學 - 單元測試篇：&lt;a href="https://nick-chen.medium.com/gitlab-ci-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E7%AF%87-156455e2ad9f" target="_blank" rel="noopener">https://nick-chen.medium.com/gitlab-ci-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E7%AF%87-156455e2ad9f&lt;/a>&lt;/p>
&lt;p>Gitlab-CI 自動化部屬部署：&lt;a href="https://medium.com/@nick03008/%E6%95%99%E5%AD%B8-gitlab-ci-%E5%85%A5%E9%96%80%E5%AF%A6%E4%BD%9C-%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2%E7%AF%87-ci-cd-%E7%B3%BB%E5%88%97%E5%88%86%E4%BA%AB%E6%96%87-cbb5100a73d4" target="_blank" rel="noopener">https://medium.com/@nick03008/%E6%95%99%E5%AD%B8-gitlab-ci-%E5%85%A5%E9%96%80%E5%AF%A6%E4%BD%9C-%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2%E7%AF%87-ci-cd-%E7%B3%BB%E5%88%97%E5%88%86%E4%BA%AB%E6%96%87-cbb5100a73d4&lt;/a>&lt;/p>
&lt;p>部署 Laravel 於 Heroku 搭配 Gitlab CI/CD：&lt;a href="https://medium.com/@vip131430g/%E9%83%A8%E7%BD%B2-laravel-%E6%96%BC-heroku-%E6%90%AD%E9%85%8D-gitlab-ci-cd-6d59a66aebdb" target="_blank" rel="noopener">https://medium.com/@vip131430g/%E9%83%A8%E7%BD%B2-laravel-%E6%96%BC-heroku-%E6%90%AD%E9%85%8D-gitlab-ci-cd-6d59a66aebdb&lt;/a>&lt;/p></description></item><item><title>如何從頭打造專屬的 GitLab CI/CD</title><link>https://pin-yi.me/blog/git-or-cicd/gitlab-cicd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/git-or-cicd/gitlab-cicd/</guid><description>
&lt;p>自從上次學完 Jenkins 及 Ansible CI/CD，就覺得 CI/CD 實在太酷了！能夠自動化的去持續整合 (Continuous Integration, CI) 以及持續佈署 (Continuous Deployment,CD) 專案，再加上這幾天複習了 Git 的使用方法，突然想到，要怎麼設定我們將程式推到遠端的 Git Repo，能夠再搭配 CI/CD 去做測試，並且把程式碼自動部署到正式的服務機器設備上呢？&lt;/p>
&lt;br>
&lt;p>那我們就開始囉！此篇會複習一下 CI/CD 並且說明 GitLab CI/CD 運作的原理，關於實作部分會放到下一篇文章 &lt;a href="../laravel-gitlab-cicd-heroku/" >部署 Laravel 於 Heroku 搭配 GitLab CI/CD&lt;/a>&lt;/p>
&lt;p>對了工商一下，剛剛有提到的 Jenkins 及 Ansible CI/CD 總共有 3 篇文章，還沒看過的可以先飛過去看一下歐 👇👇👇&lt;/p>
&lt;p>&lt;a href="../../rd/jenkins-ansible/" >Jenkins 及 Ansible IT 自動化 CI/CD 介紹&lt;/a>&lt;/p>
&lt;p>&lt;a href="../../rd/jenkins/" >使用 Jenkins 設定 GitHub 觸發程序並通知 Telegram Bot&lt;/a>&lt;/p>
&lt;p>&lt;a href="../../rd/ansible/" >Ansible 介紹與實作 (Inventory、Playbooks、Module、Template、Handlers)&lt;/a>&lt;/p>
&lt;br>
&lt;p>老樣子文章也會同步到 Github，會附上範例中的程式碼，有需要的也可以去查看歐！ &lt;a href="https://github.com/880831ian/GitLab-CICD" target="_blank" rel="noopener">Github 程式碼連結&lt;/a> 💓&lt;/p>
&lt;br>
&lt;h2>GitLab CI/CD&lt;span class="absolute -mt-20" id="gitlab-cicd">&lt;/span>
&lt;a href="#gitlab-cicd" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>GitLab CI/CD 是 GitLab 內建強大的工具，在 GitHub 被稱為 Github Actions，這個之後有空再來介紹 XD，回歸正題，GitLab CI/CD 可以讓我們持續整合和部署，且不需要使用第三方的應用程式來整合。我們來複習一下 &lt;code>持續整合 CI&lt;/code>、&lt;code>持續部署 CD &lt;/code> 他們是什麼吧：&lt;/p>
&lt;br>
&lt;h3>持續整合 CI&lt;span class="absolute -mt-20" id="持續整合-ci">&lt;/span>
&lt;a href="#%e6%8c%81%e7%ba%8c%e6%95%b4%e5%90%88-ci" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>一個處於開發階段的專案或是軟體，它被我們放在 GitLab 的 Repository 裡，開發人員每天會推送不同的程式碼到 GitLab 上，GitLab 持續整合 CI 會在開發人員每次推送後，自動化的依照我們設定好的腳本進行建構與測試，從而減少開發中的專案發生錯誤的可能性。&lt;/p>
&lt;p>這種做法就被稱作持續整合，對於我們提交給專案的每一個更改、甚至是開發分支，它都是自動且持續地建構和測試，確保新加入的變動，符合我們在專案中所設計的所有測試。&lt;/p>
&lt;br>
&lt;h3>持續部署 CD&lt;span class="absolute -mt-20" id="持續部署-cd">&lt;/span>
&lt;a href="#%e6%8c%81%e7%ba%8c%e9%83%a8%e7%bd%b2-cd" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>持續部署，讓我們不太需要手動的去部署專案服務，而是將其設置為自動化部署，完全不需要有人工去干涉，減少了人為的部署錯誤。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/cicd.jpg"
alt="GitLab CI/CD (圖片來源：GitLab Agile Planning)" width="800">&lt;figcaption>
&lt;p>GitLab CI/CD (圖片來源：&lt;a href="https://about.gitlab.com/solutions/agile-delivery/" target="_blank" rel="noopener">GitLab Agile Planning&lt;/a>)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>大致了解是如何運作之後，我們接著聊聊上面有提到的 &lt;code>設定好的腳本&lt;/code>：&lt;/p>
&lt;h3>.gitlab-ci.yml&lt;span class="absolute -mt-20" id="gitlab-ciyml">&lt;/span>
&lt;a href="#gitlab-ciyml" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>GitLab CI/CD 的工作原理是，要在專案根目錄新增一個名為 &lt;code>.gitlab-ci.yml&lt;/code> 的文件 (記得文件名稱開頭有 &lt;code>.&lt;/code> ，我一開始忘記要加，想說怎麼都沒有反應 😅 )，也就是我們上面說的 &lt;code>設定好的腳本&lt;/code>，可以先將所需建構、測試和部署的腳本編寫完成，以及定義很多規則，例如執行命令的先後順序、部署應用程式的位置以及指定是否自動運行或是手動觸發腳本等。&lt;/p>
&lt;p>將 &lt;code>.gitlab-ci.yml&lt;/code> 文件放入 Repository 裡，就會觸發 CI，負責管理的 GitLab-CI 就會依照 &lt;code>.gitlab-ci.yml&lt;/code> 設定檔來啟動名為 &lt;code>GitLab Runner&lt;/code> 的工具來運行腳本，這個 &lt;code>GitLab Runner&lt;/code> 我們放到後面來說，我們先來說說 &lt;code>.gitlab-ci.yml&lt;/code> 這個設定檔要怎麼編寫，以及編寫後的流程。&lt;/p>
&lt;br>
&lt;p>這是一個示範的 &lt;code>.gitlab-ci.yml&lt;/code>，選自優良的 &lt;a href="https://docs.gitlab.com/ee/ci/quick_start/" target="_blank" rel="noopener">GitLab&lt;/a> XD，為了說明有小修改程式碼，程式碼也會放在 &lt;a href="https://github.com/880831ian/GitLab-CICD" target="_blank" rel="noopener">GitHub&lt;/a> 上歐：&lt;/p>
&lt;ul>
&lt;li>.gitlab-ci.yml&lt;/li>
&lt;/ul>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">stages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">cache&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">paths&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">config/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">build-job&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">echo &amp;#34;Hello, $GITLAB_USER_LOGIN!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">test-job1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">echo &amp;#34;This job tests something&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">test-job2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">before_script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">echo &amp;#34;This job tests something, but takes more time than test-job1.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">echo &amp;#34;After the echo commands complete, it runs the sleep command for 20 seconds&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">echo &amp;#34;which simulates a test that runs 20 seconds longer than test-job1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">sleep 20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">deploy-prod&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">echo &amp;#34;This job deploys something from the $CI_COMMIT_BRANCH branch.&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>那我來簡單說明一下上面這些設定檔案的功能：&lt;/p>
&lt;ul>
&lt;li>stages：代表這個 CI 設定檔有三個 stage 要跑，一個是 build、一個 test、一個 deploy，他們的順序也決定 CI 運作的順序，由 build → test → deploy，假如 test 沒有通過，就不會執行 deploy。&lt;/li>
&lt;li>cache：我們在寫 CI 時，常常需要裝 package，但我不想每次都重新跑一次，所以可以寫一個 cache，不要讓 GitLab 每次都重新拉新的 package。&lt;/li>
&lt;li>build-job、test-job1、test-job2、deploy-prod：代表我有 4 個 job 要執行，每個 job 裡面有不同的任務，也是顯示在 Pipeline 的名稱。&lt;/li>
&lt;li>stage：他現在要執行的階段，對應到 stages。&lt;/li>
&lt;li>before_script：可以把它當先需要先執行的指令，後面才會執行主要的 script 指令。所以需要安裝的可以先寫在這裡面。&lt;/li>
&lt;li>script：主指令，在實際運行的腳本中，通常會見到多行的指令被依序執行。&lt;/li>
&lt;li>$CI_COMMIT_BRANC：當然 &lt;code>.gitlab-ci.yml&lt;/code> 檔案也可以帶入參數，這個部分我們留到 &lt;a href="../laravel-gitlab-cicd-heroku/" >部署 Laravel 於 Heroku 搭配 GitLab CI/CD&lt;/a> 搭配實際操作來說明。&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>當然 &lt;code>.gitlab-ci.yml&lt;/code> 有很多功能，上面只是簡單說明比較常用的，當你不確定自己寫的 CI 設定檔有沒有問題，沒關係就直接推上去，GitLab 還會先檢查一下設定檔是不是正確：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/error.png"
alt="GitLab CI/CD 檢查格式有錯" width="600">&lt;figcaption>
&lt;p>GitLab CI/CD 檢查格式有錯&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>當我們將 &lt;code>.gitlab-ci.yml&lt;/code> 連同專案一起推到 GitLab 上後，我們可以看到它會開始執行我們所寫的腳本，會顯示整個執行過程：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/ci.png"
alt="GitLab CI/CD 執行過程" width="1000">&lt;figcaption>
&lt;p>GitLab CI/CD 執行過程&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>查看執行的狀態：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/status.png"
alt="GitLab CI/CD 狀態" width="800">&lt;figcaption>
&lt;p>GitLab CI/CD 狀態&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>也可以在 GitLab Pipeline 看到執行的流程：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/pipeline.png"
alt="GitLab CI/CD Pipeline" width="800">&lt;figcaption>
&lt;p>GitLab CI/CD Pipeline&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>GitLab CI Runner&lt;span class="absolute -mt-20" id="gitlab-ci-runner">&lt;/span>
&lt;a href="#gitlab-ci-runner" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們上面有提到，我們在 CI 跑腳本，需要一個 Server 來代替 GitLab 來讓我們執行，這個 Server 我們稱為 Runner。我們來看一下整個執行的圖片：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/gitlab-cicd.png"
alt="Gitlab CI/CD 實際執行流程 (圖片來源：Gitlab-CI 入門實作教學 - 單元測試篇)" width="600">&lt;figcaption>
&lt;p>Gitlab CI/CD 實際執行流程 (圖片來源：&lt;a href="https://nick-chen.medium.com/gitlab-ci-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E7%AF%87-156455e2ad9f" target="_blank" rel="noopener">Gitlab-CI 入門實作教學 - 單元測試篇&lt;/a>)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>那這個 Runner 有分成兩種：&lt;/p>
&lt;ul>
&lt;li>共享 Runner (Shared Runners)&lt;/li>
&lt;li>自架 Runner (Specific Runners)&lt;/li>
&lt;/ul>
&lt;br>
&lt;h4>共享 Runner (Shared Runners)&lt;span class="absolute -mt-20" id="共享-runner-shared-runners">&lt;/span>
&lt;a href="#%e5%85%b1%e4%ba%ab-runner-shared-runners" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>因為本文章以及後續 &lt;a href="../laravel-gitlab-cicd-heroku/" >部署 Laravel 於 Heroku 搭配 GitLab CI/CD&lt;/a> 文章所使用的平台是 &lt;a href="https://gitlab.com" target="_blank" rel="noopener">gitlab.com&lt;/a>，由官方所提供，所以我們直接使用共享 Runner，可以在 repository Settings → CI / CD → Runners 中找到，有不少官方提供的共享 Runner 可以使用，也不需要做任何設定。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/sharedrunners.png"
alt="GitLab CI/CD 共享 Runner" width="800">&lt;figcaption>
&lt;p>GitLab CI/CD 共享 Runner&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>但也有幾個缺點：&lt;/p>
&lt;ul>
&lt;li>因為是共享，所以 Server 資源也會共享，理論上多人使用的速度還是會比較慢。&lt;/li>
&lt;li>以及如果是開源專案，是完全免費。但如果是私人專案，一個月有 400 分鐘的 CI 執行時間限制。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h4>自架 Runner (Specific Runners)&lt;span class="absolute -mt-20" id="自架-runner-specific-runners">&lt;/span>
&lt;a href="#%e8%87%aa%e6%9e%b6-runner-specific-runners" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/gitlab-runner.jpg"
alt="GitLab CI/CD 自架 Runner (圖片來源：Best Practice for DevOps on GitLab and GCP : GitLab Runner 簡介與安裝 - Day 7)" width="600">&lt;figcaption>
&lt;p>GitLab CI/CD 自架 Runner (圖片來源：&lt;a href="https://ithelp.ithome.com.tw/articles/10214266" target="_blank" rel="noopener">Best Practice for DevOps on GitLab and GCP : GitLab Runner 簡介與安裝 - Day 7&lt;/a>)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>GitLab Server 和 GitLab Runner 是 GitLab CI/CD 中不可或缺的兩者，但如果像公司是自架 GitLab，首先要先找一台電腦或是 Server 做為 Runner，那我們這邊以 Docker 作示範。&lt;/p>
&lt;p>GitLab Runner 的建議建置步驟如下：&lt;/p>
&lt;ol>
&lt;li>準備/安裝一個 GitLab Server (這邊我們直接使用 &lt;a href="https://gitlab.com" target="_blank" rel="noopener">gitlab.com&lt;/a>)&lt;/li>
&lt;li>安裝一個與 GitLab Server 對應版本的 GitLab Runner&lt;/li>
&lt;li>在安裝 GitLab Runner 的設備上設定 &lt;a href="https://docs.gitlab.com/runner/executors/" target="_blank" rel="noopener">Executor&lt;/a>&lt;/li>
&lt;/ol>
&lt;br>
&lt;p>什麼是 Executor ?&lt;/p>
&lt;p>如果把 GitLab Runner 當成一個工廠來看，那 Executor 就是工廠內一個又一個的產線，同一個工廠內可以擁有不同種類的產線，Runner 與 Executor 之間的關係就是如此，這些產線會根據專案中 &lt;code>.gitlab-ci.yml&lt;/code> 的內容，決定產線以及如何產出開發者期望的產品。&lt;/p>
&lt;p>另外 Executor 的種類非常多，可以看下方這些圖片，因為我們最常使用的就是 Docker，所以我們等等的範例，也是建置在 Docker 之上！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/executor.png"
alt="GitLab Runner Executors" width="700">&lt;figcaption>
&lt;p>GitLab Runner Executors&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>那我們就開始來實作我們的 GitLab Runner 吧：&lt;/p>
&lt;ol>
&lt;li>首先，我們回去剛剛在 repository Settings → CI / CD → Runners 左側的 Specific runners&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/specificrunners.png"
alt="GitLab Runner Executors" width="700">&lt;figcaption>
&lt;p>GitLab Runner Executors&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>可以看到一個註冊的 URL 以及 Token，這個我們在設定 Executor 會使用到！&lt;/p>
&lt;br>
&lt;ol start="2">
&lt;li>接下來開始安裝 GitLab Runner，我們使用 Docker，以下是 Docker 執行的指令：本此使用 &lt;a href="https://hub.docker.com/layers/gitlab-runner/gitlab/gitlab-runner/alpine-v15.0.0/images/sha256-f44b39d92aa31186b4d6b986d1c3ffbf8ef4228c2e070410a7a417fb0aa159ce?context=explore" target="_blank" rel="noopener">gitlab-runner&lt;/a> 版本是 alpine-v15.0.0&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run -d --name gitlab-runner --restart always &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-v ~/Shared/gitlab-runner/config:/etc/gitlab-runner &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-v /var/run/docker.sock:/var/run/docker.sock &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>gitlab/gitlab-runner:alpine-v15.0.0&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="3">
&lt;li>接著進入容器裡面，使用 &lt;code>docker exec -it gitlab-runner gitlab-runner register&lt;/code> 來註冊，可以參考下方圖片，輸入 URL 以及 自己的 Token：&lt;/li>
&lt;/ol>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/register_executor.png"
alt="GitLab Runner 註冊 Executors" width="1000">&lt;figcaption>
&lt;p>GitLab Runner 註冊 Executors&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol start="4">
&lt;li>可以回到 gitlab.com 查看 Specific runners 下方是否多了我們剛剛所註冊的 GitLab-Runner&lt;/li>
&lt;/ol>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/gitlab-cicd/available_runners.png"
alt="GitLab Available specific runners" width="700">&lt;figcaption>
&lt;p>GitLab Available specific runners&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>GitLab CD&lt;span class="absolute -mt-20" id="gitlab-cd">&lt;/span>
&lt;a href="#gitlab-cd" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>GitLab CD 其實就是在 &lt;code>.gitlab-ci.yml&lt;/code> 後面加上我們要部署的設定，透過 CI 整合完，我們可以設定他要部署到哪一台機器或是設備上這部分就放到下一篇文章直接用實作來告訴大家要怎麼使用吧！，請大家接續看下一篇 &lt;a href="../laravel-gitlab-cicd-heroku/" >部署 Laravel 於 Heroku 搭配 GitLab CI/CD&lt;/a> ，一起學習吧 GoGo !&lt;/p>
&lt;br>
&lt;h2>參考資料&lt;span class="absolute -mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Get started with GitLab CI/CD：&lt;a href="https://docs.gitlab.com/ee/ci/quick_start/" target="_blank" rel="noopener">https://docs.gitlab.com/ee/ci/quick_start/&lt;/a>&lt;/p>
&lt;p>Best Practice for DevOps on GitLab and GCP : GitLab CI/CD - Day 6：&lt;a href="https://ithelp.ithome.com.tw/articles/10214114" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10214114&lt;/a>&lt;/p>
&lt;p>Gitlab-CI 入門實作教學 - 單元測試篇：&lt;a href="https://nick-chen.medium.com/gitlab-ci-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E7%AF%87-156455e2ad9f" target="_blank" rel="noopener">https://nick-chen.medium.com/gitlab-ci-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E7%AF%87-156455e2ad9f&lt;/a>&lt;/p>
&lt;p>如何使用 GitLab CI：&lt;a href="https://medium.com/@mvpdw06/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-gitlab-ci-ebf0b68ce24b" target="_blank" rel="noopener">https://medium.com/@mvpdw06/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-gitlab-ci-ebf0b68ce24b&lt;/a>&lt;/p></description></item><item><title>Ansible 介紹與實作 (Inventory、Playbooks、Module、Template、Handlers)</title><link>https://pin-yi.me/blog/git-or-cicd/ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/git-or-cicd/ansible/</guid><description>
&lt;p>本篇文章是接續前面兩篇 &lt;a href="../jenkins-ansible/" >Jenkins 及 Ansible IT 自動化 CI/CD 介紹&lt;/a> 跟 &lt;a href="../jenkins/" >使用 Jenkins 設定 GitHub 觸發程序並通知 Telegram Bot&lt;/a> 文章，歡迎大家先去觀看前面兩篇文章 🤪&lt;/p>
&lt;p>本篇所使用到的程式碼都會整理於 &lt;a href="https://github.com/880831ian/Ansible" target="_blank" rel="noopener">GitHub 連結&lt;/a>，大家有興趣可以去瀏覽看看歐！&lt;/p>
&lt;br>
&lt;h2>Ansible 是如何運作的？&lt;span class="absolute -mt-20" id="ansible-是如何運作的">&lt;/span>
&lt;a href="#ansible-%e6%98%af%e5%a6%82%e4%bd%95%e9%81%8b%e4%bd%9c%e7%9a%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>在 Ansible 世界裡，我們會透過 &lt;code>Inventory 檔案&lt;/code> 來定義有哪些的 &lt;code>Managed Node&lt;/code>，並藉由 &lt;code>SSH&lt;/code> 與 &lt;code>Python&lt;/code> 來進行溝通。那我們先來看一張圖：&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/run.png"
alt="Ansible 運作原理 (圖片來源：七分鐘掌握 Ansible 核心觀念)" width="600">&lt;figcaption>
&lt;p>Ansible 運作原理 (圖片來源：&lt;a href="https://school.soft-arch.net/courses/28546/lectures/655359" target="_blank" rel="noopener">七分鐘掌握 Ansible 核心觀念&lt;/a>)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>誒 😱 突然多了很多新名詞，沒關係我來一一解釋，首先我們先從 &lt;code>Managed Node&lt;/code> 是什麼，以及圖片中的 &lt;code>Control machine&lt;/code> 開始說起吧！&lt;/p>
&lt;h3>什麼是控制主機及被控節點？&lt;span class="absolute -mt-20" id="什麼是控制主機及被控節點">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af%e6%8e%a7%e5%88%b6%e4%b8%bb%e6%a9%9f%e5%8f%8a%e8%a2%ab%e6%8e%a7%e7%af%80%e9%bb%9e" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>在 Ansible 裡，我們會把所有機器的角色做以下的區分：&lt;/p>
&lt;ul>
&lt;li>控制主機 (Control Machine)：顧名思義，這類主機可以透過運行 Ansible 的劇本 (Playbooks) 對被控節點進行部署。&lt;/li>
&lt;li>被控節點 (Managed Node)：也稱為遙控節點 (Remote Node)。相對於控制主機，這類節點就是我們透過 Ansible 進行部署的對象。&lt;/li>
&lt;/ul>
&lt;p>所以代表我們在操作這邊就是 Control Machine，要部署的機器就是 Managed Node，透過 SSH 來做連線。但什麽是 &lt;code>Inventory&lt;/code> 跟 &lt;code>Playbooks&lt;/code> 呢？&lt;/p>
&lt;br>
&lt;h3>什麼是 Ansible Inventory&lt;span class="absolute -mt-20" id="什麼是-ansible-inventory">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-ansible-inventory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;code>Inventory&lt;/code> 這個單字本身有&lt;strong>詳細目錄&lt;/strong>、&lt;strong>清單&lt;/strong>和&lt;strong>列表&lt;/strong>的意思。在這裡我們可以把它理解成一份主機列表，可以透過它來定義每個 Managed Node 的代號、IP 位址、連線設定和群組。&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ vim hosts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ansible_ssh_host：遠端 SSH 主機位址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ansible_ssh_port：遠端 SSH Port&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ansible_ssh_user：遠端 SSH 使用者名稱&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ansible_ssh_private_key_file：本機 SSH 私鑰檔案路徑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ansible_ssh_pass：遠端 SSH 密碼 (建議使用私鑰)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>local&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server1 ansible_ssh_host&lt;span style="color:#f92672">=&lt;/span>127.0.0.1 ansible_ssh_port&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">55000&lt;/span> ansible_ssh_pass&lt;span style="color:#f92672">=&lt;/span>docker&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>所以我們可以在這邊輸入很多個主機來做管理，可以把它想成一個設定檔。&lt;/p>
&lt;br>
&lt;h3>什麼是 Ansible Playbooks&lt;span class="absolute -mt-20" id="什麼是-ansible-playbooks">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-ansible-playbooks" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>再談 Ansible Playbooks 之前，先說明我們要怎麼去操作 Ansible？一般來說，我們可以使用 Ad-Hoc Commands 和 Playbooks 兩種方式來操作 Ansible。&lt;/p>
&lt;br>
&lt;h4>Ad-Hoc Commands 是什麼？&lt;span class="absolute -mt-20" id="ad-hoc-commands-是什麼">&lt;/span>
&lt;a href="#ad-hoc-commands-%e6%98%af%e4%bb%80%e9%ba%bc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>Ad hoc 可以翻譯成&lt;strong>簡短地指令&lt;/strong>，也就是我們常用的指令模式，最常見的 &lt;code>ping&lt;/code>和&lt;code>echo&lt;/code> 為例。&lt;/p>
&lt;ul>
&lt;li>&lt;code>ping&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ ansible all -m ping
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server1 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_facts&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;discovered_interpreter_python&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/bin/python&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;changed&amp;#34;&lt;/span>: false,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ping&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pong&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ul>
&lt;li>&lt;code>echo&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ ansible all -m command -a &lt;span style="color:#e6db74">&amp;#34;echo Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server1 | CHANGED | rc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>從上面的例子中可以看到 Ad-Hoc Commands 一次只能處理一件事情，這是它與 Playbooks 最大的差異。&lt;/p>
&lt;br>
&lt;h3>Playbooks 是什麼？&lt;span class="absolute -mt-20" id="playbooks-是什麼">&lt;/span>
&lt;a href="#playbooks-%e6%98%af%e4%bb%80%e9%ba%bc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Playbooks 就是字面上的意思為&lt;strong>劇本&lt;/strong>，我們可以先透過寫好的&lt;strong>劇本 (Playbooks)&lt;/strong> 來讓各個 Managed Node 進行指定的&lt;strong>動作 (Plays)&lt;/strong> 和&lt;strong>任務 (Tasks)&lt;/strong>。&lt;/p>
&lt;p>簡而言之，Playbooks 就是 Ansible 的腳本 (Script)，而且比傳統 Shell Script 還要強大好幾百倍的腳本！此外它是使用 &lt;strong>YAML&lt;/strong> 格式，寫 Code 就如同寫文件一樣，簡單易讀。&lt;/p>
&lt;p>有關詳細的&lt;strong>動作 (Plays)&lt;/strong> 和&lt;strong>任務 (Tasks)&lt;/strong>，等我們實際安裝好再來說明 😆&lt;/p>
&lt;br>
&lt;h2>Ansible 安裝與實作&lt;span class="absolute -mt-20" id="ansible-安裝與實作">&lt;/span>
&lt;a href="#ansible-%e5%ae%89%e8%a3%9d%e8%88%87%e5%af%a6%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>安裝之前先讓大家看一下版本吧！大家要記得檢查自己的版本與教學是否相同，如果不同，記得要先查看官網是否有修改內容。&lt;/p>
&lt;h3>版本&lt;span class="absolute -mt-20" id="版本">&lt;/span>
&lt;a href="#%e7%89%88%e6%9c%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>macOS：11.6&lt;/li>
&lt;li>Docker：Docker version 20.10.14, build a224086&lt;/li>
&lt;li>Aansible：ansible [core 2.12.5]&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>如何安裝 Ansible 在控制主機&lt;span class="absolute -mt-20" id="如何安裝-ansible-在控制主機">&lt;/span>
&lt;a href="#%e5%a6%82%e4%bd%95%e5%ae%89%e8%a3%9d-ansible-%e5%9c%a8%e6%8e%a7%e5%88%b6%e4%b8%bb%e6%a9%9f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>由於 Ansible 是一套開源的軟體，所以在目前大部分主流作業系統上都可以透過對應的套件管理 (package manager) 進行安裝。&lt;/p>
&lt;p>本人使用 macOS ，所以這邊僅列出 masOS 安裝方式，其他的可以參考&lt;a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-specific-operating-systems" target="_blank" rel="noopener">官方的安裝指南&lt;/a>。&lt;/p>
&lt;br>
&lt;p>macOS 安裝可以使用兩種方式，官方較推薦使用 &lt;code>pip&lt;/code> 來做安裝：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pip.pypa.io/en/stable/#" target="_blank" rel="noopener">Pip Install Packages (pip 官方較推薦)&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ sudo pip install ansible&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://formulae.brew.sh/formula/ansible#default" target="_blank" rel="noopener">Homebrew (brew)&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ sudo brew install ansible&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>安裝完後，可以使用 &lt;code>--version&lt;/code> 指令來檢查是否安裝完成：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ ansible --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ansible &lt;span style="color:#f92672">[&lt;/span>core 2.12.5&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config file &lt;span style="color:#f92672">=&lt;/span> None
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configured module search path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/Users/ian_zhuang/.ansible/plugins/modules&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ansible python module location &lt;span style="color:#f92672">=&lt;/span> /usr/local/Cellar/ansible/5.7.1/libexec/lib/python3.10/site-packages/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ansible collection location &lt;span style="color:#f92672">=&lt;/span> /Users/ian_zhuang/.ansible/collections:/usr/share/ansible/collections
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> executable location &lt;span style="color:#f92672">=&lt;/span> /usr/local/bin/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> python version &lt;span style="color:#f92672">=&lt;/span> 3.10.4 &lt;span style="color:#f92672">(&lt;/span>main, Apr &lt;span style="color:#ae81ff">26&lt;/span> 2022, 19:43:24&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>Clang 13.0.0 &lt;span style="color:#f92672">(&lt;/span>clang-1300.0.29.30&lt;span style="color:#f92672">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jinja version &lt;span style="color:#f92672">=&lt;/span> 3.1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libyaml &lt;span style="color:#f92672">=&lt;/span> True&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>如何安裝 Ansible 在被控節點&lt;span class="absolute -mt-20" id="如何安裝-ansible-在被控節點">&lt;/span>
&lt;a href="#%e5%a6%82%e4%bd%95%e5%ae%89%e8%a3%9d-ansible-%e5%9c%a8%e8%a2%ab%e6%8e%a7%e7%af%80%e9%bb%9e" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>不需要！！！ 透過 Ansible 進行管理的被控節點完全不需要安裝 Ansible。我們只需要確保這個節點可以透過 SSH 與控制主機做溝通，並安裝 Python 2.6 以上版本就可以透過控制主機來進行部署及管理了。&lt;/p>
&lt;br>
&lt;p>那我們為了要模擬，所以我們使用 Docker 來模擬 Managed Node，首先老樣子，一樣先寫一個 Dockerfile 來建立我們的映像檔，此映像檔是微調 &lt;a href="https://github.com/chusiang/ansible-managed-node.dockerfile/blob/master/ubuntu-14.04/Dockerfile" target="_blank" rel="noopener">chusiang/ansible-managed-node.dockerfile&lt;/a> 的內容，修改 ubuntu 版本以及內容作調整，我會把程式碼放在 &lt;a href="https://github.com/880831ian/Ansible" target="_blank" rel="noopener">GitHub 連結&lt;/a> ，以及 &lt;a href="https://hub.docker.com/r/880831ian/ansible-ubuntu-server" target="_blank" rel="noopener">DockerHub 連結&lt;/a>，歡迎大家前去下載使用。&lt;/p>
&lt;br>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> ubuntu:22.10&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">LABEL&lt;/span> maintainer&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;880831ian@gmail.com&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Update the index of available packages.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> apt-get update&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Install the requires package.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> apt-get install -y openssh-server sudo curl wget bash-completion openssl &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get clean&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Setting the sshd.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> mkdir /var/run/sshd&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> echo &lt;span style="color:#e6db74">&amp;#39;root:root&amp;#39;&lt;/span> | chpasswd&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> sed -i &lt;span style="color:#e6db74">&amp;#39;s/PermitRootLogin without-password/PermitRootLogin yes/&amp;#39;&lt;/span> /etc/ssh/sshd_config&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># SSH login fix. Otherwise user is kicked off after login&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> sed &lt;span style="color:#e6db74">&amp;#39;s@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g&amp;#39;&lt;/span> -i /etc/pam.d/sshd&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENV&lt;/span> NOTVISIBLE &lt;span style="color:#e6db74">&amp;#34;in users profile&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;export VISIBLE=now&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/profile&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Create a new user.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># - username: docker&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># - password: docker&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> useradd --create-home --shell /bin/bash &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --password &lt;span style="color:#66d9ef">$(&lt;/span>openssl passwd -1 docker&lt;span style="color:#66d9ef">)&lt;/span> docker&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Add sudo permission.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> echo &lt;span style="color:#e6db74">&amp;#39;docker ALL=(ALL) NOPASSWD: ALL&amp;#39;&lt;/span> &amp;gt;&amp;gt; /etc/sudoers&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Setting ssh public key.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> wget https://raw.githubusercontent.com/chusiang/ansible-jupyter.dockerfile/master/files/ssh/id_rsa.pub &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -O /tmp/authorized_keys &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> mkdir /home/docker/.ssh &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> mv /tmp/authorized_keys /home/docker/.ssh/ &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> chown -R docker:docker /home/docker/.ssh/ &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> chmod &lt;span style="color:#ae81ff">644&lt;/span> /home/docker/.ssh/authorized_keys &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> chmod &lt;span style="color:#ae81ff">700&lt;/span> /home/docker/.ssh&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">EXPOSE&lt;/span>&lt;span style="color:#e6db74"> 22&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Run ssh server daemon.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;/usr/sbin/sshd&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-D&amp;#34;&lt;/span>]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>接下來將它包成 Image 並啟動他：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker build -t ansible-ubuntu-server . &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> docker run --name server1 -d -p 8888:22 ansible-ubuntu-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>64c51235e34a7ba42c0c45e690201dd80248c9aac76c3b855c99cf63f7f0af7c&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>可以用 &lt;code>exec&lt;/code> 進入容器：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker exec -it server1 /bin/bash&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>如何讓 Ansible 操控 Docker 容器？&lt;span class="absolute -mt-20" id="如何讓-ansible-操控-docker-容器">&lt;/span>
&lt;a href="#%e5%a6%82%e4%bd%95%e8%ae%93-ansible-%e6%93%8d%e6%8e%a7-docker-%e5%ae%b9%e5%99%a8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們在工作目錄下，新增一個 &lt;code>ansible.cfg&lt;/code>：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cfg" data-lang="cfg">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[defaults]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">inventory&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">remote_user&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">host_key_checking&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">False&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>設定 inventory hosts：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>local&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server1 ansible_ssh_host&lt;span style="color:#f92672">=&lt;/span>127.0.0.1 ansible_ssh_port&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">8888&lt;/span> ansible_ssh_pass&lt;span style="color:#f92672">=&lt;/span>docker&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>其中 8888 是我們在啟動時所開放的 Port，也可以自行更改。&lt;/p>
&lt;ul>
&lt;li>&lt;code>ansible_ssh_host&lt;/code>：設為本機的 IP。&lt;/li>
&lt;li>&lt;code>ansible_ssh_port&lt;/code>：設為 &lt;code>docker ps &lt;/code>取得的 SSH Port 也就是我們的 8888。&lt;/li>
&lt;li>&lt;code>ansible_ssh_pass&lt;/code>：因為我們沒有連線用的金鑰，所以直接使用密碼方式做連結。(建議只用於練習環境使用)&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>Hello World On Managed Node&lt;span class="absolute -mt-20" id="hello-world-on-managed-node">&lt;/span>
&lt;a href="#hello-world-on-managed-node" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>當我們都設置完成後，就可以使用 Terminal 用 Docker 建立好的 Ansible 來練習了！&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ ansible all -m command -a &lt;span style="color:#e6db74">&amp;#39;echo Hello World on Docker.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server1 | CHANGED | rc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World on Docker.&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;div class="overflow-x-auto mt-6 flex rounded-lg border py-2 ltr:pr-4 rtl:pl-4 contrast-more:border-current contrast-more:dark:border-current border-orange-100 bg-orange-50 text-orange-800 dark:border-orange-400/30 dark:bg-orange-400/20 dark:text-orange-300">
&lt;div class="ltr:pl-3 ltr:pr-2 rtl:pr-3 rtl:pl-2">&lt;/div>
&lt;div class="w-full min-w-0 leading-7">
&lt;div class="mt-6 leading-7 first:mt-0">
&lt;p>ansible 安裝時常見問題&lt;/p>
&lt;p>Q1. server1 | FAILED | rc=-1 &amp;raquo; to use the &amp;lsquo;ssh&amp;rsquo; connection type with passwords or pkcs11_provider, you must install the sshpass program&lt;/p>
&lt;p>Ans1. 會遇到這個問題是因為需要多安裝 sshpass，一般系統安裝 sshpass 很簡單，但在 macOS 上稍微麻煩，詳細可以參考&lt;a href="https://stackoverflow.com/questions/32255660/how-to-install-sshpass-on-mac" target="_blank" rel="noopener">這篇文章&lt;/a>。&lt;/p>
&lt;br>
&lt;p>Q2. ~paramiko/transport.py:236: CryptographyDeprecationWarning: Blowfish has been deprecated&lt;/p>
&lt;p>Ans2. 在我安裝過程中，發現上前幾天才出現這個 Bug 詳細情形可以參考 &lt;a href="https://github.com/paramiko/paramiko/issues/2038" target="_blank" rel="noopener">GitHub issues&lt;/a>，目前解決辦法有降板或是先將錯誤訊息給註解掉，之後再等新的版本出來再更新，大家可以自行選擇，我這邊是直接把出現問題的 &lt;code>transport.py&lt;/code> 內容註解掉，大概位於 236 行，可以看下方圖片。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/blowfish.png"
alt="CryptographyDeprecationWarning 錯誤訊息修正" width="450">&lt;figcaption>
&lt;p>CryptographyDeprecationWarning 錯誤訊息修正&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2>第一個 Playbook&lt;span class="absolute -mt-20" id="第一個-playbook">&lt;/span>
&lt;a href="#%e7%ac%ac%e4%b8%80%e5%80%8b-playbook" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>在我們都安裝好後，要來說說我們剛剛有偷偷提到的 Playbooks 的動作 (Plays) 和任務 (Tasks)。在一份 Playbooks 裡面，可以有多個 Play、多個 Task 和多個 Module：&lt;/p>
&lt;ul>
&lt;li>Play：通常為某個特定的目的，例如：
&lt;ul>
&lt;li>&lt;code>Setup a official website with Drupal&lt;/code> 藉由 Drupal 建置官網&lt;/li>
&lt;li>&lt;code>Restart the API Service&lt;/code> 重開 API 服務&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Task：要實行 Play 這個目的所需做的每個步驟，例如：
&lt;ul>
&lt;li>&lt;code>Install the Nginx&lt;/code> 安裝 Nginx&lt;/li>
&lt;li>&lt;code>Kill the djnago process&lt;/code> 強制停止 django 的行程&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Module：Ansible 所提供的各種操作方式，例如：
&lt;ul>
&lt;li>&lt;code>apt: name=vim state=present&lt;/code> 使用 apt 套件安裝 vim&lt;/li>
&lt;li>&lt;code>command: /sbin/shutdown -r now&lt;/code> 使用 shutdown 的指令關機&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>有點聽不懂吧！我來舉個例子，我們最熟悉的 Hello World，先建立一個 &lt;code>helloworld.yaml&lt;/code> 的檔案：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div class="filename">helloworld.yaml&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">say &amp;#39;hello world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">all&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#39;hello world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#39;hello world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">print stdout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ result.stdout }}&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-8">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以看到這整個就是 Play，我們想要達到 say &amp;lsquo;hello world&amp;rsquo; 的目的，其中有兩個 name 分別代表兩個 Task，也就是達成 Play 目的所需得步驟。最後 command 與 debug 就是我們的 Module 要怎麼達成這兩個步驟的操作方式。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/playbooks.gif"
alt="Playbooks 組成結構" width="800">&lt;figcaption>
&lt;p>Playbooks 組成結構&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們使用 &lt;code>ansible-playbook&lt;/code> 執行 Playbook，在這個範例中，我們執行了１個 Play、3 個 Tasks 和 2 個 Modules：&lt;/p>
&lt;br>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ ansible-playbook helloworld.yaml&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/helloworld.png"
alt="執行 Playbooks" width="1000">&lt;figcaption>
&lt;p>執行 Playbooks&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;div class="overflow-x-auto mt-6 flex rounded-lg border py-2 ltr:pr-4 rtl:pl-4 contrast-more:border-current contrast-more:dark:border-current border-orange-100 bg-orange-50 text-orange-800 dark:border-orange-400/30 dark:bg-orange-400/20 dark:text-orange-300">
&lt;div class="ltr:pl-3 ltr:pr-2 rtl:pr-3 rtl:pl-2">&lt;/div>
&lt;div class="w-full min-w-0 leading-7">
&lt;div class="mt-6 leading-7 first:mt-0">
&lt;p>我們剛剛明明只寫兩個 tasks，為什麼執行就變成三個 tasks？&lt;/p>
&lt;p>這是因為 Ansible 預設會使用 &lt;code>Setup&lt;/code> task 來取得 Managed node 的 facts。關於 facts 的詳細說明，請滑到後面 &lt;a href="#%e5%8f%96%e5%be%97-managed-node-%e7%9a%84-facts" >取得-managed-node-的-facts&lt;/a> 觀看 😬&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>那如果沒有 Ansible 時，我們是怎麼操作的？我會附上 Shell Script 的做法，我們來比較看看吧！&lt;/p>
&lt;br>
&lt;ul>
&lt;li>&lt;strong>Shell Script&lt;/strong> 建立 &lt;code>helloworld.sh&lt;/code> 檔案&lt;/li>
&lt;/ul>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div class="filename">helloworld.sh&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#! /bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-8">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ul>
&lt;li>執行 &lt;code>helloworld.sh&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>./ helloworld.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>看起來 Shell Script 已經夠用了，為什麼還要寫 Playbook 呢？這邊整理幾個理由給大家參考：&lt;/p>
&lt;ol>
&lt;li>用 Ansible 的 Module 可以把很多複雜的指令給標準化，例如不同的 Linux 發行版本在安裝套件時需代各種不同的參數。&lt;/li>
&lt;li>在現有的雲原生 (cloud native) 的架構下，傳統的 Shell Script 已經不敷使用，一般而言 Shell Script 只能對一台機器 (instance) 進行操作。&lt;/li>
&lt;/ol>
&lt;br>
&lt;h2>常用的 Ansible Module 有哪些？&lt;span class="absolute -mt-20" id="常用的-ansible-module-有哪些">&lt;/span>
&lt;a href="#%e5%b8%b8%e7%94%a8%e7%9a%84-ansible-module-%e6%9c%89%e5%93%aa%e4%ba%9b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>接下來簡單介紹一下比較常用到的 8 個 Module：&lt;/p>
&lt;h3>&lt;code>ansible.builtin.apt&lt;/code>&lt;span class="absolute -mt-20" id="ansiblebuiltinapt">&lt;/span>
&lt;a href="#ansiblebuiltinapt" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_module.html#ansible-collections-ansible-builtin-apt-module" target="_blank" rel="noopener">apt module&lt;/a> 是給 Debian, Ubuntu 等作業系統使用的套件模組 (Packing Modules)，我們可以透過它管理 apt 套件。類似的有 &lt;code>apt-get&lt;/code>、&lt;code>dpkg&lt;/code>等。&lt;/p>
&lt;ol>
&lt;li>更新套件索引(快取)，等同於 &lt;code>apt-get update&lt;/code> 指令&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Update repositories cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.apt&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">update_cache&lt;/span>: &lt;span style="color:#66d9ef">yes&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>安裝 vim 套件&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install the package &amp;#34;vim&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.apt&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">vim&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">present&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="3">
&lt;li>移除 nano 套件&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Remove &amp;#34;nano&amp;#34; package&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.apt&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nano&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">absent&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>&lt;code>ansible.builtin.command&lt;/code>&lt;span class="absolute -mt-20" id="ansiblebuiltincommand">&lt;/span>
&lt;a href="#ansiblebuiltincommand" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html#ansible-collections-ansible-builtin-command-module" target="_blank" rel="noopener">command module&lt;/a> 是可以在遠端上執行指令的指令模組，但它不支援變數 (variables) 和 &lt;code>&amp;lt;&lt;/code>、&lt;code>&amp;gt;&lt;/code>、&lt;code>|&lt;/code>、&lt;code>;&lt;/code>、&lt;code>&amp;amp;&lt;/code>，若有這類需求要改用 &lt;code>shell&lt;/code> module。&lt;/p>
&lt;ol>
&lt;li>重新開機&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Reboot at now&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.command&lt;/span>: &lt;span style="color:#ae81ff">/sbin/shutdown -r now&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>當某個檔案不存在時才執行指令&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">create .ssh directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.command&lt;/span>: &lt;span style="color:#ae81ff">mkdir .ssh creates=.ssh/&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="3">
&lt;li>先切換目錄再執行指令&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">cat /etc/passwd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.command&lt;/span>: &lt;span style="color:#ae81ff">cat passwd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chdir&lt;/span>: &lt;span style="color:#ae81ff">/etc&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>&lt;code>ansible.builtin.copy&lt;/code>&lt;span class="absolute -mt-20" id="ansiblebuiltincopy">&lt;/span>
&lt;a href="#ansiblebuiltincopy" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.html#ansible-collections-ansible-builtin-copy-module" target="_blank" rel="noopener">copy moudule&lt;/a> 是從本地複製檔案到遠端的檔案模組，若有使用變數需求，可以改用 &lt;code>template&lt;/code>。它類似 Linux 指令的 &lt;code>scp&lt;/code>。&lt;/p>
&lt;ol>
&lt;li>複製 ssh public key 到遠端 (chmod 644 /target/file)&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">copy ssh public key to remote node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.copy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">files/id_rsa.pub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/home/docker/.ssh/authorized_keys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">owner&lt;/span>: &lt;span style="color:#ae81ff">docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group&lt;/span>: &lt;span style="color:#ae81ff">docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#ae81ff">0644&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>複製 ssh public key 到遠端 (chmod u=rw,g=r,o=r /target/file)&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">copy ssh public key to remote node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.copy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">files/id_rsa.pub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/home/docker/.ssh/authorized_keys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">owner&lt;/span>: &lt;span style="color:#ae81ff">docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group&lt;/span>: &lt;span style="color:#ae81ff">docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;u=rw,g=r,o=r&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="3">
&lt;li>複製 nginx vhost 設定檔到遠端，並備份原有的檔案&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">copy nginx vhost and backup the original&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.copy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">files/ironman.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/etc/nginx/sites-available/default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">owner&lt;/span>: &lt;span style="color:#ae81ff">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group&lt;/span>: &lt;span style="color:#ae81ff">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#ae81ff">0644&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">backup&lt;/span>: &lt;span style="color:#66d9ef">yes&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>&lt;code>ansible.builtin.file&lt;/code>&lt;span class="absolute -mt-20" id="ansiblebuiltinfile">&lt;/span>
&lt;a href="#ansiblebuiltinfile" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html#ansible-collections-ansible-builtin-file-module" target="_blank" rel="noopener">file module&lt;/a> 是在遠端建立和刪除檔案 (file)、目錄 (directory) 和軟連結 (symlinks) 的檔案模組。它類似的 Linux 指令為 &lt;code>chown&lt;/code>、&lt;code>mkdir&lt;/code> 和 &lt;code>touch&lt;/code>。&lt;/p>
&lt;ol>
&lt;li>建立檔案 (touch)，並設定權限為 644&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">touch a file, and set the permissions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.file&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/etc/motd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">touch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;u=rw,g=r,o=r&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>建立目錄 (mkdir)，並設定檔案擁有者為 docker&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">create a directory, and set the permissions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.file&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/home/docker/.ssh/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">owner&lt;/span>: &lt;span style="color:#ae81ff">docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;700&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="3">
&lt;li>建立軟連結 (ln)&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">create a symlink file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.file&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">/tmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/home/docker/tmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">link&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>&lt;code>ansible.builtin.lineinfile&lt;/code>&lt;span class="absolute -mt-20" id="ansiblebuiltinlineinfile">&lt;/span>
&lt;a href="#ansiblebuiltinlineinfile" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html" target="_blank" rel="noopener">lineinfile&lt;/a> module 是個可用正規表示法對檔案進行插入或取代文字的檔案模組。它類似的 Linux 指令是 &lt;code>sed&lt;/code>。&lt;/p>
&lt;ol>
&lt;li>移除 docker 使用者的 sudo 權限&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">remove sudo permission of docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.lineinfile&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/etc/sudoers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">absent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regexp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^docker&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>在 /etc/hosts 檔案裡用 127.0.0.1 localhost 取代開頭為 127.0.0.1 的一行&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">set localhost as 127.0.0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.lineinfile&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/etc/hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regexp&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;^127\.0\.0\.1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">line&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;127.0.0.1 localhost&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">owner&lt;/span>: &lt;span style="color:#ae81ff">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group&lt;/span>: &lt;span style="color:#ae81ff">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#ae81ff">0644&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>&lt;code>ansible.builtin.service&lt;/code>&lt;span class="absolute -mt-20" id="ansiblebuiltinservice">&lt;/span>
&lt;a href="#ansiblebuiltinservice" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/service_module.html#ansible-collections-ansible-builtin-service-module" target="_blank" rel="noopener">service module&lt;/a> 是用來管理遠端系統服務的系統模組。它類似的 Linux 指令為 &lt;code>service&lt;/code>。&lt;/p>
&lt;ol>
&lt;li>啟動 Nginx&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">start nginx service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.service&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">started&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>停止 Nginx&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">stop nginx service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.service&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">stopped&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="3">
&lt;li>重開網路服務&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">restart network service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.service&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">restarted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>: &lt;span style="color:#ae81ff">eth0&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>&lt;code>ansible.builtin.shell&lt;/code>&lt;span class="absolute -mt-20" id="ansiblebuiltinshell">&lt;/span>
&lt;a href="#ansiblebuiltinshell" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html#ansible-collections-ansible-builtin-shell-module" target="_blank" rel="noopener">shell module&lt;/a> 是可以在遠端用 &lt;code>/bin/sh&lt;/code> 執行指令的指令模組，支援變數 (variables) 和 &lt;code>&amp;lt;&lt;/code>、&lt;code>&amp;gt;&lt;/code>、&lt;code>|&lt;/code>、&lt;code>;&lt;/code> 和 &lt;code>&amp;amp;&lt;/code> 等運算。&lt;/p>
&lt;ol>
&lt;li>藉由 &lt;code>ls&lt;/code> 和 &lt;code>wc&lt;/code> 檢查檔案數量&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">check files number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.shell&lt;/span>: &lt;span style="color:#ae81ff">ls /home/docker/ | wc -l&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>把所有的 Python 行程給砍掉&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kill all python process&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.shell&lt;/span>: &lt;span style="color:#ae81ff">kill -9 $(ps aux | grep python | awk &amp;#39;{ print $2 }&amp;#39;)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>&lt;code>ansible.builtin.stat&lt;/code>&lt;span class="absolute -mt-20" id="ansiblebuiltinstat">&lt;/span>
&lt;a href="#ansiblebuiltinstat" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/stat_module.html#ansible-collections-ansible-builtin-stat-module" target="_blank" rel="noopener">stat module&lt;/a> 是用來檢查檔案狀態的檔案模組。其類似的 Linux 指令為 &lt;code>stat&lt;/code>。&lt;/p>
&lt;ol>
&lt;li>檢查檔案是否存在，若不存在則建立他。&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">check the &amp;#39;vimrc&amp;#39; target exists&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.stat&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/home/docker/.vimrc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">stat_vimrc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">touch vimrc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">file&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/home/docker/.vimrc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.state&lt;/span>: &lt;span style="color:#ae81ff">touch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;u=rw,g=r,o=r&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">stat_vimrc.stat.exists == false&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>取的某檔案的 md5sum&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Use md5sum to calculate checksum&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.stat&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/path/to/something&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">checksum_algorithm&lt;/span>: &lt;span style="color:#ae81ff">md5sum&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>其他&lt;span class="absolute -mt-20" id="其他">&lt;/span>
&lt;a href="#%e5%85%b6%e4%bb%96" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>其他還有很多可以使用的 Module ，詳情可以查看 &lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/index.html" target="_blank" rel="noopener">Ansible.Builtin&lt;/a>。&lt;/p>
&lt;br>
&lt;h2>Ansible 發送通知到 Telegram Bot&lt;span class="absolute -mt-20" id="ansible-發送通知到-telegram-bot">&lt;/span>
&lt;a href="#ansible-%e7%99%bc%e9%80%81%e9%80%9a%e7%9f%a5%e5%88%b0-telegram-bot" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>剛剛看了很多內建的模組，當然 Ansible 還有很多好玩的模組可以使用，我們就跟 &lt;a href="../jenkins/" >使用 Jenkins 設定 GitHub 觸發程序並通知 Telegram Bot 文章&lt;/a> 一樣，將我們取得的內容傳送到 Telegram Bot 吧！那首先我們要先創造一個 Telegram Bot，在 Telegram 找到一個機器人叫 &lt;code>BotFather&lt;/code> 的官方機器人帳號。並使用指令 &lt;code>/newbot&lt;/code>，會看到一下畫面：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/telegram_1.png"
alt="Telegram 創建機器人" width="600">&lt;figcaption>
&lt;p>Telegram 創建機器人&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>他詢問你要幫機器人取叫什麼名稱，可以直接在輸入欄位輸入想要取的名稱，當然不能是別人已經取過的：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/telegram_2.png"
alt="Telegram 創建機器人" width="600">&lt;figcaption>
&lt;p>Telegram 創建機器人&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>看到它回覆你 &lt;code>Done!&lt;/code> 代表成功了，接下來你會拿到一組 API Token，像我的是 &lt;code>5335968936:AAEDO_Tudhy0t577jtbF9TpgrzqOsL99h9c&lt;/code> (已更換，大家放心 😂 )，接下來開啟瀏覽器輸入以下網址 &lt;code>https://api.telegram.org/bot{API Token}/getupdates&lt;/code>，其中的 &lt;code>{API Token}&lt;/code> 請帶入自己的 Token，直到出現 &lt;code>{&amp;quot;ok&amp;quot;:true,&amp;quot;result&amp;quot;:[]}&lt;/code> 代表完成。&lt;/p>
&lt;br>
&lt;p>接下來開啟你自己的 Bot ，打上 &lt;code>/start&lt;/code> 指令，重新整理剛剛的網頁就可以看到以下這樣的文字：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ok&amp;#34;&lt;/span>:true,&lt;span style="color:#e6db74">&amp;#34;result&amp;#34;&lt;/span>:&lt;span style="color:#f92672">[{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;update_id&amp;#34;&lt;/span>:606594112,&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>:&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;message_id&amp;#34;&lt;/span>:1,&lt;span style="color:#e6db74">&amp;#34;from&amp;#34;&lt;/span>:&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>:493995679,&lt;span style="color:#e6db74">&amp;#34;is_bot&amp;#34;&lt;/span>:false,&lt;span style="color:#e6db74">&amp;#34;first_name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;\u54c1\u6bc5&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;last_name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Ian&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;pinyichuchu&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;language_code&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;zh-hans&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;chat&amp;#34;&lt;/span>:&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>:493995679,&lt;span style="color:#e6db74">&amp;#34;first_name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;\u54c1\u6bc5&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;last_name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Ian&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;pinyichuchu&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;private&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;date&amp;#34;&lt;/span>:1652695148,&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;/start&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;entities&amp;#34;&lt;/span>:&lt;span style="color:#f92672">[{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;offset&amp;#34;&lt;/span>:0,&lt;span style="color:#e6db74">&amp;#34;length&amp;#34;&lt;/span>:6,&lt;span style="color:#e6db74">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;bot_command&amp;#34;&lt;/span>&lt;span style="color:#f92672">}]}}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這是你傳訊息給 Bot 它所收到的 API，資料很多沒關係，我們找到 &lt;code>id&lt;/code>，像我的是 &lt;code>493995679&lt;/code>，這個就是我跟機器人的聊天室，我們就先回到 Ansible 這邊吧！&lt;/p>
&lt;br>
&lt;p>開啟一個新的檔案叫 &lt;code>send_notify_tg.yaml&lt;/code>，打以下內容：&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Send notify&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">all&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Send notify to Telegram&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">community.general.telegram&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">token&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;9999999:XXXXXXXXXXXXXXXXXXXXXXX&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">api_args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chat_id&lt;/span>: &lt;span style="color:#ae81ff">000000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">parse_mode&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;markdown&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">text&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Your precious application has been deployed: https://example.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">disable_web_page_preview&lt;/span>: &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">disable_notification&lt;/span>: &lt;span style="color:#66d9ef">True&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以看到我們使用的模組不是 Ansible 內建的，而是社群別人寫的，詳細可以參考 &lt;a href="https://docs.ansible.com/ansible/latest/collections/community/general/telegram_module.html#ansible-collections-community-general-telegram-module" target="_blank" rel="noopener">community.general.telegram module – module for sending notifications via telegram&lt;/a>：&lt;/p>
&lt;br>
&lt;p>其中 token 就是我們剛剛在 &lt;code>BotFather&lt;/code> 那邊所拿到的 Token，chat_id 就是我們剛剛在網頁上看到的 id，把資料都輸入進去後，我們可以修改 text 內容，改成 &amp;ldquo;Send notify to Telegram 測試傳送通知&amp;rdquo;，接著執行 &lt;code>ansible-ploybook send_notify_tg.yaml&lt;/code> ，看看能不能正常收到通知！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/telegram_3.png"
alt="發送通知至 Telegram Bot" width="600">&lt;figcaption>
&lt;p>發送通知至 Telegram Bot&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>這樣子就成功透過 Ansible Module 傳送通知給 Telegram 囉！&lt;/p>
&lt;br>
&lt;p>我們可能需要將機器人加入群組內，這時候需要更換一下 chat_id，先將機器人加入群組，再次到剛剛瀏覽器的網頁刷新，查看 chat 後面的 id 帶有 &lt;code>-&lt;/code>，像是 &lt;code>-540226836&lt;/code> 這樣，這個就是該群組的 ID，將 send_notify_tg.yaml 的 chat_id 修改成 &lt;code>-540226836&lt;/code> 在測試看看，他就會在群組中發送通知囉！&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;pre>&lt;code>{&amp;#34;update_id&amp;#34;:606594124,&amp;#34;message&amp;#34;:{&amp;#34;message_id&amp;#34;:14,&amp;#34;from&amp;#34;:{&amp;#34;id&amp;#34;:493995679,&amp;#34;is_bot&amp;#34;:false,&amp;#34;first_name&amp;#34;:&amp;#34;\u54c1\u6bc5&amp;#34;,&amp;#34;last_name&amp;#34;:&amp;#34;Ian&amp;#34;,&amp;#34;username&amp;#34;:&amp;#34;pinyichuchu&amp;#34;,&amp;#34;language_code&amp;#34;:&amp;#34;zh-hans&amp;#34;},&amp;#34;chat&amp;#34;:{&amp;#34;id&amp;#34;:-540226836,&amp;#34;title&amp;#34;:&amp;#34;\u54c1\u6bc5 &amp;amp; AnsibleSendMessageBot&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;group&amp;#34;,&amp;#34;all_members_are_administrators&amp;#34;:true},&amp;#34;date&amp;#34;:1652696181,&amp;#34;group_chat_created&amp;#34;:true}}&lt;/code>&lt;/pre>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/telegram_4.png"
alt="發送通知至 Telegram 群組 Bot" width="600">&lt;figcaption>
&lt;p>發送通知至 Telegram 群組 Bot&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>取得 Managed node 的 facts&lt;span class="absolute -mt-20" id="取得-managed-node-的-facts">&lt;/span>
&lt;a href="#%e5%8f%96%e5%be%97-managed-node-%e7%9a%84-facts" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>還記得我們在執行任務 (Tasks) 時，明明只有兩個，但最後結果顯示三個嗎？是因為在使用 Playbooks 時，Ansible 會自動執行 &lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/setup_module.html#ansible-collections-ansible-builtin-setup-module" target="_blank" rel="noopener">Setup module&lt;/a> 以蒐集各個 Managed node 的 &lt;strong>facts&lt;/strong>。 這個 facts 就好比是系統變數一樣，從 IP 位址、作業系統、CPU 等資訊應有盡有。&lt;/p>
&lt;br>
&lt;h3>Ad-Hoc Commands&lt;span class="absolute -mt-20" id="ad-hoc-commands">&lt;/span>
&lt;a href="#ad-hoc-commands" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>通常我們都會先使用 Ad-Hoc Commands 來呼叫 &lt;code>setup&lt;/code> 看看有哪些可用的資訊，這對於我們稍後撰寫較為複雜的 Playbooks 會很有幫助。&lt;/p>
&lt;ol>
&lt;li>可以藉由 &lt;code>less&lt;/code> 快速搜尋所有的變數&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ ansible all -m setup | less
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server1 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_facts&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_apparmor&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;disabled&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_architecture&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;x86_64&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_bios_date&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;03/14/2014&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_bios_vendor&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;BHYVE&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_bios_version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_board_asset_tag&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;NA&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_board_name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;NA&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_board_serial&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;NA&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_board_vendor&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;NA&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_board_version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;NA&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>搭配 &lt;code>filter&lt;/code> 將發行版本 (distribution) 資訊給過濾出來&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ ansible all -m setup -a &lt;span style="color:#e6db74">&amp;#34;filter=ansible_distribution*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server1 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_facts&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_distribution&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Ubuntu&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_distribution_file_parsed&amp;#34;&lt;/span>: true,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_distribution_file_path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/etc/os-release&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_distribution_file_variety&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Debian&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_distribution_major_version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;22&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_distribution_release&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;kinetic&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_distribution_version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;22.10&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;discovered_interpreter_python&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/bin/python3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;changed&amp;#34;&lt;/span>: false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="3">
&lt;li>取得套件管理員的種類資訊，例子中取得的值是 &lt;strong>apt&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ ansible all -m setup -a &lt;span style="color:#e6db74">&amp;#34;filter=ansible_pkg_mgr&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server1 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_facts&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_pkg_mgr&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;apt&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;discovered_interpreter_python&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/bin/python3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;changed&amp;#34;&lt;/span>: false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>轉寫 Playbooks&lt;span class="absolute -mt-20" id="轉寫-playbooks">&lt;/span>
&lt;a href="#%e8%bd%89%e5%af%ab-playbooks" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我來出個題目，我想要知道 Ansible 所使用的公鑰，並透過 Telegram Bot 發送到群組，要怎麼做呢！？&lt;/p>
&lt;p>首先要利用剛剛的 Ad-Hoc Commands filter，找到公鑰，再將公鑰透過 Telegram Bot 傳送，所以我們會有兩個 Tasks，那我們開始實作囉 🤓&lt;/p>
&lt;p>1.找到公鑰&lt;/p>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Filter rsa_public &amp;amp; Send notify&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">all&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Filter setup rsa_public key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.setup&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;ansible_ssh_host_key_rsa_public&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">result&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以看到我們將 filter setup 從 Ad-Hoc 轉成 Playbooks，並使用 result 來存在找到的公鑰。&lt;/p>
&lt;br>
&lt;ol start="2">
&lt;li>發送通知至 Telegram Bot&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Send notify to Telegram&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">community.general.telegram&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">token&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;5335968936:AAFhxxMRJy-rucGKgSE80Xss7qPq2iOHWlc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">api_args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chat_id&lt;/span>: -&lt;span style="color:#ae81ff">540226836&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">parse_mode&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;markdown&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">text&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ result }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">disable_web_page_preview&lt;/span>: &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">disable_notification&lt;/span>: &lt;span style="color:#66d9ef">True&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>老樣子，我們就使用上次 &lt;code>send_notify_tg.yaml&lt;/code> 內的 Send notify to Telegram 任務來傳送通知。&lt;/p>
&lt;br>
&lt;p>執行後，看看群組是否有收到我們找到的 ansible_ssh_host_key_rsa_public 通知。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/telegram_5.png"
alt="發送通知至 Telegram 群組 Bot" width="800">&lt;figcaption>
&lt;p>發送通知至 Telegram 群組 Bot&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>使用 Ansible 的 Template 系統&lt;span class="absolute -mt-20" id="使用-ansible-的-template-系統">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8-ansible-%e7%9a%84-template-%e7%b3%bb%e7%b5%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_module.html#ansible-collections-ansible-builtin-template-module" target="_blank" rel="noopener">Template module&lt;/a> 是常使用的檔案模組之一，我們在 &lt;a href="#%e5%b8%b8%e7%94%a8%e7%9a%84-ansible-module-%e6%9c%89%e5%93%aa%e4%ba%9b" >常用的 Ansible Module 有哪些？&lt;/a> 文章中有提到，可以用它和變數 (Variables) 來操作檔案。&lt;/p>
&lt;p>我們只需要事先定義變數和模板 (Templates)，即可用它動態產生遠端的 Shell Script、設定檔 (Configure)等。換句話說，我們可以用一份 template 來開發 (Development)、測試 (Test)、正式環境 (Production) 等不同環境設定。&lt;/p>
&lt;p>舉例說明：&lt;/p>
&lt;ol>
&lt;li>建立 template 檔案&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ vim hello_world.txt.j2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello &lt;span style="color:#e6db74">&amp;#34;{{ dynamic_word }}&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>由於 Ansible 是就由 &lt;a href="https://jinja.palletsprojects.com/en/3.1.x/" target="_blank" rel="noopener">Jinja2&lt;/a> 來實作 template 系統，所以需要使用 &lt;code>*.j2&lt;/code> 的副檔名。&lt;/li>
&lt;li>上面的 &lt;code>&amp;quot;{{ dynamic_word }}&amp;quot;&amp;quot;&lt;/code> 代表我們在 template 裡使用了名為 &lt;code>dynameic_word&lt;/code> 的變數。&lt;/li>
&lt;/ul>
&lt;br>
&lt;ol start="2">
&lt;li>建立 playbook，並加入變數 &lt;code>vim template_demo.yaml&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Play the template module&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dynamic_word&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">generation the hello_world.txt file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">hello_world.txt.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/hello_world.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">show file context&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">cat /tmp/hello_world.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">print stdout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ result.stdout_lines }}&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>在第 5 行，我們幫 &lt;code>dynamic_word&lt;/code> 變數設了一個預設值 &lt;code>World&lt;/code>。&lt;/li>
&lt;li>在 8 行的第 1 個 task 裡，我們使用 template module，並指定了檔案的來源 (src) 和目的地 (dest)。&lt;/li>
&lt;li>之後的 2 個 task 則是把 template module 產生的檔案給印出來。&lt;/li>
&lt;/ul>
&lt;br>
&lt;ol start="3">
&lt;li>直接使用 &lt;code>ansible-playbook template_demo.yaml&lt;/code> 執行 Playbook。&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/template.png"
alt="Template Module 範例" width="900">&lt;figcaption>
&lt;p>Template Module 範例&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>也可以透過 &lt;code>-e&lt;/code> 參數將 &lt;code>dynamic_word&lt;/code> 覆寫成 &amp;ldquo;ansible&amp;rdquo;&lt;/p>
&lt;br>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> $ ansible-playbook template_demo.yaml -e &lt;span style="color:#e6db74">&amp;#34;dynamic_word=ansible&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/template_1.png"
alt="Template Module 使用 -e 覆寫參數" width="900">&lt;figcaption>
&lt;p>Template Module 使用 &lt;code>-e&lt;/code> 覆寫參數&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>如何切換不同環境&lt;span class="absolute -mt-20" id="如何切換不同環境">&lt;/span>
&lt;a href="#%e5%a6%82%e4%bd%95%e5%88%87%e6%8f%9b%e4%b8%8d%e5%90%8c%e7%92%b0%e5%a2%83" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>除了我們剛剛用 &lt;code>vars&lt;/code> 來宣告變以外，還可以使用 &lt;code>vars_files&lt;/code> 來 include 其他的變數檔：&lt;code>$ vim template_demo2.yaml&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Play the template module&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;development&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars_files&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">vars/{{ env }}.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">generation the hello_world.txt file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">hello_world.txt.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/hello_world.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">show file context&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">cat /tmp/hello_world.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">print stdout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ result.stdout_lines }}&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以看到上面例子中第 7 行，就是我們使用 &lt;code>vars_files&lt;/code> 來 include 其他的變數檔。&lt;/p>
&lt;br>
&lt;ol start="2">
&lt;li>建立 &lt;code>vars/development.yaml&lt;/code>、&lt;code>vars/test.yaml&lt;/code>、&lt;code>vars/production.yaml&lt;/code> 檔案，接下來將依不同得環境 include 不同的檔案變數檔案 (vars files)，這樣就可以用一份 Playbook 切換環境了！&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Development&lt;/li>
&lt;/ul>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> $ vim vars/development.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dynamic_word: &lt;span style="color:#e6db74">&amp;#34;development&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>Test&lt;/li>
&lt;/ul>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> $ vim vars/test.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dynamic_word: &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>Production&lt;/li>
&lt;/ul>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> $ vim vars/production.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dynamic_word: &lt;span style="color:#e6db74">&amp;#34;production&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="3">
&lt;li>執行 &lt;code>ansible-playbook template_demo2.yaml -e &amp;quot;dynamic_word=Test&amp;quot;&lt;/code>，並有 &lt;code>-e&lt;/code> 去修改各個環境。&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/template_2.png"
alt="Template Module 範例" width="900">&lt;figcaption>
&lt;p>Template Module 範例&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>Template 系統是實務上很常見的手法之一，藉由它我們可以很輕鬆地讓開發、測試、正式環境無縫接軌。但若是在大型的 Playbook 裡切換環境，建議使用較為進階的 &lt;code>group_vars&lt;/code> 跟 &lt;code>host_vars&lt;/code>。&lt;/p>
&lt;br>
&lt;h2>在 Playbooks 使用 Handlers&lt;span class="absolute -mt-20" id="在-playbooks-使用-handlers">&lt;/span>
&lt;a href="#%e5%9c%a8-playbooks-%e4%bd%bf%e7%94%a8-handlers" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_handlers.html" target="_blank" rel="noopener">Handlers&lt;/a> 是我們在 Ansible Playbooks 裡很常用來重開系統服務 (Service) 的手法，我們這邊透過安裝 Nginx 來介紹它。&lt;/p>
&lt;p>那什麼是 Handlers 呢？Handler 本身是一種非同步的 callback function ; 在這裡則是指關聯於特定 tasks 的事件 (event) 觸發機制。當這些特定的 tasks 狀態為 &lt;strong>被改變 (changed)&lt;/strong> 且都已被執行，才會觸發一次的 event。&lt;/p>
&lt;br>
&lt;ol>
&lt;li>我們建立 setup_nginx.yaml&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">setup the nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">all&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">become&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">username&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;PinYi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mail&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;880831ian@gmail.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">blog&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://pin-yi.me&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 執行 &amp;#39;apt-get update&amp;#39; 指令。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">update apt repo cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apt&lt;/span>: &lt;span style="color:#ae81ff">name=nginx update_cache=yes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 執行 &amp;#39;apt-get install nginx&amp;#39; 指令。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">install nginx with apt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apt&lt;/span>: &lt;span style="color:#ae81ff">name=nginx state=present&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 於網頁根目錄 (DocumentRoot) 編輯 index.html。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">modify index.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.template&lt;/span>: &lt;span style="color:#ae81ff">src=templates/index.html.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">dest=/var/www/html/index.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">owner=www-data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">group=www-data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">mode=&amp;#34;644&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">backup=yes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">notify&lt;/span>: &lt;span style="color:#ae81ff">restart nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># handlers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># * 當確認事件有被觸發才會動作。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># * 一個 handler 可被多個 task 通知 (notify)，並於 tasks 跑完才會執行。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">handlers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 執行 &amp;#39;sudo service nginx restart&amp;#39; 指令。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">restart nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">service&lt;/span>: &lt;span style="color:#ae81ff">name=nginx enabled=yes state=restarted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># post_tasks:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 在 tasks 之後執行的 tasks。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">post_tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 檢查網頁內容。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">review http state&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;curl -s http://localhost&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">web_context&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 印出檢查結果。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">print http state&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">debug&lt;/span>: &lt;span style="color:#ae81ff">msg={{ web_context.stdout_lines }}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>來說明一下上面這個 yaml 檔案：&lt;/p>
&lt;ul>
&lt;li>首先我們想要安裝 Nginx，我們給了三個參數，分別是 username、mail、blog，等等會帶入我們的 template。&lt;/li>
&lt;li>我們一開始有 3 個 task，分別代表執行更新、安裝、編輯 index.html 檔案。&lt;/li>
&lt;li>以及 1 個 handlers 他會等 &lt;code>modify index.html&lt;/code> 有改變且執行後才會動作。&lt;/li>
&lt;li>最後是 post_tasks 他是等 tasks 之後執行的 tasks。&lt;/li>
&lt;/ul>
&lt;br>
&lt;ol start="2">
&lt;li>接下建立 Nginx html 的 template：&lt;code>vim templates/index.html.j2&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">_____________________________________&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">/ This is a ansible-playbook demo for \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">\ automate-with-ansible at 2022/05/17./&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">\ ^__^&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">\ (oo)\_______&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">(__)\ )\/\&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">||----w |&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">|| ||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[ {{ &lt;span style="color:#ae81ff">username }}@automate-with-ansible ~ ]$&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[ {{ &lt;span style="color:#ae81ff">username }}@automate-with-ansible ~ ]$&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[ {{ &lt;span style="color:#ae81ff">username }}@automate-with-ansible ~ ]$ cat .profile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- {{ &lt;span style="color:#ae81ff">mail }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- {{ &lt;span style="color:#ae81ff">blog }}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="3">
&lt;li>執行 Playbook&lt;/li>
&lt;/ol>
&lt;p>可以看到因為我們 &lt;code>modify index.html&lt;/code> 沒有被改變，notify 沒有通知 handlers，所以他不會執行 handlers 該段程式。(正常來說，修改 html 不需要重啟，此為範例 🤣 )&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/handlers_1.png"
alt="Handlers 範例" width="900">&lt;figcaption>
&lt;p>Handlers 範例&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol start="4">
&lt;li>那我們修改一下 index.html 來測試一下會不會把 index.html 的狀態&lt;strong>被改變&lt;/strong>，而讓 handlers 執行呢！我們隨意修改 index.html 內容，修改日期改成 05/17：&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/git-or-cicd/ansible/handlers_2.png"
alt="Handlers 範例" width="900">&lt;figcaption>
&lt;p>Handlers 範例&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>可以看到我們的 &lt;code>modify index.html&lt;/code> 被改變了，所以 notify 通知 handlers 執行重新啟動。&lt;/p>
&lt;br>
&lt;h2>在 Playbooks 使用 loops&lt;span class="absolute -mt-20" id="在-playbooks-使用-loops">&lt;/span>
&lt;a href="#%e5%9c%a8-playbooks-%e4%bd%bf%e7%94%a8-loops" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>在 Shell Script 中，我們會使用 for 和 while 等迴圈 (loop) 來簡化重複的程式碼，而在 Ansible 我們也可以使用 loop 來簡化&lt;strong>重複的任務 (Tasks)&lt;/strong>。&lt;/p>
&lt;h3>標準迴圈&lt;span class="absolute -mt-20" id="標準迴圈">&lt;/span>
&lt;a href="#%e6%a8%99%e6%ba%96%e8%bf%b4%e5%9c%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>首先我們先以簡單的方式重複印出三筆資料。&lt;/p>
&lt;ul>
&lt;li>Shell Script&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>建立 for loop 的 Script&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ vim bash_loop.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> x in &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> 2; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo Loop $x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>在第 4 行，我們用 &lt;code>for&lt;/code>，並  代入 0,1,2 三個值到 &lt;code>$x&lt;/code> 變數&lt;/li>
&lt;li>在第 5 行，則用了 &lt;code>echo&lt;/code>，印出訊息和 &lt;code>$x&lt;/code> 變數&lt;/li>
&lt;/ul>
&lt;br>
&lt;ol start="2">
&lt;li>執行 Script：可以看到底下跑了 3 次的 loop&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ chmod a+x bash_loop.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./bash_loop.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Loop &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Loop &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Loop &lt;span style="color:#ae81ff">2&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ul>
&lt;li>Ansible Playbooks&lt;/li>
&lt;/ul>
&lt;p>我們需要透過 &lt;code>item&lt;/code> 和 &lt;code>with_items&lt;/code> 來使用 Ansible 的 loop，其 &lt;code>item&lt;/code> 為預設名。在 Ansible 2.5 中添加了 &lt;code>loop&lt;/code>，所以我們後續兩者都會提到 (目前兩者都可以使用！)&lt;/p>
&lt;ol>
&lt;li>建立 loop 的 playbook &lt;code>vim playbook_with_items.yaml&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">a basic loop with playbook&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">print loop message&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Loop {{ item }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with_items&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">2&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>在第 6、7 行裡，我們用 &lt;code>debug&lt;/code> module 來印出訊息，並定義 &lt;code>item&lt;/code>&lt;/li>
&lt;li>在第 8 ~ 11 行，則用了 &lt;code>with_item&lt;/code> 將 0,1,2 的值傳入 &lt;code>item&lt;/code>&lt;/li>
&lt;/ul>
&lt;br>
&lt;ol start="2">
&lt;li>執行 &lt;code>ansible-playbook playbook_with_items.yaml&lt;/code> 後會得到：&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">TASK [print loop message] *************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ok&lt;/span>: [&lt;span style="color:#ae81ff">server1] =&amp;gt; (item=0) =&amp;gt; {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msg&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;Loop 0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ok&lt;/span>: [&lt;span style="color:#ae81ff">server1] =&amp;gt; (item=1) =&amp;gt; {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msg&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;Loop 1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ok&lt;/span>: [&lt;span style="color:#ae81ff">server1] =&amp;gt; (item=2) =&amp;gt; {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msg&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;Loop 2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>另一種 在 Ansible 新增的 &lt;code>loop&lt;/code>&lt;/p>
&lt;ol>
&lt;li>建立 loop 的 playbook &lt;code>vim playbook_loop.yaml &lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">a basic loop with playbook&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">all&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">print loop message&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ item }} {{ my_idx }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">loop&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Loop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Loop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Loop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">loop_control&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index_var&lt;/span>: &lt;span style="color:#ae81ff">my_idx&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>執行 &lt;code>ansible-playbook playbook_loop.yaml&lt;/code> 後會得到：&lt;/li>
&lt;/ol>
&lt;div class="code-block relative mt-6 first:mt-0 group/code">&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">TASK [print loop message] *************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ok&lt;/span>: [&lt;span style="color:#ae81ff">server1] =&amp;gt; (item=0) =&amp;gt; {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msg&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;Loop 0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ok&lt;/span>: [&lt;span style="color:#ae81ff">server1] =&amp;gt; (item=1) =&amp;gt; {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msg&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;Loop 1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ok&lt;/span>: [&lt;span style="color:#ae81ff">server1] =&amp;gt; (item=2) =&amp;gt; {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msg&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;Loop 2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0">
&lt;button
class="code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50"
title="Copy code"
>
&lt;div class="group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;div class="hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>會使用 Loop 就可以減少我們在寫重複的程式碼，當然上面的只是簡單的範例，詳細請參考 &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html#query-vs-lookup" target="_blank" rel="noopener">Loops - Ansible Documentation&lt;/a>。&lt;/p>
&lt;br>
&lt;h2>參考資料&lt;span class="absolute -mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>現代 IT 人一定要知道的 Ansible 自動化組態技巧：&lt;a href="https://chusiang.gitbooks.io/automate-with-ansible/content/" target="_blank" rel="noopener">https://chusiang.gitbooks.io/automate-with-ansible/content/&lt;/a>&lt;/p>
&lt;p>Ansible 安裝：&lt;a href="https://tso-liang-wu.gitbook.io/learn-ansible-and-jenkins-in-30-days/ansible/ansible/ansible-installation" target="_blank" rel="noopener">https://tso-liang-wu.gitbook.io/learn-ansible-and-jenkins-in-30-days/ansible/ansible/ansible-installation&lt;/a>&lt;/p>
&lt;p>怎麼用 Docker 練習 Ansible？：&lt;a href="https://chusiang.gitbooks.io/automate-with-ansible/content/05.how-to-practive-the-ansible-with-docker.html" target="_blank" rel="noopener">https://chusiang.gitbooks.io/automate-with-ansible/content/05.how-to-practive-the-ansible-with-docker.html&lt;/a>&lt;/p>
&lt;p>community.general.telegram module – module for sending notifications via telegram：&lt;a href="https://docs.ansible.com/ansible/latest/collections/community/general/telegram_module.html#ansible-collections-community-general-telegram-module" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/collections/community/general/telegram_module.html#ansible-collections-community-general-telegram-module&lt;/a>&lt;/p></description></item></channel></rss>