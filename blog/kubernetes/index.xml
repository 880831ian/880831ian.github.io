<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PIN-YI – Kubernetes</title><link>https://pin-yi.me/blog/kubernetes/</link><description>Recent content in Kubernetes on PIN-YI</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><atom:link href="https://pin-yi.me/blog/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 開啟 Region 後，如何減少跨 Zone 網路費用</title><link>https://pin-yi.me/blog/kubernetes/k8s-open-region-how-to-reduce-cross-zone-costs/</link><pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/k8s-open-region-how-to-reduce-cross-zone-costs/</guid><description>
&lt;p>由於最近公司開始導入 Multi Zone 架構，這時候會出現一個問題，就是明明我是同一個 GKE，但因為有多個 Zone，導致開始會有一些跨 Zone 的網路傳輸費用產生 (每 Gib 會收 0.01 美元)，可以參考下方圖片：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-open-region-how-to-reduce-cross-zone-costs/1.webp"
alt="跨域費用說明" width="1000">&lt;figcaption>
&lt;p>跨域費用說明&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>所以此文章會針對要如何減少跨 Zone 網路費用進行測試以及提供解決辦法。&lt;/p>
&lt;br>
&lt;h2>建置 GKE 環境&lt;span class="hx-absolute -hx-mt-20" id="建置-gke-環境">&lt;/span>
&lt;a href="#%e5%bb%ba%e7%bd%ae-gke-%e7%92%b0%e5%a2%83" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200">
&lt;p class="hx-flex hx-items-center hx-font-medium">&lt;svg height=16px class="hx-inline-block hx-align-middle hx-mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>&lt;/svg>GKE 資訊：&lt;/p>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>Tier / Mode：Standard&lt;br>版本：1.32.2-gke.1297002&lt;br>Location type：Regional&lt;br>Default node zones：[&amp;quot;asia-east1-a&amp;quot;, &amp;quot;asia-east1-b&amp;quot;]&lt;/p>&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ul>
&lt;li>使用的 Module 請參考：&lt;a href="https://github.com/880831ian/IaC/tree/master/modules/gke" target="_blank" rel="noopener">880831ian/IaC&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-hcl" data-lang="hcl">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">terraform&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> source &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;${get_path_to_repo_root()}/modules/gke&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">include&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">find_in_parent_folders&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;root.hcl&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inputs &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> regional &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;asia-east1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zones &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;asia-east1-a&amp;#34;, &amp;#34;asia-east1-b&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> release_channel &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;REGULAR&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> master_ipv4_cidr_block &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;172.16.1.16/28&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> network_project_id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xxxxx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> network &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnetwork &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;default-asia-east1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gcs_fuse_csi_driver &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable_maintenance &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> monitoring_enable_managed_prometheus &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deletion_protection &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node_pools &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test-pool&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machine_type &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;e2-small&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>(這邊小提醒，如果使用多個 Zone，在 node 的 CA 記得要用 min_count 跟 max_count，他才是依照 Zone 去長，也就是 test-pool 會分別在 Zone A 跟 Zone B 去長歐)&lt;/p>
&lt;br>
&lt;h2>測試連線&lt;span class="hx-absolute -hx-mt-20" id="測試連線">&lt;/span>
&lt;a href="#%e6%b8%ac%e8%a9%a6%e9%80%a3%e7%b7%9a" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>原生 Service 測試&lt;span class="hx-absolute -hx-mt-20" id="原生-service-測試">&lt;/span>
&lt;a href="#%e5%8e%9f%e7%94%9f-service-%e6%b8%ac%e8%a9%a6" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>建立完後，啟動兩個 nginx 服務，分別叫做 nginx-a 跟 nginx-b，各會有兩個 pod，並使用 podAntiAffinity 來限制同一個服務能建立在兩個 Zone 上面。&lt;/p>
&lt;p>相關的程式碼都會放在 &lt;a href="https://github.com/880831ian/k8s-open-region-how-to-reduce-cross-zone-costs" target="_blank" rel="noopener">880831ian/k8s-open-region-how-to-reduce-cross-zone-costs&lt;/a>&lt;/p>
&lt;br>
&lt;h4>程式碼&lt;span class="hx-absolute -hx-mt-20" id="程式碼">&lt;/span>
&lt;a href="#%e7%a8%8b%e5%bc%8f%e7%a2%bc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>下面附上其中一個 nginx-a 服務 yaml (nginx-b 也跟 nginx-a 一樣，只有名稱改變)&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx-a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nginx-a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nginx-a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">affinity&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">podAntiAffinity&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requiredDuringSchedulingIgnoredDuringExecution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">labelSelector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchExpressions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">operator&lt;/span>: &lt;span style="color:#ae81ff">In&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">values&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">nginx-a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">topologyKey&lt;/span>: &lt;span style="color:#ae81ff">topology.kubernetes.io/zone&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">nginx:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMounts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx-conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/etc/nginx/conf.d&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx-conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configMap&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx-conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx-a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nginx-a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">targetPort&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx-conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">default.conf&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> server {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> listen 80;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> location / {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> return 200 &amp;#34;$hostname\n&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h4>顯示部署完的服務狀態&lt;span class="hx-absolute -hx-mt-20" id="顯示部署完的服務狀態">&lt;/span>
&lt;a href="#%e9%a1%af%e7%a4%ba%e9%83%a8%e7%bd%b2%e5%ae%8c%e7%9a%84%e6%9c%8d%e5%8b%99%e7%8b%80%e6%85%8b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們使用指令，列出四個 pod 各別的 node 以及所在的 Zone&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>printf &lt;span style="color:#e6db74">&amp;#34;%-30s %-35s %-20s\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;POD&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;NODE&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ZONE&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;---------------------------------------------------------------------------------------------&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl get pod -o&lt;span style="color:#f92672">=&lt;/span>custom-columns&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;POD:metadata.name,NODE:spec.nodeName&amp;#39;&lt;/span> --no-headers | &lt;span style="color:#66d9ef">while&lt;/span> read pod node; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>kubectl get node &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$node&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -o&lt;span style="color:#f92672">=&lt;/span>jsonpath&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{.metadata.labels.topology\.kubernetes\.io/zone}&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf &lt;span style="color:#e6db74">&amp;#34;%-30s %-35s %-20s\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pod&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$node&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$zone&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-open-region-how-to-reduce-cross-zone-costs/2.webp"
alt="Pod 所在 Node 以及 Zone" width="850">&lt;figcaption>
&lt;p>Pod 所在 Node 以及 Zone&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接著，我們從 nginx-a-98f749dc6-jzl8m (Zone A) 發起連線打 nginx-b 的 svc，觀察一下他會打到同樣是 Zone A 的 nginx-b-795d6c85b8-c2k45，還是 Zone B 的 nginx-b-795d6c85b8-tncfm，或是隨機分配呢？&lt;/p>
&lt;p>我們使用以下指令打 1000 次並觀察次數&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i in &lt;span style="color:#f92672">{&lt;/span>1..1000&lt;span style="color:#f92672">}&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curl -s http://nginx-b.default.svc.cluster.local
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span> | sort | uniq -c&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-open-region-how-to-reduce-cross-zone-costs/3.webp"
alt="Pod 所在 Node 以及 Zone" width="550">&lt;figcaption>
&lt;p>Pod 所在 Node 以及 Zone&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>為了測試準確性，我們重複測試 3 次&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>同 nginx-a Zone A 打 nginx-b svc&lt;/th>
&lt;th>nginx-b Zone A&lt;/th>
&lt;th>nginx-b Zone B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>第一次打 1000 次&lt;/td>
&lt;td>482&lt;/td>
&lt;td>518&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>第二次打 1000 次&lt;/td>
&lt;td>493&lt;/td>
&lt;td>507&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>第三次打 1000 次&lt;/td>
&lt;td>498&lt;/td>
&lt;td>502&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;br>
&lt;p>就上面測試結果可以得知，他是隨機去分配到 Zone A 或是 Zone B 的 Nginx-b Pod，因為 Service 本來就會依照預設的 Round-Robin 來去分配。&lt;/p>
&lt;br>
&lt;h3>使用 Topology Aware Routing 測試&lt;span class="hx-absolute -hx-mt-20" id="使用-topology-aware-routing-測試">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8-topology-aware-routing-%e6%b8%ac%e8%a9%a6" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>簡單說明一下，Topology Aware Routing 縮寫是 (TAR/TAH) 中文叫做：拓樸感知路由&lt;/p>
&lt;p>在 K8s 1.27 以前叫作 Topology Aware Hints，所以縮寫才會是 TAH，邏輯是需要在 Service 的 annotation 加上 &lt;code>service.kubernetes.io/topology-mode: Auto&lt;/code> （1.27 Version），以前版本設定方式會不同。&lt;/p>
&lt;p>它可以幫助網路流量盡可能的保持在同一個 Zone 裡面，Pod 之前優先使用同 Zone 流量來提高可靠性、性能以及減少成本。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-open-region-how-to-reduce-cross-zone-costs/4.webp"
alt="設定完成後，會顯示來至 endpoint-slice-controller" width="750">&lt;figcaption>
&lt;p>設定完成後，會顯示來至 endpoint-slice-controller&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>當設定上去後，因為 EndpointSlice 這邊會記錄每個 Pod 是屬於哪個 Zone，當並提供給 kube-proxy 知道，進而讓流量往同樣的 Zone 走。&lt;/p>
&lt;br>
&lt;h4>顯示部署完的服務狀態&lt;span class="hx-absolute -hx-mt-20" id="顯示部署完的服務狀態-1">&lt;/span>
&lt;a href="#%e9%a1%af%e7%a4%ba%e9%83%a8%e7%bd%b2%e5%ae%8c%e7%9a%84%e6%9c%8d%e5%8b%99%e7%8b%80%e6%85%8b-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>那我們一樣用同樣的步驟再來測試一次：&lt;/p>
&lt;p>使用一樣的指令，先列出四個 pod 各別的 node 以及所在的 zone (服務都有重啟過)&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>printf &lt;span style="color:#e6db74">&amp;#34;%-30s %-35s %-20s\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;POD&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;NODE&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ZONE&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;---------------------------------------------------------------------------------------------&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl get pod -o&lt;span style="color:#f92672">=&lt;/span>custom-columns&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;POD:metadata.name,NODE:spec.nodeName&amp;#39;&lt;/span> --no-headers | &lt;span style="color:#66d9ef">while&lt;/span> read pod node; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>kubectl get node &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$node&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -o&lt;span style="color:#f92672">=&lt;/span>jsonpath&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{.metadata.labels.topology\.kubernetes\.io/zone}&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf &lt;span style="color:#e6db74">&amp;#34;%-30s %-35s %-20s\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pod&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$node&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$zone&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-open-region-how-to-reduce-cross-zone-costs/5.webp"
alt="測試結果" width="850">&lt;figcaption>
&lt;p>測試結果&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們從 nginx-a-fd5bdb699-6qnwb (Zone A) 發起連線打 nginx-b 的 svc，一樣觀察他會打到同樣是 zone A 的 nginx-b-795d6c85b8-2q7m2，還是 Zone B 的 nginx-b-795d6c85b8-82427？&lt;/p>
&lt;p>我們使用以下指令打 1000 次並觀察次數&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i in &lt;span style="color:#f92672">{&lt;/span>1..1000&lt;span style="color:#f92672">}&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curl -s http://nginx-b.default.svc.cluster.local
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span> | sort | uniq -c&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-open-region-how-to-reduce-cross-zone-costs/6.webp"
alt="Pod 所在 Node 以及 Zone" width="550">&lt;figcaption>
&lt;p>Pod 所在 Node 以及 Zone&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>為了公平性，我們也比照原本測試的，重複測試 3 次&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>同 nginx-a Zone A 打 nginx-b svc&lt;/th>
&lt;th>nginx-b Zone A&lt;/th>
&lt;th>nginx-b Zone B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>第一次打 1000 次&lt;/td>
&lt;td>1000&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>第二次打 1000 次&lt;/td>
&lt;td>1000&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>第三次打 1000 次&lt;/td>
&lt;td>1000&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;br>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-green-200 hx-bg-green-100 hx-text-green-900 dark:hx-border-green-200/30 dark:hx-bg-green-900/30 dark:hx-text-green-200">
&lt;p class="hx-flex hx-items-center hx-font-medium">&lt;svg height=16px class="hx-inline-block hx-align-middle hx-mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>&lt;/svg>所以可以得知：&lt;/p>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>只要 Service 有加上該 annotation，就可以透過 EndpointSlice 走到同樣的 Zone。&lt;/p>&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>另外，我們也來測試看看，如果打的過程中，將 nginx-b Zone A nginx-b-795d6c85b8-2q7m2 Pod 給移除，那觀察流量會不會自動轉到 Zone B 呢？！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-open-region-how-to-reduce-cross-zone-costs/7.webp"
alt="Pod 所在 Node 以及 Zone" width="850">&lt;figcaption>
&lt;p>Pod 所在 Node 以及 Zone&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>測試結果：當一開始進到 nginx-b-795d6c85b8-2q7m2 的流量，遇到 nginx-b-795d6c85b8-2q7m2 服務中斷，由於該 Nginx-b 在 Zone A 沒有其他 Pod，所以就會切回去使用 Zone B 的 Nginx-b 服務 (nginx-b-795d6c85b8-82427)，但當 Zone A 的 Nginx-b 服務好了，又會再走回 Zone A (nginx-b-795d6c85b8-w2vr4) &amp;lt; 是後面長出來的 Pod。&lt;/p>
&lt;br>
&lt;h4>使用的建議&lt;span class="hx-absolute -hx-mt-20" id="使用的建議">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8%e7%9a%84%e5%bb%ba%e8%ad%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>
&lt;p>確保 K8s 版本在 1.27 以上，1.27 以下需要使用 &lt;code>service.kubernetes.io/topology-aware-hints&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每個服務要均勻分配在每個 Zone 上面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>確保服務在更新時，同 Zone 上面的數量足夠，避免切到其他 Zone 導致費用產生。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Google Cloud 內部 VM 之間的資料移轉定價：&lt;a href="https://cloud.google.com/vpc/network-pricing?hl=zh-TW" target="_blank" rel="noopener">https://cloud.google.com/vpc/network-pricing?hl=zh-TW&lt;/a>&lt;/p>
&lt;p>Topology Aware Routing：&lt;a href="https://kubernetes.io/docs/concepts/services-networking/topology-aware-routing/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/topology-aware-routing/&lt;/a>&lt;/p>
&lt;p>AWS 相關文件 (AWS 也會有類似問題)：&lt;a href="https://aws.amazon.com/tw/blogs/containers/exploring-the-effect-of-topology-aware-hints-on-network-traffic-in-amazon-elastic-kubernetes-service/" target="_blank" rel="noopener">https://aws.amazon.com/tw/blogs/containers/exploring-the-effect-of-topology-aware-hints-on-network-traffic-in-amazon-elastic-kubernetes-service/&lt;/a>&lt;/p></description></item><item><title>K8s Node Log Stdout Logrotate 回收機制</title><link>https://pin-yi.me/blog/kubernetes/k8s-node-log-stdout-logrotate/</link><pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/k8s-node-log-stdout-logrotate/</guid><description>
&lt;p>我們知道可觀測性的三大支柱是 Log、Metics、Trace，其中 Log 是最基礎的一環，透過 Log 我們可以了解應用程式的運作狀況，當應用程式出現問題時，透過 Log 可以快速定位問題，進而解決問題。&lt;/p>
&lt;p>以我們公司為例，我們主要使用 GCP，現在也開始用 AWS 來當作 DR 的環境。在 GCP 我們原本會使用 Log Exporter 來查看服務及系統的 Log，但為了更方便的管理，我們改使用 Datadog 來統一收集 Log (AWS 也是)。&lt;/p>
&lt;p>要如何傳遞給 Datadog，我們依照 Datadog 官方文件建議，將 Log Stdout，讓 Datadog agent 去收集 Log，這樣就可以統一管理 Log 了，詳細可參考 &lt;a href="https://docs.datadoghq.com/containers/kubernetes/log/?tab=datadogoperator" target="_blank" rel="noopener">Datadog Kubernetes log collection&lt;/a>。&lt;/p>
&lt;br>
&lt;h2>疑問&lt;span class="hx-absolute -hx-mt-20" id="疑問">&lt;/span>
&lt;a href="#%e7%96%91%e5%95%8f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>我之前ㄧ直以為 Container Log Stdout 不會寫實體檔，後來發現，其實它還是會寫，但當 Node 重啟，或是 Pod 被刪除時，才會移除，要怎麼查看，我們可以進到 GKE or EKS 的 node 機器上，到 &lt;code>/var/log/pods/&lt;/code> 路徑底下，就可以看到運作在該 node 上的 pod，資料夾名稱會是以 &lt;code>{namespace}_{pod name}_xxx&lt;/code> 來命名。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-node-log-stdout-logrotate/1.webp"
alt="How nodes handle container logs 圖片：Logging Architecture" width="550">&lt;figcaption>
&lt;p>How nodes handle container logs 圖片：&lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/logging/#how-nodes-handle-container-logs" target="_blank" rel="noopener">Logging Architecture&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>所以就好奇，是誰來管理這些 Log 的回收機制呢？如果沒有回收機制，Log 不會把 Node 的 Disk 給寫爆嗎？&lt;/p>
&lt;br>
&lt;h2>Node Logrotate&lt;span class="hx-absolute -hx-mt-20" id="node-logrotate">&lt;/span>
&lt;a href="#node-logrotate" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>當然，有在使用過相關 Log 工具，對 Logrotate 一定不陌生，第一個想法就想說，會不會 Node 上有對應的 Logrotate 設定，去定期的去處理 &lt;code>/var/log&lt;/code> 的檔案，因次我們這邊針對 GKE(GCP) 以及 EKS(AWS) 來做說明：&lt;/p>
&lt;ul>
&lt;li>GKE&lt;/li>
&lt;/ul>
&lt;p>首先，我們先連線到 GKE Node 上，進到 &lt;code>/etc/logrotate.d&lt;/code> 底下，可以看到以下圖片的設定，在 GKE 裡面只有一個 Logrotate 設定檔，他會針對整個 &lt;code>/var/log&lt;/code> 底下的 log 檔案做處理。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-node-log-stdout-logrotate/2.webp"
alt="GKE /etc/logrotate.d 底下檔案設定" width="550">&lt;figcaption>
&lt;p>GKE /etc/logrotate.d 底下檔案設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ul>
&lt;li>EKS&lt;/li>
&lt;/ul>
&lt;p>一樣的步驟，進到 &lt;code>/etc/logrotate.d&lt;/code> 底下，可以看到以下圖片的設定，EKS 會有多個 Logrotate 設定檔，但卻沒有對 &lt;code>/var/log/pods&lt;/code> 底下的 log 檔案做處理，所以 EKS 需要額外去寫 DameonSet 來處理 &lt;code>/var/log/pods&lt;/code> 底下的 log 檔案回收嗎？&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-node-log-stdout-logrotate/3.webp"
alt="EKS /etc/logrotate.d 底下檔案設定" width="500">&lt;figcaption>
&lt;p>EKS /etc/logrotate.d 底下檔案設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>尋找答案&lt;span class="hx-absolute -hx-mt-20" id="尋找答案">&lt;/span>
&lt;a href="#%e5%b0%8b%e6%89%be%e7%ad%94%e6%a1%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>最後在 Kubernetes 官方文件中 &lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/logging/#log-rotation" target="_blank" rel="noopener">Logging Architecture&lt;/a> 有看到兩個設定值，分別是 &lt;code>containerLogMaxSize&lt;/code> (預設 10Mi)，以及 &lt;code>containerLogMaxFiles&lt;/code>(預設 5)。kubelet 會根據這兩個設定值來決定是否要回收 Log。&lt;/p>
&lt;p>如果 Log 檔案大小超過 &lt;code>containerLogMaxSize&lt;/code>，kubelet 就會重新開始寫新的 Log 檔案，如果 Log 檔案數量超過 &lt;code>containerLogMaxFiles&lt;/code>，kubelet 會刪除最舊的 Log 檔案。&lt;/p>
&lt;p>那要怎麼查看當前 node 的 kubelet 設定值呢？可以透過以下指令：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>journalctl -u kubelet --no-pager | grep &lt;span style="color:#e6db74">&amp;#34;container-log-max&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>就可以看到底下兩個設定值：（圖片上面是 EKS，下面是 GKE）&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-node-log-stdout-logrotate/4.webp"
alt="查看 containerLogMaxSize 跟 containerLogMaxFiles 當前設定值" width="750">&lt;figcaption>
&lt;p>查看 containerLogMaxSize 跟 containerLogMaxFiles 當前設定值&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>可以發現都跟預設值一樣。&lt;/p>
&lt;br>
&lt;p>那我們也直接進到 &lt;code>/var/log/pods&lt;/code> 底下，來查看是否是依照這個規律去運作。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-node-log-stdout-logrotate/5.webp"
alt="進入 /var/log/pods" width="650">&lt;figcaption>
&lt;p>進入 /var/log/pods&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>可以看到，就跟上面說的資料夾名稱是由 &lt;code>{namespace}_{pod name}_xxx&lt;/code> 來命名，我們進去到隨機一個資料夾來查看 Log 檔案。&lt;/p>
&lt;br>
&lt;ul>
&lt;li>GKE&lt;/li>
&lt;/ul>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-node-log-stdout-logrotate/6.webp" width="650">
&lt;/figure>
&lt;br>
&lt;ul>
&lt;li>EKS&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-node-log-stdout-logrotate/7.webp" width="650">
&lt;/figure>
&lt;br>
&lt;p>可以看到，GKE 跟 EKS 檔案數量都是 5 個，且每個都是小於 10Mi (因為計算誤差，所以有些會顯示 11、12)，所以可以確定是依照 &lt;code>containerLogMaxSize&lt;/code> 跟 &lt;code>containerLogMaxFiles&lt;/code> 在運作的。&lt;/p>
&lt;p>也可以看到 GKE Log，第一次查看最舊的檔案是 &lt;code>0.log.20250317-081814.gz&lt;/code>，第二次查看最舊的檔案就變成 &lt;code>0.log.20250317-081844.gz&lt;/code>，就代表超過 5 份 Log 檔案，kubelet 就會刪除最舊的 Log 檔案。&lt;/p>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Logging Architecture 日誌架構：&lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/logging/#log-rotation" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/cluster-administration/logging/#log-rotation&lt;/a>&lt;/p>
&lt;p>Datadog Kubernetes log collection：&lt;a href="https://docs.datadoghq.com/containers/kubernetes/log/?tab=datadogoperator" target="_blank" rel="noopener">https://docs.datadoghq.com/containers/kubernetes/log/?tab=datadogoperator&lt;/a>&lt;/p></description></item><item><title>KubeDNS vs CoreDNS 比較</title><link>https://pin-yi.me/blog/kubernetes/kubedns-vs-coredns/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/kubedns-vs-coredns/</guid><description>
&lt;p>前情提要：由於上一篇筆記 &lt;a href="../pod-curl-error-6-could-not-resolve-host" >Pod 出現 cURL error 6: Could not resolve host&lt;/a> 的後續規劃中，有提出我們想研究看看 Core DNS 來取代 Kube DNS，因此，這篇筆記要來比較一下 Kube DNS 以及 Core DNS 的差異以及兩者的優缺點，另外還會說明一下 DNS 的最佳實踐做法。&lt;/p>
&lt;br>
&lt;p>前面概論介紹 K8s 內的 DNS 以及 CoreDNS 主要都是參考 &lt;a href="https://weng-albert.medium.com/%E6%8E%A2%E7%A7%98k8s-dns-%E8%A7%A3%E5%AF%86ip%E6%9F%A5%E8%A9%A2%E8%88%87%E6%9C%8D%E5%8B%99%E7%99%BC%E7%8F%BE-034de2e72abe" target="_blank" rel="noopener">探秘K8S DNS：解密IP查詢與服務發現&lt;/a>、&lt;a href="https://weng-albert.medium.com/coredns%E7%B0%A1%E5%96%AE%E9%99%A4%E9%8C%AF-%E8%A7%A3%E6%B1%BA%E4%BD%A0%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E8%88%AC%E5%95%8F%E9%A1%8C-71d255e39548" target="_blank" rel="noopener">CoreDNS簡單除錯：解決你遇到的一般問題&lt;/a>，詳細可以查看原文。&lt;/p>
&lt;br>
&lt;h2>概論 (K8s DNS)&lt;span class="hx-absolute -hx-mt-20" id="概論-k8s-dns">&lt;/span>
&lt;a href="#%e6%a6%82%e8%ab%96-k8s-dns" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>K8s 會有 DNS 服務，主要是因為 K8s 連線是透過 Pod IP 來連線，但每當 Pod 重啟後 IP 會變動，所以就需要透過 Service 這個 Type 先建立持久性的名稱來讓其他 Pod 連線到後端服務上。&lt;/p>
&lt;p>當我們建立 Service 時，K8s DNS 就會自動產生一個對應的 A record 將 service dns name 與 IP 位址配對。之後，Pod 就可以透過 DNS 名稱來進行連線。&lt;/p>
&lt;p>而 DNS 負責動態更新 A record 與 Service IP 的異動。&lt;/p>
&lt;p>就如上面有提到，目前 K8s 的 DNS 已經從 KubeDNS 改成 CoreDNS，那兩者都有些相同的功能，如下：&lt;/p>
&lt;ol>
&lt;li>KubeDNS svc 可以建立一個或多個 Pod&lt;/li>
&lt;li>KubeDNS svc 監控 Kubernetes API 的 service 和 endpoint 事件，並根據需要變更其 DNS 項目。當透過建立、編輯或刪除操作修改這些 Kubernetes 服務及其相關 pod 時，這些事件會自動觸發。&lt;/li>
&lt;li>Kubelet 會將 KubeDNS svc 的叢集 IP 指派給每個新 Pod 的 &lt;code>/etc/resolv.conf&lt;/code> 名稱伺服器檔案內，以及適當的搜尋設定以允許更短的主機名稱，如下：。&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/kubedns-vs-coredns/1.webp"
alt="可以看到 /etc/resolv.conf 與 KubeDNS 的 cluster IP ㄧ致" width="900">&lt;figcaption>
&lt;p>可以看到 /etc/resolv.conf 與 KubeDNS 的 cluster IP ㄧ致&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>K8s 服務的整個 DNS A record 如下：&lt;/p>
&lt;ul>
&lt;li>Service DNS name：&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;pre>&lt;code>[service].[namespace].svc.cluster.local&lt;/code>&lt;/pre>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>service、namespace 可以自行替換，這也是我們最常使用的方式。&lt;/p>
&lt;br>
&lt;p>當然 Pod 也有自己的 DNS name，只是因爲 Pod 每次重啟 IP 會變動，所以我們通常不會使用 Pod DNS name：&lt;/p>
&lt;ul>
&lt;li>Pod DNS name：&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;pre>&lt;code>[pod cluster IP].[namespace].pod.cluster.local&lt;/code>&lt;/pre>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>pod cluster IP 這邊要將 IP 從 . 的分隔符號換成 -，例如：&lt;code>10-166-65-136.default.pod.cluster.local&lt;/code>&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/kubedns-vs-coredns/2.webp"
alt="可以看到 curl 的 pod cluster IP 與 svc 的 endpoint ㄧ致" width="750">&lt;figcaption>
&lt;p>可以看到 curl 的 pod cluster IP 與 svc 的 endpoint ㄧ致&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>所以，程式可以透過簡單且一致的主機名稱來存取 cluster 其他服務或是 Pod。&lt;/p>
&lt;p>也不需要使用完整的 hostname 來存取服務，因為在 &lt;code>resolv.conf&lt;/code> 會設定好 domain 的 suffixes，如果同一個 namespace 底下服務溝通，只要設定以下即可：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;pre>&lt;code>[service]&lt;/code>&lt;/pre>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>跨到其他 nampesace 就要改成：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;pre>&lt;code>[service].[namespace]&lt;/code>&lt;/pre>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2>應用程式 DNS 查詢流程&lt;span class="hx-absolute -hx-mt-20" id="應用程式-dns-查詢流程">&lt;/span>
&lt;a href="#%e6%87%89%e7%94%a8%e7%a8%8b%e5%bc%8f-dns-%e6%9f%a5%e8%a9%a2%e6%b5%81%e7%a8%8b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/kubedns-vs-coredns/3.webp"
alt="應用程式 DNS 查詢流程 圖片：Connecting the Dots: Understanding How Pods Talk in Kubernetes Networks" width="700">&lt;figcaption>
&lt;p>應用程式 DNS 查詢流程 圖片：&lt;a href="https://medium.com/@seifeddinerajhi/connecting-the-dots-understanding-how-pods-talk-in-kubernetes-networks-992fa69fbbeb" target="_blank" rel="noopener">Connecting the Dots: Understanding How Pods Talk in Kubernetes Networks&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>下面列出一下應用程式在 K8s 內的 DNS 查詢流程：&lt;/p>
&lt;ol>
&lt;li>當 Pod 執行 DNS 查詢時，會先查詢 Pod 裡面的 &lt;code>resolv.conf&lt;/code> 檔案，再來查詢 Pod 所在的 node 上的 &lt;code>resolv.conf&lt;/code> 檔案，這個檔案有設定 NodeLocal DNSCache 伺服器被設定為預設遞迴 DNS 解析器，充當快取 (在 GKE 需要另外開啟)。&lt;/li>
&lt;li>如果此快取不包含所請求主機名稱的 IP 位址，則查詢將轉送至叢集 DNS 伺服器 (CoreDNS)，目前 GKE 是 KubeDNS。&lt;/li>
&lt;li>此 DNS 伺服器透過查詢 Kubernetes 服務註冊表來決定 IP 位址。此註冊表包含服務名稱到對應 IP 位址的對應。這允許叢集 DNS 伺服器將正確的 IP 位址傳回給請求的 pod。&lt;/li>
&lt;li>任何被查詢但不在 Kubernetes 服務註冊表中的網域都會轉送到上游 DNS 伺服器。&lt;/li>
&lt;/ol>
&lt;br>
&lt;h2>概論 (KubeDNS)&lt;span class="hx-absolute -hx-mt-20" id="概論-kubedns">&lt;/span>
&lt;a href="#%e6%a6%82%e8%ab%96-kubedns" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>這邊就來說一下目前 GKE 在使用的 KubeDNS 架構，主要由這三個 container 組成：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/kubedns-vs-coredns/4.webp"
alt="KubeDNS 架構 圖片：DNS" width="600">&lt;figcaption>
&lt;p>KubeDNS 架構 圖片：&lt;a href="https://feisky.gitbooks.io/kubernetes/content/components/kube-dns.html" target="_blank" rel="noopener">DNS&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/kubedns-vs-coredns/5.webp"
alt="目前 GKE 1.29 KubeDNS" width="750">&lt;figcaption>
&lt;p>目前 GKE 1.29 KubeDNS&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ul>
&lt;li>KubeDNS：DNS 服務核心元件，主要由 KubeDNS 以及 SkyDNS 兩個元件組成：
&lt;ul>
&lt;li>KubeDNS 負責監聽 Kubernetes API 的 service 和 endpoint 事件，並將相關訊息更新到 SkyDNS 中。&lt;/li>
&lt;li>SkyDNS 負責 DNS 解析，監聽在 10053 Port (tcp/udp)，也同時監聽在 10055 Port 提供 metrics。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/kubedns-vs-coredns/6.webp"
alt="SkyDNS Metrics Port 以及監聽 10053 Port" width="750">&lt;figcaption>
&lt;p>SkyDNS Metrics Port 以及監聽 10053 Port&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ul>
&lt;li>
&lt;p>dnsmasq (有換名稱)：負責啟動 dnsmasq，並在變化時重啟 dnsmasq：&lt;/p>
&lt;ul>
&lt;li>dnsmasq 的 Upstream DNS Server 是 SkyDNS，cluster 內部的 DNS 查詢都會由 SkyDNS 負責。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>sidecar：負責健康檢查和提供 DNS metrics 監聽在 10054 Port。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/kubedns-vs-coredns/7.webp"
alt="sidecar 健康檢查以及監聽 10054 Port" width="750">&lt;figcaption>
&lt;p>sidecar 健康檢查以及監聽 10054 Port&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>概論 (CoreDNS)&lt;span class="hx-absolute -hx-mt-20" id="概論-coredns">&lt;/span>
&lt;a href="#%e6%a6%82%e8%ab%96-coredns" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>這邊就說明一下我們想要研究的 CoreDNS 吧，其實早就應該用 CoreDNS 來取代 KubeDNS，&lt;del>只是 GKE 不知道為什麼還不支援&lt;/del>&lt;/p>
&lt;p>CoreDNS 是一個用 Go 語言寫的 DNS 伺服器，它是一個 CNCF 的專案，目前已經成為 K8s 的預設 DNS 伺服器。&lt;/p>
&lt;p>跟其他 DNS 比較不一樣的是他非常靈活彈性，並且所有功能都是透過 Plugins 來實現，這樣就可以根據需求來自訂自己的 DNS 伺服器。&lt;/p>
&lt;p>它的特點是：&lt;/p>
&lt;ol>
&lt;li>Plugins (插件化)&lt;/li>
&lt;li>Service Discovery (服務發現)&lt;/li>
&lt;li>Fast and Flexible (快速且靈活)&lt;/li>
&lt;li>Simplicity (簡單)&lt;/li>
&lt;/ol>
&lt;p>這邊來說一下 常見的 Plugins 如下：&lt;/p>
&lt;ul>
&lt;li>loadbalance：提供基於 DNS 的負載均衡功能&lt;/li>
&lt;li>loop：檢測在 DNS 解析過程中出現的簡單循環問題&lt;/li>
&lt;li>cache：提供前端快取功能&lt;/li>
&lt;li>health：對 Endpoint 進行健康檢查&lt;/li>
&lt;li>kubernetes：提供對 Kubernetes API 的訪問，並將其轉換為 DNS 記錄&lt;/li>
&lt;li>etcd：提供對 etcd 的訪問，並將其轉換為 DNS 記錄&lt;/li>
&lt;li>reload：定時自動重新加載 Corefile 配置的內容&lt;/li>
&lt;li>forward：轉發域名查詢到上游 DNS 伺服器&lt;/li>
&lt;li>proxy：轉發特定的域名查詢到多個其他 DNS 伺服器，同時提供到多個 DNS 服務器的負載均衡功能&lt;/li>
&lt;li>prometheus：爲 Prometheus 系統提供採集性能指摽數據的 URL&lt;/li>
&lt;li>log：對 DNS 查詢進行日誌記錄&lt;/li>
&lt;li>errors：對 DNS 查詢錯誤進行日誌記錄&lt;/li>
&lt;/ul>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/kubedns-vs-coredns/8.webp"
alt="CoreDNS 使用的 Plugins/架構 圖片：A Brief Look at CoreDNS" width="750">&lt;figcaption>
&lt;p>CoreDNS 使用的 Plugins/架構 圖片：&lt;a href="https://livewyer.io/blog/2018/05/31/a-brief-look-at-coredns/" target="_blank" rel="noopener">A Brief Look at CoreDNS&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>CoreDNS 的 helm：&lt;a href="https://github.com/coredns/helm/tree/master/charts/coredns" target="_blank" rel="noopener">https://github.com/coredns/helm/tree/master/charts/coredns&lt;/a>&lt;/p>
&lt;br>
&lt;h2>KubeDNS vs CoreDNS 優缺點&lt;span class="hx-absolute -hx-mt-20" id="kubedns-vs-coredns-優缺點">&lt;/span>
&lt;a href="#kubedns-vs-coredns-%e5%84%aa%e7%bc%ba%e9%bb%9e" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>KubeDNS&lt;span class="hx-absolute -hx-mt-20" id="kubedns">&lt;/span>
&lt;a href="#kubedns" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>優點：有 dnsmesq，在性能上有一定的保障。&lt;/li>
&lt;li>缺點： dnsmesq 如果重啟，會先刪掉 process 才會重新起服務，中間可能會出現查詢失敗。在確認內部檔案時，如果數量過多或是太頻繁更新 DNS 有可能反而導致 dnsmasq 不穩，這時候就需要重啟 dnsmasq 服務。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>CoreDNS&lt;span class="hx-absolute -hx-mt-20" id="coredns">&lt;/span>
&lt;a href="#coredns" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>優點：可以自行根據需求使用自訂的 Plugins，記憶體的佔用情況也比 KubeDNS 好。&lt;/li>
&lt;li>缺點：Cache 功能不如 dnsmasq，內部解析速度可能會比 KubeDNS 慢。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>GKE 上的 DNS，可以改用 CoreDNS 嗎？&lt;span class="hx-absolute -hx-mt-20" id="gke-上的-dns可以改用-coredns-嗎">&lt;/span>
&lt;a href="#gke-%e4%b8%8a%e7%9a%84-dns%e5%8f%af%e4%bb%a5%e6%94%b9%e7%94%a8-coredns-%e5%97%8e" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>目前 GKE 上的 DNS 預設是 KubeDNS，或是使用 GCP 提供的另一個 Cloud DNS 服務，但是上次我們有提到，因為公司之後想走多雲架構，會開始使用 AWS，而 AWS 的 EKS 預設的 DNS 服務是 CoreDNS (K8s 現在預設也是 CoreDNS 😿)&lt;/p>
&lt;p>所以我們想說，是不是可以在 GKE 上也改使用 CoreDNS，這樣之後維護可以更一致。&lt;/p>
&lt;br>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-amber-200 hx-bg-amber-100 hx-text-amber-900 dark:hx-border-amber-200/30 dark:hx-bg-amber-900/30 dark:hx-text-amber-200">
&lt;p class="hx-flex hx-items-center hx-font-medium">&lt;svg height=16px class="hx-inline-block hx-align-middle hx-mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>&lt;/svg>2025/08/05 更新：&lt;/p>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>發現下方 「Google 有一篇 knowledge 文章」文章連結已經失效，並且最近與 Google TAM 確認一些問題，以下分享給大家：
&lt;br>&lt;br>
A1：是否可以自行調整 kubelet cluster-dns-ip 設定？
&lt;br>
Q1：使用者無法自行調整。
&lt;br>&lt;br>
A2：是否能夠自己建立 node-local-dns，而不使用 GCP 提供的方式安裝？
&lt;br>
Q2：因為無法調整 kubelet 的內容(cluster-dns-ip)，所以也不能自建 node-local-dns。
&lt;br>&lt;br>
A3：KubeDNS 如果想要調整 pod 數量，我們知道要調整 kube-dns-autoscaler configmap，我們想將這個納入版控進行控制，想確認這個有可能會因為更新 cluster 而被還原嗎？
&lt;br>
&lt;a href="https://cloud.google.com/kubernetes-engine/docs/how-to/nodelocal-dns-cache?hl=zh-tw#scaling_up_kube-dns" target="_blank" rel="noopener">https://cloud.google.com/kubernetes-engine/docs/how-to/nodelocal-dns-cache?hl=zh-tw#scaling_up_kube-dns&lt;/a>
&lt;br>
Q3：deployment 會被還原是因為 KubeDNS 後面還有一個 Controller 在控制，Configmap 設計目的的確是可以讓我們自行接管來調整，且不會被還原。
&lt;br>&lt;br>
另外，目前有針對 GKE 的四種 KubeDNS、CloudDNS、NodeLocal DNSCache 組合有進行測試，詳細可以查看以下連結：&lt;/p>&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>在爬文的過程中有發現，Google 有一篇 knowledge 文章 &lt;a href="https://cloud.google.com/knowledge/kb/how-to-run-coredns-on-kubernetes-engine-000004698" target="_blank" rel="noopener">How to run CoreDNS on Kubernetes Engine?&lt;/a> 有提到 Google 預設就是使用 KubeDNS，沒辦法把 KubeDNS 縮小到 0 並完全替換，如果只是單純想要使用 CoreDNS 的快取功能，可以啟用 GKE 上的 NodeLocal DNSCache&lt;/p>
&lt;p>如果想要把 CronDNS 解析功能加到 GKE 上，要先部署一個 CoreDNS Pod，並透過 service 公開它，並為 KubeDNS 配置一個 stub domain，將其指向 CoreDNS 服務 IP。&lt;/p>
&lt;p>所有與 stub domain 後綴相符的流量都會路由到 CoreDNS Pod。不符合的流量將繼續由 KubeDNS 解析。&lt;/p>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>探秘K8S DNS：解密IP查詢與服務發現：&lt;a href="https://weng-albert.medium.com/%E6%8E%A2%E7%A7%98k8s-dns-%E8%A7%A3%E5%AF%86ip%E6%9F%A5%E8%A9%A2%E8%88%87%E6%9C%8D%E5%8B%99%E7%99%BC%E7%8F%BE-034de2e72abe" target="_blank" rel="noopener">https://weng-albert.medium.com/%E6%8E%A2%E7%A7%98k8s-dns-%E8%A7%A3%E5%AF%86ip%E6%9F%A5%E8%A9%A2%E8%88%87%E6%9C%8D%E5%8B%99%E7%99%BC%E7%8F%BE-034de2e72abe&lt;/a>&lt;/p>
&lt;p>CoreDNS簡單除錯：解決你遇到的一般問題：&lt;a href="https://weng-albert.medium.com/coredns%E7%B0%A1%E5%96%AE%E9%99%A4%E9%8C%AF-%E8%A7%A3%E6%B1%BA%E4%BD%A0%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E8%88%AC%E5%95%8F%E9%A1%8C-71d255e39548" target="_blank" rel="noopener">https://weng-albert.medium.com/coredns%E7%B0%A1%E5%96%AE%E9%99%A4%E9%8C%AF-%E8%A7%A3%E6%B1%BA%E4%BD%A0%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E8%88%AC%E5%95%8F%E9%A1%8C-71d255e39548&lt;/a>&lt;/p>
&lt;p>Connecting the Dots: Understanding How Pods Talk in Kubernetes Networks：&lt;a href="https://medium.com/@seifeddinerajhi/connecting-the-dots-understanding-how-pods-talk-in-kubernetes-networks-992fa69fbbeb" target="_blank" rel="noopener">https://medium.com/@seifeddinerajhi/connecting-the-dots-understanding-how-pods-talk-in-kubernetes-networks-992fa69fbbeb&lt;/a>&lt;/p>
&lt;p>How to run CoreDNS on Kubernetes Engine?：&lt;a href="https://cloud.google.com/knowledge/kb/how-to-run-coredns-on-kubernetes-engine-000004698" target="_blank" rel="noopener">https://cloud.google.com/knowledge/kb/how-to-run-coredns-on-kubernetes-engine-000004698&lt;/a>&lt;/p></description></item><item><title>Pod 出現 cURL error 6: Could not resolve host</title><link>https://pin-yi.me/blog/kubernetes/pod-curl-error-6-could-not-resolve-host/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/pod-curl-error-6-could-not-resolve-host/</guid><description>
&lt;p>此篇主要是來記錄一下在正式環境服務出現 &lt;code>cURL error 6: Could not resolve host&lt;/code> 的問題，以及如何解決。&lt;/p>
&lt;br>
&lt;h2>問題發生&lt;span class="hx-absolute -hx-mt-20" id="問題發生">&lt;/span>
&lt;a href="#%e5%95%8f%e9%a1%8c%e7%99%bc%e7%94%9f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>當天 RD 在公窗反應說，API 程式去打其他單位或是 Google BigQuery 的 API 時，會出現 &lt;code>cURL error 6: Could not resolve host&lt;/code> 的錯誤，但這個錯誤是偶發性錯誤，且出現錯誤的 Pod 也不是固定，也會出現在不同的 node 上。&lt;/p>
&lt;p>當下檢查服務是正常的，也沒有任何異常，因此我們馬上開了 Google Support Ticket 來詢問。&lt;/p>
&lt;br>
&lt;h2>解決辦法 &amp;amp; 後續規劃&lt;span class="hx-absolute -hx-mt-20" id="解決辦法--後續規劃">&lt;/span>
&lt;a href="#%e8%a7%a3%e6%b1%ba%e8%be%a6%e6%b3%95--%e5%be%8c%e7%ba%8c%e8%a6%8f%e5%8a%83" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>自行測試&lt;span class="hx-absolute -hx-mt-20" id="自行測試">&lt;/span>
&lt;a href="#%e8%87%aa%e8%a1%8c%e6%b8%ac%e8%a9%a6" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>在等待 Google Support 回覆同時，也先在網路上搜尋出現 &lt;code>cURL error 6: Could not resolve host&lt;/code> 的相關錯誤，主要都是因為 DNS 導致，因此我們也先檢查了一下目前 DNS 的設定。&lt;/p>
&lt;p>參考了 Google 的 kube-dns 文件後 &lt;a href="https://cloud.google.com/kubernetes-engine/docs/how-to/nodelocal-dns-cache#scaling_up_kube-dns" target="_blank" rel="noopener">Setting up NodeLocal DNSCache/Scaling up kube-dns&lt;/a>，我們嘗試調整 kube-dns-autoscaler configmap 的設定：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/pod-curl-error-6-could-not-resolve-host/1.webp"
alt="kube-dns-autoscaler configmap" width="800">&lt;figcaption>
&lt;p>kube-dns-autoscaler configmap&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>並觀察一陣子後發現，出現 &lt;code>cURL error 6: Could not resolve host&lt;/code> 的錯誤 Log 已經沒有再出現，因此我們認為是 DNS 的問題，並回報給 Google Support。&lt;/p>
&lt;br>
&lt;p>Kube-dns 的 Pod 是由 kube-dns-autoscaler 的 configmap 來控制 Pod 數量，如圖：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/pod-curl-error-6-could-not-resolve-host/2.webp"
alt="kube-dns-autoscaler configmap" width="700">&lt;figcaption>
&lt;p>kube-dns-autoscaler configmap&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>kube-dns-autoscaler configmap 設定&lt;span class="hx-absolute -hx-mt-20" id="kube-dns-autoscaler-configmap-設定">&lt;/span>
&lt;a href="#kube-dns-autoscaler-configmap-%e8%a8%ad%e5%ae%9a" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們來說明一下這個設定內容是什麼 (下面會先以 GCP 的 kube-dns 官網文件來補充說明，而不是上面圖片)：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div class="filename not-prose" dir="auto">configmap kube-dns-autoscaler&lt;/div>&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>linear: &lt;span style="color:#e6db74">&amp;#39;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;coresPerReplica&amp;#34;: 256,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;includeUnschedulableNodes&amp;#34;: true,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;nodesPerReplica&amp;#34;: 16,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;min&amp;#34;: 1,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;max&amp;#34;: 5,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;preventSinglePointFailure&amp;#34;: true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">}&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-8">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>coresPerReplica：多少個 cores 啟動一個 kube-dns pod (預設 256，也就是每 256 core 才會啟動一個 kube-dns pod)&lt;/li>
&lt;li>nodesPerReplica：多少個 node 啟動一個 kube-dns pod (預設 16，也就是每 16 node 才會啟動一個 kube-dns pod)&lt;/li>
&lt;li>min：最小 kube-dns pod 數量&lt;/li>
&lt;li>max：最大 kube-dns pod 數量&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>GCP kube-dns 官網文件建議：&lt;/p>
&lt;ol>
&lt;li>要對 &lt;code>nodesPerReplica&lt;/code> 設定比較低的值，確保在叢集節點擴充時，kube-dns pod 數量也會跟著增加。&lt;/li>
&lt;li>也強烈建議設定一個明確的 max 值，以確保 GKE control plane 不會因大量的 kube-dns pod 去使用 Kubernetes API 而過載。&lt;/li>
&lt;/ol>
&lt;br>
&lt;h4>kube-dns 計算方式&lt;span class="hx-absolute -hx-mt-20" id="kube-dns-計算方式">&lt;/span>
&lt;a href="#kube-dns-%e8%a8%88%e7%ae%97%e6%96%b9%e5%bc%8f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>kube-dns 的 pod 數量計算方式如下：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>replicas &lt;span style="color:#f92672">=&lt;/span> max&lt;span style="color:#f92672">(&lt;/span> ceil&lt;span style="color:#f92672">(&lt;/span> cores × 1/coresPerReplica &lt;span style="color:#f92672">)&lt;/span> , ceil&lt;span style="color:#f92672">(&lt;/span> nodes × 1/nodesPerReplica &lt;span style="color:#f92672">)&lt;/span>, maxValue &lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>情境一：假設我現在有 16 個 node，core 數量會是 50，那麼 kube-dns pod 數量就會是：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>replicas &lt;span style="color:#f92672">=&lt;/span> max&lt;span style="color:#f92672">(&lt;/span> ceil&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">50&lt;/span> × 1/256&lt;span style="color:#f92672">)&lt;/span> , ceil&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span> × 1/16&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; replicas &lt;span style="color:#f92672">=&lt;/span> max&lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> , 1&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; replicas &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>情境二：假設我現在有 32 個 node，core 數量會是 100，那麼 kube-dns pod 數量就會是：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>replicas &lt;span style="color:#f92672">=&lt;/span> max&lt;span style="color:#f92672">(&lt;/span> ceil&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span> × 1/256&lt;span style="color:#f92672">)&lt;/span> , ceil&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span> × 1/16&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; replicas &lt;span style="color:#f92672">=&lt;/span> max&lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> , 2&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; replicas &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>情境三：假設我現在有 96 個 node，core 數量會是 300，有多設定 max 是 5，那麼 kube-dns pod 數量就會是：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>replicas &lt;span style="color:#f92672">=&lt;/span> max&lt;span style="color:#f92672">(&lt;/span> ceil&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">300&lt;/span> × 1/256&lt;span style="color:#f92672">)&lt;/span> , ceil&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">96&lt;/span> × 1/16&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; replicas &lt;span style="color:#f92672">=&lt;/span> max&lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> , 6&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; replicas &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>但是我們有設定 max 是 5，所以最後 kube-dns pod 數量就會是 5，不會超過 5。&lt;/p>
&lt;br>
&lt;p>為了確保叢集 DNS 可用性的水平，也建議幫 kube-dns 設定 mix 值。&lt;/p>
&lt;p>從上面計算方法也可以知道，當叢集具有多個核心的節點時，coresPerReplica 會佔主導地位。當叢集使用核心數較少的節點數，nodesPerReplica 佔主導地位。通常應該會以 nodesPerReplica 來設定。&lt;/p>
&lt;p>調整完 kube-dns-autoscaler 的 configmap 設定，不需要重啟服務，kube-dns 就會自動 scale up or scale down pod 數&lt;/p>
&lt;br>
&lt;p>最後等待 Google Support 回覆，並告知已經調整 kube-dns-autoscaler configmap 的設定，並觀察一陣子後，問題已經解決。&lt;/p>
&lt;h3>Google Support 回覆&lt;span class="hx-absolute -hx-mt-20" id="google-support-回覆">&lt;/span>
&lt;a href="#google-support-%e5%9b%9e%e8%a6%86" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Google Support 回覆：&lt;/p>
&lt;p>簡單解釋一下為什麼 scale up kube-dns pods 數量會有幫助：&lt;/p>
&lt;p>當 Pod 做 DNS 查詢時，因為你們有啟用 NodeLocal DNSCache，所以他會先找 cache，如果沒有 cache 就會回 kube-dns 查詢。&lt;/p>
&lt;p>我們在表象上先觀察到 NodeLocal DNSCache latency 很高，而這有兩個可能，一個當然可能是自身問題，但更大的可能性是當 cache 要回源跟 kube-dns 查找時，kube-dns 已經沒辦法再承接更多 request，所以 NodeLocal DNSCache 會一直嘗試 retry，我們在指標上也看到 latency 拉高並持平在一個水位顯示出某個瓶頸。&lt;/p>
&lt;p>在經過 kube-dns 增加 pod 操作之後，看起來後續 DNS 查詢可以順利被處理跟 cache，所以問題就大幅緩解。&lt;/p>
&lt;br>
&lt;h3>Google Support 建議&lt;span class="hx-absolute -hx-mt-20" id="google-support-建議">&lt;/span>
&lt;a href="#google-support-%e5%bb%ba%e8%ad%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>架構優化：未來可以評估用 CloudDNS 取代 kube-dns，CloudDNS 為託管服務，可以自動 scale up 來處理效能問題。&lt;a href="https://medium.com/google-cloud/dns-on-gke-everything-you-need-to-know-b961303f9153" target="_blank" rel="noopener">參考文件&lt;/a>&lt;/li>
&lt;li>監控：如果短期暫時無法替換 CloudDNS，建議可在 kube-dns 安裝 agent 做監控，當接近效能瓶頸時，可以提前 scale up kube-dns pod。&lt;a href="https://medium.com/@prageeshag/monitoring-kube-dns-pods-in-gke-83b76a0ef3d9" target="_blank" rel="noopener">非官方參考文件&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>後續規劃&lt;span class="hx-absolute -hx-mt-20" id="後續規劃">&lt;/span>
&lt;a href="#%e5%be%8c%e7%ba%8c%e8%a6%8f%e5%8a%83" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>但由於我們公司最近也在考慮 multi-cloud 的方案，所以暫時不考慮用 GCP 雲供應商的 CloudDNS 取代 kube-dns，我們想研究看看另一套 coreDNS 是否能夠解決這個問題。&lt;/p>
&lt;p>有興趣可以參考下一篇文章：&lt;a href="../kube-dns-vs-core-dns" >Kube DNS vs Core DNS&lt;/a>。&lt;/p>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>k8s dns 故障 Pod 无法解析主机名 Couldn‘t resolve host：&lt;a href="https://blog.csdn.net/hknaruto/article/details/109361342" target="_blank" rel="noopener">https://blog.csdn.net/hknaruto/article/details/109361342&lt;/a>&lt;/p>
&lt;p>Setting up NodeLocal DNSCache/Scaling up kube-dns：&lt;a href="https://cloud.google.com/kubernetes-engine/docs/how-to/nodelocal-dns-cache#scaling_up_kube-dns" target="_blank" rel="noopener">https://cloud.google.com/kubernetes-engine/docs/how-to/nodelocal-dns-cache#scaling_up_kube-dns&lt;/a>&lt;/p>
&lt;p>DNS on GKE: Everything you need to know：&lt;a href="https://medium.com/google-cloud/dns-on-gke-everything-you-need-to-know-b961303f9153" target="_blank" rel="noopener">https://medium.com/google-cloud/dns-on-gke-everything-you-need-to-know-b961303f9153&lt;/a>&lt;/p>
&lt;p>Monitoring kube-dns pods in GKE：&lt;a href="https://medium.com/@prageeshag/monitoring-kube-dns-pods-in-gke-83b76a0ef3d9" target="_blank" rel="noopener">https://medium.com/@prageeshag/monitoring-kube-dns-pods-in-gke-83b76a0ef3d9&lt;/a>&lt;/p></description></item><item><title>正式環境上踩到 StatefulSet 的雷，拿到 P1 的教訓</title><link>https://pin-yi.me/blog/kubernetes/k8s-statefulset-podmanagementpolicy/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/k8s-statefulset-podmanagementpolicy/</guid><description>
&lt;p>此文章要來記錄一下前陣子在公司的正式環境踩到 StatefulSet 的雷，事情是這樣的，我們有些服務，是使用 StatefulSet 來建置，至於為什麼不用 Deployment，這個說來話長 (也不是因為需要特定的 Pod 名稱、或是網路標記等等)，我們這邊先不討論，這個 StatefulSet 服務是 Nginx + PHP-FPM，為了避免流量進入到 processes 已經被用光的 Pod 中，我們在 StatefulSet 的 PHP Container 上有設定 readiness，readiness 的設定長得像以下：&lt;/p>
&lt;br>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">readinessProbe&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">exec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;/bin/bash&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;-c&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> CHECK_INFO=$(curl -s -w &amp;#39;http code:\t%{http_code}\n&amp;#39; 127.0.0.1/status)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> HTTP_CODE=$(echo -e &amp;#34;${CHECK_INFO}&amp;#34; | awk &amp;#39;/http code:/ {print $3}&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> IDLE_PROCESSES=$(echo -e &amp;#34;${CHECK_INFO}&amp;#34; | awk &amp;#39;/idle processes:/ {print $3}&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> [[ $HTTP_CODE -eq 200 &amp;amp;&amp;amp; $IDLE_PROCESSES -ge 10 ]] || exit 1&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我們會用 curl 來打 &lt;code>/status&lt;/code>，檢查回傳的 http code 是否為 200，以及 idle processes 是否大於等於 10，如果不符合，就會回傳 1，讓他被標記不健康，讓 Kubernetes 停止流量到不健康的容器，以確保流量被路由到其他健康的副本。&lt;/p>
&lt;br>
&lt;h2>問題&lt;span class="hx-absolute -hx-mt-20" id="問題">&lt;/span>
&lt;a href="#%e5%95%8f%e9%a1%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>當天遇到的情況是，我們上程式後，Pod 都一切正常，當流量開始進來後，發現 10 個 Pod 會開始偶發的噴 &lt;code>Readiness probe failed&lt;/code>，查看監控發現 processes 越來越低，最後被反應服務有問題，我們查看 Hpa 的紀錄的確有觸發到 40 個 Pod，只是查看 Pod 數還是依樣卡在 10 個，當下我們有嘗試使用調整 yaml 在 apply，發現 StatefulSet 的 yaml 也已經更新了，但 Pod 還是一樣卡在 10 個，也有使用 kubectl 下 &lt;code>kubectl scale sts [服務名稱] --replicas=0&lt;/code>，想要切換 Pod 數也沒有辦法。&lt;/p>
&lt;br>
&lt;p>當下我們有先 Call Google 的 Support 一起找原因，Google 是建議我們 readiness 的條件不要設的太嚴格，可以加上 &lt;code>timeoutSeconds: 秒數&lt;/code>，但對於 Pod 卡住，還是沒有找到原因，後來我們查了一下 StatefulSet 的文件發現，StatefulSet 有一個設定 &lt;code>podManagementPolicy&lt;/code>，預設是 &lt;code>OrderedReady&lt;/code>，他必須等待前面的 Pod 是 Ready 狀態，才會再繼續建立新的，也就是說我們的 StatefulSet 已經卡住，導致就算 Hpa 觸發要長到 40 個 Pod 也沒有用。&lt;/p>
&lt;br>
&lt;h2>解決辦法&lt;span class="hx-absolute -hx-mt-20" id="解決辦法">&lt;/span>
&lt;a href="#%e8%a7%a3%e6%b1%ba%e8%be%a6%e6%b3%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>當下想趕快解決 readiness 這個問題，調整 &lt;code>timeoutSeconds&lt;/code> 後，單純 apply 是沒有用的，要記得刪掉卡住的 Pod，讓他重新建立，才會套用新的設定 (但我們當下太在意為甚麼 Pod 會卡住，沒有想到要先把 readiness 問題修掉 xD，我們當下的解法是先將流量導到地端正常的服務上)。&lt;/p>
&lt;p>另外 Google 也說，假如我們還是必須使用 StatefulSet 來建立服務，建議我們把 podManagementPolicy 改成 &lt;code>Parallel&lt;/code>，它會有點像是 Deployment 的感覺，不會等待其他 Pod 變成 Ready 狀態，所以可以讓我們就算在 readiness 卡住的情況下，也可以自動擴縮服務。&lt;/p>
&lt;br>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;div class="hx-select-none hx-text-xl" style="font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">ℹ️&lt;/div>&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>StatefulSet podManagementPolicy 參數說明&lt;/p>
&lt;ul>
&lt;li>OrderedReady (預設)&lt;/li>
&lt;/ul>
&lt;p>Pods 會按照順序一個接一個地被創建。即，n+1 號 Pod 不會在 n 號 Pod 成功創建且 Ready 之前開始創建。
在縮小 StatefulSet 的大小時，Pods 會按照反向順序一個接一個地被終止。即，n 號 Pod 不會在 n+1 號 Pod 完全終止之前開始終止。
這確保了 Pods 的啟動和終止的順序性。&lt;/p>
&lt;br>
&lt;ul>
&lt;li>Parallel&lt;/li>
&lt;/ul>
&lt;p>所有 Pods 會同時地被創建或終止。
當 StatefulSet 擴展時，新的 Pods 會立即開始創建，不用等待其他 Pods 成為 Ready 狀態。
當縮小 StatefulSet 的大小時，要終止的 Pods 會立即開始終止，不用等待其他 Pods 先終止。
這種策略提供了快速的擴展和縮小操作，但缺乏順序性保證。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2>測試結果&lt;span class="hx-absolute -hx-mt-20" id="測試結果">&lt;/span>
&lt;a href="#%e6%b8%ac%e8%a9%a6%e7%b5%90%e6%9e%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>最後我們就使用兩種模式來測試看看，已下是測試結果(透過 P1 才知道的設定ＱＱ)：&lt;/p>
&lt;p>有將測試的 StatefulSet 放在 Github，&lt;a href="https://github.com/880831ian/k8s-statefulset-podmanagementpolicy" target="_blank" rel="noopener">可以點我查看&lt;/a> (可以調整 readinessProbe 的 httpGet.Path 故意把他用壞)&lt;/p>
&lt;br>
&lt;h3>使用 OrderedReady 模式&lt;span class="hx-absolute -hx-mt-20" id="使用-orderedready-模式">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8-orderedready-%e6%a8%a1%e5%bc%8f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>StatefulSet 在 podManagementPolicy 預設 OrderedReady 的模式，故意讓 readiness 卡住時 (Pod 卡住時)：&lt;/p>
&lt;ul>
&lt;li>當下的 StatefulSet 設定：&lt;/li>
&lt;/ul>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/1.webp"
alt="StatefulSet 設定" width="800">&lt;figcaption>
&lt;p>StatefulSet 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;ul>
&lt;li>Pod 狀態：&lt;/li>
&lt;/ul>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/2.webp"
alt="Pod 狀態" width="800">&lt;figcaption>
&lt;p>Pod 狀態&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>使用指令調整 Pod 數量&lt;span class="hx-absolute -hx-mt-20" id="使用指令調整-pod-數量">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8%e6%8c%87%e4%bb%a4%e8%aa%bf%e6%95%b4-pod-%e6%95%b8%e9%87%8f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們這時候下指令調整 Pod 數量，看看會發生什麼事：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl scale sts my-statefulset --replicas&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我們先看 StatefulSet 的 yaml 可以看到 Pod replicas 已經改變，也可以看 generation 有更新，代表 StatefulSet 本身有接收到調整設定的請求。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/3.webp"
alt="下指令調整後的 StatefulSet 設定" width="800">&lt;figcaption>
&lt;p>下指令調整後的 StatefulSet 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>看了一下 Pod 數量，也是一樣卡住，且 Pod 數量也沒有變化。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/4.webp"
alt="下指令調整後的 Pod 狀態" width="800">&lt;figcaption>
&lt;p>下指令調整後的 Pod 狀態&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>使用 yaml 調整 Pod 數量&lt;span class="hx-absolute -hx-mt-20" id="使用-yaml-調整-pod-數量">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8-yaml-%e8%aa%bf%e6%95%b4-pod-%e6%95%b8%e9%87%8f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們直接調整 StatefulSet yaml 的 Pod 數量，看看會發生什麼事：&lt;/p>
&lt;p>一樣我們先看 StatefulSet 的 yaml 可以看到 Pod replicas 已經改變(這裡應該切別的 Pod 數量，切回 3 個好像沒有意義 xD)，也可以看 generation 有更新。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/5.webp"
alt="使用 yaml 調整後的 StatefulSet 設定" width="800">&lt;figcaption>
&lt;p>使用 yaml 調整後的 StatefulSet 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>看了一下 Pod 數量，也是一樣卡住，且 Pod 數量也沒有變化。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/6.webp"
alt="使用 yaml 調整後的 Pod 狀態" width="800">&lt;figcaption>
&lt;p>使用 yaml 調整後的 Pod 狀態&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>所以代表在 OrderedReady 的模式下，Pod 卡住時，無法對 Pod 進行任何操作，必須要手動刪除卡住的 Pod 才吃得到最新的設定。&lt;/p>
&lt;br>
&lt;h3>使用 Parallel 模式&lt;span class="hx-absolute -hx-mt-20" id="使用-parallel-模式">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8-parallel-%e6%a8%a1%e5%bc%8f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>StatefulSet 在 podManagementPolicy Parallel 的模式，故意讓 readiness 卡住時 (Pod 卡住時)：&lt;/p>
&lt;ul>
&lt;li>當下的 StatefulSet 設定：&lt;/li>
&lt;/ul>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/7.webp"
alt="StatefulSet 設定" width="800">&lt;figcaption>
&lt;p>StatefulSet 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;ul>
&lt;li>Pod 狀態：&lt;/li>
&lt;/ul>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/8.webp"
alt="Pod 狀態" width="800">&lt;figcaption>
&lt;p>Pod 狀態&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>使用指令調整 Pod 數量&lt;span class="hx-absolute -hx-mt-20" id="使用指令調整-pod-數量-1">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8%e6%8c%87%e4%bb%a4%e8%aa%bf%e6%95%b4-pod-%e6%95%b8%e9%87%8f-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們這時候下指令調整 Pod 數量，看看會發生什麼事：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl scale sts my-statefulset --replicas&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我們先看 StatefulSet 的 yaml 可以看到 Pod replicas 已經改變，也可以看 generation 有更新，代表 StatefulSet 本身有接收到調整設定的請求。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/9.webp"
alt="下指令調整後的 StatefulSet 設定" width="800">&lt;figcaption>
&lt;p>下指令調整後的 StatefulSet 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>看了一下 Pod 數量，就算 my-statefulset-2 卡住，還是可以擴到 5 個 Pod。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/10.webp"
alt="下指令調整後的 Pod 狀態" width="800">&lt;figcaption>
&lt;p>下指令調整後的 Pod 狀態&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>使用 yaml 調整 Pod 數量&lt;span class="hx-absolute -hx-mt-20" id="使用-yaml-調整-pod-數量-1">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8-yaml-%e8%aa%bf%e6%95%b4-pod-%e6%95%b8%e9%87%8f-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們直接調整 StatefulSet yaml 的 Pod 數量，看看會發生什麼事：&lt;/p>
&lt;p>一樣我們先看 StatefulSet 的 yaml 可以看到 Pod replicas 已經改變，也可以看 generation 有更新。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/11.webp"
alt="使用 yaml 調整後的 StatefulSet 設定" width="800">&lt;figcaption>
&lt;p>使用 yaml 調整後的 StatefulSet 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>看了一下 Pod 數量，也不會管其他 Pod 是否 Ready，一樣可以縮小成 2 個 Pod。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/12.webp"
alt="使用 yaml 調整後的 Pod 狀態" width="800">&lt;figcaption>
&lt;p>使用 yaml 調整後的 Pod 狀態&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>結論&lt;span class="hx-absolute -hx-mt-20" id="結論">&lt;/span>
&lt;a href="#%e7%b5%90%e8%ab%96" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>後來我們重新檢查了一下為什麼 processes 會用完，結果發現是 RD 的程式邏輯，導致每筆 Request 必須等待前一筆 Request 做完，才會開始動作，讓 processes 一直被占用，沒辦法即時消化，導致 processes 用完，又加上服務是使用 StatefulSet，預設模式的 OrderedReady，必須等待前一個 Pod 是 Ready 才可以自動擴縮，所以當我們 Hpa 想要擴縮，來增加可用的 processes 數量，也因為沒辦法擴縮，最後導致這一連串的問題 😕。&lt;/p>
&lt;br>
&lt;p>另外，如果想要從 OrderedReady 模式切成 Parallel 模式 (反正過來也是)，必須先將原本的 StatefulSet 給刪除，才可以調整：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-statefulset-podmanagementpolicy/13.webp"
alt="OrderedReady 模式切成 Parallel 模式" width="800">&lt;figcaption>
&lt;p>OrderedReady 模式切成 Parallel 模式&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Kubernetes — 健康檢查：&lt;a href="https://medium.com/learn-or-die/kubernetes-%E5%81%A5%E5%BA%B7%E6%AA%A2%E6%9F%A5-59ee2a798115" target="_blank" rel="noopener">https://medium.com/learn-or-die/kubernetes-%E5%81%A5%E5%BA%B7%E6%AA%A2%E6%9F%A5-59ee2a798115&lt;/a>&lt;/p>
&lt;p>Pod Management Policies：&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies&lt;/a>&lt;/p></description></item><item><title>部署 Pod 遇到 container veth name provided (eth0) already exists 錯誤</title><link>https://pin-yi.me/blog/kubernetes/pod-veth-name-provided-eth0-already-exists/</link><pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/pod-veth-name-provided-eth0-already-exists/</guid><description>
&lt;p>此文章要來記錄一下公司同事在正式服務上遇到的問題，會詳細說明遇到事情的經過，以及開單詢問 google support 最後討論出的暫時解決的辦法：&lt;/p>
&lt;br>
&lt;p>簡單列出正式站當下服務環境：&lt;/p>
&lt;ul>
&lt;li>gke master version：1.25.10-gke.2700&lt;/li>
&lt;li>gke node version：1.25.8-gke.1000&lt;/li>
&lt;li>該問題發生的 node pool 有設定 taint&lt;/li>
&lt;li>發生問題的 Pod 是用 Statefulset 建立的服務&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>事情發生的經過&lt;span class="hx-absolute -hx-mt-20" id="事情發生的經過">&lt;/span>
&lt;a href="#%e4%ba%8b%e6%83%85%e7%99%bc%e7%94%9f%e7%9a%84%e7%b6%93%e9%81%8e" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ol>
&lt;li>RD 同仁反應，發現使用 Statefulset 建立的排程服務有問題，下 &lt;code>kubectl delete&lt;/code> 指令想要刪除 Pod，讓 Pod 重新長，卻卡在 Terminating，等待一段時間後，決定下 &lt;code>kubectl delete --force --grace-period=0&lt;/code> 來強制刪除 Pod，這時候狀態會卡在 ContainerCreating，使用 Describe 查看，會出現以下錯誤：&lt;/li>
&lt;/ol>
&lt;br>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;pre>&lt;code>Warning
(combined from similar events): Failed to create pod sandbox: rpo error: code = Unknown desc = failed to setup network for sandbox
&amp;#34;14fe0cd3d688aed4ffed4c36ffab1a145230449881bcbe4cac6478a63412b0c*: plugin type=*gke&amp;#34; failed (add): container veth name provided (etho) already exists&lt;/code>&lt;/pre>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>我們 SRE 協助查看後，也有嘗試去下 &lt;code>kubectl delete --force --grace-period=0&lt;/code> 來刪除 Pod，但還是一樣卡在 ContainerCreating，最後是先開一個新的 Node 並讓該 Pod 建立到新的 Node 上，才解決問題。為了方便 google support 協助檢查出問題的 Node，先將 Node 設定成 cordon，避免其他 Pod 被調度到該問題 node 上。&lt;/li>
&lt;/ol>
&lt;br>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>Node 設定成 cordon&lt;/p>
&lt;p>Node 可以設定 cordon、drain 和 delete 三個指定都會使 Node 停止被調度，只是每個的操作暴力程度不同：&lt;/p>
&lt;p>cordon：影響最小，只會將 Node 標示為 SchedulingDisabled 不可調度狀態，但不會影響到已經在該 Node 上的 Pod，使用 &lt;code>kubectl cordon [node name]&lt;/code> 來停止調度，使用 &lt;code>kubectl uncordon [node name]&lt;/code> 來恢復調度。&lt;/p>
&lt;p>drain：會先驅逐在 Node 上的 Pod，再將 Node 標示為 SchedulingDisabled 不可調度狀態，使用 &lt;code>kubectl drain [node name] --ignore-daemonsets --delete-local-data&lt;/code> 來停止調度，使用 &lt;code>kubectl uncordon [node name]&lt;/code> 來恢復調度。&lt;/p>
&lt;p>delete：會先驅逐 Node 上的 Pod，再刪除 Node 節點，它是一種暴力刪除 Node 的作法，在驅逐 Pod 時，會強制 Kill 容器進程，沒辦法優雅的終止 Pod。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="3">
&lt;li>我們隨後開單詢問 goolge support。&lt;/li>
&lt;/ol>
&lt;br>
&lt;h2>與 Google Support 討論內容&lt;span class="hx-absolute -hx-mt-20" id="與-google-support-討論內容">&lt;/span>
&lt;a href="#%e8%88%87-google-support-%e8%a8%8e%e8%ab%96%e5%85%a7%e5%ae%b9" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Google Support 經過查詢後，回覆說：這個問題是因為 Pod 被強制刪除導致，強制刪除是一種危險的操作，不建議這樣處理，下面有詳細討論。&lt;/p>
&lt;br>
&lt;ol>
&lt;li>
&lt;p>一開始卡在 Terminating 狀態，我們也有請 RD 說明一下當下遇到的問題以及處理動作：RD 當時想要刪除 Pod 是因為該程式當下有 Bug，將 redis 與 db 連線給關閉，程式找不到就會一直 retry，導致相關進程無法結束，再加上 terminationGracePeriodSeconds 我們設定 14400，也就是 4 小時，才會卡在 Terminating 狀態。
(terminationGracePeriodSeconds 設定這麼久是希望如果有被 on call，工程師上來時，可以查看該 Pod 的錯誤原因)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>因為卡在 Terminating 太久，RD 有執行 &lt;code>kubectl delete --force&lt;/code>，就是因為下了 &lt;code>--force&lt;/code> 才造成相關資源問題 (例如 container proccess, sandbox, 以及網路資源)沒有刪乾淨。所以引起了此次的報錯 &amp;ldquo;container veth name provided (eth0) already exists&amp;rdquo;。
(因為我們服務使用 Statefulset，Pod 名稱相同，導致 eth0 這個網路資源名稱重複，所以造成錯誤，可以用 deployment 來改善這個問題，只是資源如果沒有清理乾淨會佔用 IP，所以單純調整成 deployment 也不是最佳解)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Google 產品團隊建議，如果 Pod 處於 Running 狀態時，想要快速刪除 Pod 時，一開始就先使用 &lt;code>kubectl delete pod --grace-period=number[秒數]&lt;/code> 來刪除，如果已經是 Terminating 狀態則無效。(SRE 同仁已測試過，與 Google Support 說明相同)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>那如果已經處於 Terminating 狀態，要怎麽讓 Pod 被順利刪除，這部分 Google Support 後續會在測試並給出建議，目前測試是：進去卡住的 Pod Container，手動刪除主進程 (pkill) 就可以了。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/pod-veth-name-provided-eth0-already-exists/1.webp"
alt="Google Support 回覆" width="800">&lt;figcaption>
&lt;p>Google Support 回覆&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Node 節點禁止調度（平滑維護）方式- cordon，drain，delete：&lt;a href="https://www.cnblogs.com/kevingrace/p/14412254.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/14412254.html&lt;/a>&lt;/p></description></item><item><title>Kubernetes (K8s) 自定義 PHP HorizontalPodAutoscaler (HPA) 指標</title><link>https://pin-yi.me/blog/kubernetes/gcp-k8s-hpa-php-custom-metrics/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/gcp-k8s-hpa-php-custom-metrics/</guid><description>
&lt;p>此篇要介紹 HorizontalPodAutoscaler 的自定義指標，K8s 內建的指標 (metrics) 只支援 CPU 以及 Memory，如果我們今天想要使用其他的指標來讓 HPA 擴縮呢！？
不知道什麼是 HorizontalPodAutoscaler 嗎？可以先查看：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.pin-yi.me/k8s-hpa/" target="_blank" rel="noopener">Kubernetes (K8s) HorizontalPodAutoscaler (HPA) 原理與實作&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>這時候我們就必須使用自定義指標，我們一樣來說說他的工作原理吧：HorizontalPodAutoscaler 是怎麼取得自定義指標，以及是跟誰拿到指標的呢？我們從下圖得知：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/gcp-k8s-hpa-php-custom-metrics/1.webp"
alt="Kubernetes HPA : ExternalMetrics&amp;#43;Prometheus" width="400">&lt;figcaption>
&lt;p>&lt;a href="https://blog.kloia.com/kubernetes-hpa-externalmetrics-prometheus-acb1d8a4ed50" target="_blank" rel="noopener">Kubernetes HPA : ExternalMetrics+Prometheus&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>HorizontalPodAutoscaler 會先訪問 K8s 的 API，並向 API 取得指標資料。這邊的 API 就是 &lt;code>custom.k8s.io/v1beta1&lt;/code>。&lt;/p>
&lt;br>
&lt;p>大致了解後，我們就來進入今天的重點，也就是透過自定義化 PHP 的指標來讓 HorizontalPodAutoscaler 進行擴縮，這次使用的平台是 Google Cloud Platform，前面介紹 GCP 服務的大家可以參考 &lt;a href="https://blog.pin-yi.me/gcp-introduce/" target="_blank" rel="noopener">Google Cloud Platform (GCP) 百科全書 - 介紹與開頭 [ EP.0 ]&lt;/a>，我們這邊就直接跳到程式碼與操作部分。&lt;/p>
&lt;br>
&lt;p>此文章程式碼也會同步到 Github ，需要的也可以去 clone 使用歐！ &lt;a href="https://github.com/880831ian/gcp-k8s-hpa-php-custom-metrics" target="_blank" rel="noopener">Github 程式碼連結&lt;/a> 😆&lt;/p>
&lt;br>
&lt;h2>實作&lt;span class="hx-absolute -hx-mt-20" id="實作">&lt;/span>
&lt;a href="#%e5%af%a6%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>安裝自定義的 Adapter&lt;span class="hx-absolute -hx-mt-20" id="安裝自定義的-adapter">&lt;/span>
&lt;a href="#%e5%ae%89%e8%a3%9d%e8%87%aa%e5%ae%9a%e7%be%a9%e7%9a%84-adapter" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們要先 Apply 自定義的 Adapter，這邊我們使用 Google 提供的 Stackdriver Adapter 來使用 (也可以直接使用 Github 程式碼中的 adapter_new_resource_model.yaml 檔案歐)：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/k8s-stackdriver/master/custom-metrics-stackdriver-adapter/deploy/production/adapter_new_resource_model.yaml&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>Deployment&lt;span class="hx-absolute -hx-mt-20" id="deployment">&lt;/span>
&lt;a href="#deployment" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">php-fpm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">php:fpm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">workingDir&lt;/span>: &lt;span style="color:#ae81ff">/var/www/service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">9000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">100m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">memory&lt;/span>: &lt;span style="color:#ae81ff">1G&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">limits&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">100m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">memory&lt;/span>: &lt;span style="color:#ae81ff">1G&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMounts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">application&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/var/www/service/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">php-fpm-config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/usr/local/etc/php-fpm.d/www.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">subPath&lt;/span>: &lt;span style="color:#ae81ff">www.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">nginx:alpine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">workingDir&lt;/span>: &lt;span style="color:#ae81ff">/var/www/service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMounts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">application&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/var/www/service/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx-config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/etc/nginx/conf.d/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">phpfpm-exporter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">hipages/php-fpm_exporter:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">PHP_FPM_SCRAPE_URI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;tcp://localhost:9000/status&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">PHP_FPM_FIX_PROCESS_COUNT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">10m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">limits&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">10m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">prometheus-to-sd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">gcr.io/google-containers/prometheus-to-sd:v0.9.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">6060&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">/monitor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">stackdriver-prefix=custom.googleapis.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">monitored-resource-type-prefix=k8s_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">source=:http://localhost:9253&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">pod-id=$(POD_NAME)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">namespace-id=$(POD_NAMESPACE)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">10m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">limits&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">10m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">POD_NAME&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">valueFrom&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fieldRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fieldPath&lt;/span>: &lt;span style="color:#ae81ff">metadata.name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">POD_NAMESPACE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">valueFrom&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fieldRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fieldPath&lt;/span>: &lt;span style="color:#ae81ff">metadata.namespace&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">application&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">emptyDir&lt;/span>: {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">php-fpm-config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configMap&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">php-fpm-conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx-config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configMap&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx-conf&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我來簡單說明一下，這是一個 Deployment，我們在每一個 Pod 裡面都放 4 個 Container，分別是 &lt;code>php-fpm&lt;/code>、&lt;code>nginx&lt;/code>、&lt;code>phpfpm-exporter&lt;/code>、&lt;code>prometheus-to-sd&lt;/code>&lt;/p>
&lt;p>php-fpm 就是我們要使用的 php，nginx 會提供 9000 Port 讓 phpfpm-exporter 去抓到目前的 Process 數值，最後丟給 prometheus-to-sd，讓他去通知我們剛剛所安裝的 Adapter，就可以透過 API 讓 HPA 知道！聽不太懂嗎？沒關係，幫大家畫了一張圖，請參考下方圖片：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/gcp-k8s-hpa-php-custom-metrics/2.webp"
alt="架構圖" width="1200">&lt;figcaption>
&lt;p>架構圖&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>可以看到 Deployment 裡面，我們使用 ConfigMap 來掛載 php 的 www.conf 以及 nginx 的設定檔，那我們接下來就寫一份 ConfigMap 吧！&lt;/p>
&lt;br>
&lt;h3>ConfigMap&lt;span class="hx-absolute -hx-mt-20" id="configmap">&lt;/span>
&lt;a href="#configmap" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">php-fpm-conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">www.conf&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> [www]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> user = 900
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> group = 900
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> listen = 9000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> listen.owner = 900
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> listen.group = 900
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> listen.mode = 0660
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> pm = dynamic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> pm.max_children = 150
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> pm.max_requests = 300
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> pm.start_servers = 24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> pm.min_spare_servers = 24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> pm.max_spare_servers = 126
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> pm.status_path = /status
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ping.path = /ping
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ping.response = OK
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> catch_workers_output = yes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> request_terminate_timeout = 300
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> clear_env = no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx-conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">ian&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nginx.conf&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> server {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> listen 80;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> listen [::]:80;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> server_name _;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> root /var/www/service/;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> index index.php;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> location / {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> try_files $uri $uri/ /index.php$is_args$args;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> location ~ ^/(status|ping)$ {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> fastcgi_pass 127.0.0.1:9000;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> fastcgi_index index.php;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> include fastcgi_params;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這份 ConfigMap.yaml 檔案裡面分成 php-fpm-conf 來放 www.conf，以及 nginx-conf 來放 nginx.conf 檔案，這邊要注意的是 www.conf 記得要加上 &lt;code>pm.status_path = /status&lt;/code>，phpfpm-exporter 是透過這個頁面來獲得 Process 數量。&lt;/p>
&lt;br>
&lt;h3>HorizontalPodAutoscaler&lt;span class="hx-absolute -hx-mt-20" id="horizontalpodautoscaler">&lt;/span>
&lt;a href="#horizontalpodautoscaler" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">autoscaling/v2beta2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">HorizontalPodAutoscaler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">demo-hpa&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">scaleTargetRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">minReplicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">maxReplicas&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metrics&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Pods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pods&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metric&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">phpfpm_active_processes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">target&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">averageValue&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">AverageValue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Pods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pods&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metric&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">phpfpm_idle_processes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">target&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">averageValue&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">AverageValue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Pods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pods&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metric&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">phpfpm_total_processes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">target&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">averageValue&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">AverageValue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Pods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pods&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metric&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">phpfpm_accepted_connections&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">target&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">averageValue&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">AverageValue&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這份 HorizontalPodAutoscaler 我們使用的版本是 &lt;code>autoscaling/v2beta2&lt;/code>， v2beta1 跟 v2beta2 的設定檔語法有些不同！&lt;/p>
&lt;p>可以看到我們 &lt;code>metrics.pods.metric.name&lt;/code> 分別是 &lt;code>phpfpm_active_processes (活動的進程個數)&lt;/code>、&lt;code>phpfpm_idle_processes (空閒的進程個數)&lt;/code>、&lt;code>phpfpm_total_processes (總共的進程個數)&lt;/code>、&lt;code>phpfpm_accepted_connections (當前的連接數量)&lt;/code>，如果超過我們所設定的 target 值，HPA 就會作動。&lt;/p>
&lt;br>
&lt;p>我們依序把 Deployment &amp;gt; ConfigMap &amp;gt; HorizontalPodAutoscaler 的 yaml 檔案給 Apply，可以觀察一下 Pod 是否都有正常啟動：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/gcp-k8s-hpa-php-custom-metrics/3.webp"
alt="Pod 是否正常啟動" width="1200">&lt;figcaption>
&lt;p>Pod 是否正常啟動&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們到 HorizontalPodAutoscaler 查看我們所設定的 metrics 是否都有抓到目前的值：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/gcp-k8s-hpa-php-custom-metrics/4.webp"
alt="metrics 是否都有抓到目前的值" width="550">&lt;figcaption>
&lt;p>metrics 是否都有抓到目前的值&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們也可以用 Google Cloud Platform 的監控來查看：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/gcp-k8s-hpa-php-custom-metrics/5.webp"
alt="Google Cloud Platform 的監控" width="1200">&lt;figcaption>
&lt;p>Google Cloud Platform 的監控&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>以上就完成 自定義 HorizontalPodAutoscaler 指標囉～ 😍&lt;/p>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Autoscaling Deployments with Cloud Monitoring metric：&lt;a href="https://cloud.google.com/kubernetes-engine/docs/tutorials/autoscaling-metrics#custom-prometheus_1" target="_blank" rel="noopener">https://cloud.google.com/kubernetes-engine/docs/tutorials/autoscaling-metrics#custom-prometheus_1&lt;/a>&lt;/p>
&lt;p>GoogleCloudPlatform/k8s-stackdriver：&lt;a href="https://github.com/GoogleCloudPlatform/k8s-stackdriver/tree/master/custom-metrics-stackdriver-adapter" target="_blank" rel="noopener">https://github.com/GoogleCloudPlatform/k8s-stackdriver/tree/master/custom-metrics-stackdriver-adapter&lt;/a>&lt;/p>
&lt;p>hipages/php-fpm_exporter：&lt;a href="https://github.com/hipages/php-fpm_exporter" target="_blank" rel="noopener">https://github.com/hipages/php-fpm_exporter&lt;/a>&lt;/p>
&lt;p>Scaling PHP-FPM with custom metrics on GKE/kubernetes：&lt;a href="https://www.ashsmith.io/scaling-phpfpm-with-custom-metrics-gke" target="_blank" rel="noopener">https://www.ashsmith.io/scaling-phpfpm-with-custom-metrics-gke&lt;/a>&lt;/p></description></item><item><title>Kubernetes (K8s) HorizontalPodAutoscaler (HPA) 原理與實作</title><link>https://pin-yi.me/blog/kubernetes/k8s-hpa/</link><pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/k8s-hpa/</guid><description>
&lt;p>此篇是要介紹 HorizontalPodAutoscaler (HPA) 的原理以及實作內容，那我們先來說明一下 HorizontalPodAutoscaler 是什麼吧！&lt;/p>
&lt;br>
&lt;h2>HorizontalPodAutoscaler 原理&lt;span class="hx-absolute -hx-mt-20" id="horizontalpodautoscaler-原理">&lt;/span>
&lt;a href="#horizontalpodautoscaler-%e5%8e%9f%e7%90%86" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>HorizontalPodAutoscaler (HPA) 中文可以叫水平 Pod 自動擴縮，他會自動更新工作負載資源 (Deployment 或 StatefulSet)，其目的是透過自動擴縮工作負載來滿足使用需求。&lt;/p>
&lt;p>簡單來說他會根據你現在的負載去調整你的 Pod 數量，當目前的負載超過配置的設定時，HPA 會指示工作負載資源 (Deployment 或 StatefulSet) 擴增，來避免塞爆同一個負載資源。&lt;/p>
&lt;p>如果負載減少，且 Pod 數量高於配置的最小值，HPA 也會指示工作負載資源 (Deployment 或 StatefulSet) 慢慢縮減。其中水平 Pod 自動擴縮不適用 DaemonSet 工作負載資源。&lt;/p>
&lt;br>
&lt;h3>HPA 是如何工作呢？&lt;span class="hx-absolute -hx-mt-20" id="hpa-是如何工作呢">&lt;/span>
&lt;a href="#hpa-%e6%98%af%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c%e5%91%a2" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/1.webp"
alt="HorizontalPodAutoscaler 工作流程圖" width="650">&lt;figcaption>
&lt;p>HorizontalPodAutoscaler 工作流程圖&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>Kubernetes 將水平 Pod 自動擴縮定義為一個間歇運行的控制迴路，他不是連續的，其間隔是由 &lt;code>kube-controller-manager&lt;/code> 的 &lt;code>--horizontal-pod-autoscaler-sync-period&lt;/code> 參數來配置，預設是 15 秒，controller-manager 會依據每一個 HPA 定義的 &lt;code>scaleTargetRef&lt;/code> 來找到是哪一個工作負載資源需要進行水平 Pod 自動擴縮，然後根據目標資源的 &lt;code>.spec.selector&lt;/code> 標籤選擇對應的 Pod，並從資源指標 API 或自定義指標獲取 API，目前總共有三種的資源指標，分別是 CPU、Memory、自定義指標。&lt;/p>
&lt;br>
&lt;br>
&lt;p>有關於其他 Kubernetes 觀念部分，可以先查看：&lt;/p>
&lt;ul>
&lt;li>Kubernetes : &lt;a href="https://pin-yi.me/k8s/" target="_blank" rel="noopener">Kubernetes (K8s) 介紹 - 基本&lt;/a>&lt;/li>
&lt;li>kubernetes : &lt;a href="https://pin-yi.me/k8s-advanced/" target="_blank" rel="noopener">Kubernetes (K8s) 介紹 - 進階 (Service、Ingress、StatefulSet、Deployment、ReplicaSet、ConfigMap)&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>此文章程式碼也會同步到 Github ，需要的也可以去 clone 使用歐！要記得先確定一下自己的版本 &lt;a href="https://github.com/880831ian/Kubernetes-HPA" target="_blank" rel="noopener">Github 程式碼連結&lt;/a> 😆&lt;/p>
&lt;br>
&lt;h2>版本資訊&lt;span class="hx-absolute -hx-mt-20" id="版本資訊">&lt;/span>
&lt;a href="#%e7%89%88%e6%9c%ac%e8%b3%87%e8%a8%8a" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ul>
&lt;li>macOS：11.6&lt;/li>
&lt;li>Minikube：v1.25.2&lt;/li>
&lt;li>Kubectl：Client Version：v1.24.1、Server Version：v1.23.3&lt;/li>
&lt;li>Metrics Server &lt;a href="https://github.com/kubernetes-sigs/metrics-server/releases/tag/metrics-server-helm-chart-3.8.2" target="_blank" rel="noopener">3.8.2&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>實作&lt;span class="hx-absolute -hx-mt-20" id="實作">&lt;/span>
&lt;a href="#%e5%af%a6%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>這次實作要使用的叢集是 Minikube，所以照以前文章一樣，我們先啟動 Minikube。本次會使用 K8s 的管理工具：&lt;a href="https://k8slens.dev/" target="_blank" rel="noopener">k8slens&lt;/a> 來做為輔助，大家有興趣也可以先去下載來使用歐 😘&lt;/p>
&lt;h3>啟動 Minikube 叢集&lt;span class="hx-absolute -hx-mt-20" id="啟動-minikube-叢集">&lt;/span>
&lt;a href="#%e5%95%9f%e5%8b%95-minikube-%e5%8f%a2%e9%9b%86" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>啟動 Minikube 叢集&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>minikube start --vm-driver&lt;span style="color:#f92672">=&lt;/span>docker&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/2.webp"
alt="啟動 Minikube" width="800">&lt;figcaption>
&lt;p>啟動 Minikube&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>設定 Metrics Server&lt;span class="hx-absolute -hx-mt-20" id="設定-metrics-server">&lt;/span>
&lt;a href="#%e8%a8%ad%e5%ae%9a-metrics-server" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>由於我們 HorizontalPodAutoscaler 會根據現在的負載來判斷是否要新增新的 Pod 來解決負載資源用完的問題，所以第一個條件就是要先獲的目前的負載資源使用量，這時候我們必須先在 K8s 叢集上安裝 &lt;code>Metrics Server&lt;/code>，透過他讓我們可以知道目前的負載使用量！&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>先到 &lt;a href="https://github.com/kubernetes-sigs/metrics-server" target="_blank" rel="noopener">kubernetes-sigs/metrics-server&lt;/a> 下載最新的 components.yaml 檔案下來，以我這次示範的版本為例，&lt;a href="https://github.com/kubernetes-sigs/metrics-server/releases/tag/metrics-server-helm-chart-3.8.2" target="_blank" rel="noopener">大家可以點我下載 👇&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下載完，需要先修改兩個地方，才能 apply 到 Minikube 叢集，第一個是修改 &lt;code>kubelet-preferred-address-types=InternalIP&lt;/code>，以及新增 &lt;code>kubelet-insecure-tls=ture&lt;/code> 讓 Metrics Server 禁用 TLS 證書驗證，詳細可以參考以下照片：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/3.webp"
alt="修改 components.yaml" width="1200">&lt;figcaption>
&lt;p>修改 components.yaml&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol start="4">
&lt;li>接著 apply 這個 yaml 檔案：&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/4.webp"
alt="apply components.yaml" width="800">&lt;figcaption>
&lt;p>apply components.yaml&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>可以檢查一下 deployment.apps/metrics-server 是否有成功建立或是 Pod 是否有問題：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/5.webp"
alt="檢查 metrics-server 是否有問題" width="1200">&lt;figcaption>
&lt;p>檢查 metrics-server 是否有問題&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>開始撰寫實作檔案&lt;span class="hx-absolute -hx-mt-20" id="開始撰寫實作檔案">&lt;/span>
&lt;a href="#%e9%96%8b%e5%a7%8b%e6%92%b0%e5%af%ab%e5%af%a6%e4%bd%9c%e6%aa%94%e6%a1%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol start="5">
&lt;li>接著我們就依照官方的 &lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/" target="_blank" rel="noopener">HorizontalPodAutoscaler Walkthrough&lt;/a> 的文章開始囉！首先先寫一個 index.php，這個檔案是用於後續測試 HPA 負載使用量的程式：&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/6.webp"
alt="index.php" width="500">&lt;figcaption>
&lt;p>index.php&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol start="6">
&lt;li>新增 Dockerfile，我們使用 php:5-apache 的 image，並複製剛剛寫的 index.php 到容器內：&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/7.webp"
alt="Dockerfile" width="500">&lt;figcaption>
&lt;p>Dockerfile&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol start="7">
&lt;li>將該 Dockerfile Build 起來，推到 DockerHub 上，這部分就不多說明，有興趣可以參考以前文章，大家可以直接使用 &lt;a href="https://hub.docker.com/repository/docker/880831ian/php-apache" target="_blank" rel="noopener">880831ian/php-apache&lt;/a> 我推好的 image 來使用。&lt;/li>
&lt;li>新增 Deployment.yaml，裡面會使用我們剛剛打包推到 DockerHub 上的 image：&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">php-apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">php-apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">php-apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">php-apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">880831ian/php-apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">limits&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">500m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">200m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">php-apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">php-apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">php-apache&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這邊大家可以先記得我們在 containers.resources 有設定 cpu 的 requests 為 200m。後續在計算副本數時會再提到 😬&lt;/p>
&lt;br>
&lt;ol start="9">
&lt;li>最後將 Deployment.yaml 給 apply，檢查一下是否有正常啟動：&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/8.webp"
alt="k8slens 檢查是否正常" width="1200">&lt;figcaption>
&lt;p>k8slens 檢查是否正常&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol start="10">
&lt;li>使用 &lt;code>kubectl autoscale&lt;/code> 來幫助我們創建 HorizontalPodAutoscaler：&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl autoscale deployment php-apache --cpu-percent&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">50&lt;/span> --min&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> --max&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">我們在 Deployment.yaml 裡面 &lt;code>containers.resources&lt;/code> 有設定 cpu 的 requests 是 200m，也就是 200 milli-cores，當我們現在設定 HPA 的平均 CPU 使用率為 50%，所以我們只要超過 200m / 2 = 100m，也就是 requests 超過 100 milli-cores 就會產生新的 Pod。這邊最少 Pod 為 1，最多為 10。後續等測試時，會帶大家計算他是如何產生 Pod 的 😏&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="11">
&lt;li>查看目前 HPA 使用量，因為我們這個 php-apache 還沒有任何的訪問，所以是 0% / 50% (承上面所說，所以這邊的值是 0 / 100 milli-cores)，後面也可以看到我們所設定最高跟最低的 Pod，以及目前的副本數。&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/9.webp"
alt="查看目前 HPA 使用量" width="700">&lt;figcaption>
&lt;p>查看目前 HPA 使用量&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol start="12">
&lt;li>當然我們除了用剛剛的指令以外，我們也可以自己寫 HPA 的 yaml 檔案。我這邊先使用 &lt;code>kubectl get hpa php-apache -o yaml &amp;gt; hpa.yaml&lt;/code> 來將剛剛用指令 run 起來的 HPA 變成 yaml 檔，我們來看看裡面有哪些內容吧：&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">autoscaling/v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">HorizontalPodAutoscaler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2022-07-12T03:16:11Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">php-apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;19454&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">dde68e68-9b6e-46a8-b50f-5525b8ec3bdf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">maxReplicas&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metrics&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">resource&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">cpu&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">target&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">averageUtilization&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Utilization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">minReplicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">scaleTargetRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">php-apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">後面狀態省略....&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>apiVersion：要記得使用 &lt;code>autoscaling/v2&lt;/code>&lt;/li>
&lt;li>kind：HorizontalPodAutoscaler&lt;/li>
&lt;li>maxReplicas：是我們剛剛用指令的最大 Pod 副本數&lt;/li>
&lt;li>metrics：我們指標設定 cpu resource，其設定平均使用率為 50 % (百分比)&lt;/li>
&lt;li>minReplicas：剛剛用指令的最小 Pod 副本數&lt;/li>
&lt;li>scaleTargetRef：設定我們這個 HPA 是依照 php-apache 這個 Deployment。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>測試 HPA&lt;span class="hx-absolute -hx-mt-20" id="測試-hpa">&lt;/span>
&lt;a href="#%e6%b8%ac%e8%a9%a6-hpa" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ol>
&lt;li>接下來我們都設定好後，我們要來模擬增加負載，看看 HPA 的後續動作，首先我們先使用以下指令來持續觀察 HPA：&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get hpa php-apache --watch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>php-apache Deployment/php-apache 0%/50% &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> 4h40m&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="2">
&lt;li>以及執行以下指令，該指令是建一個新的 Pod，由新的 Pod 無限循環的去向 php-apahe 服務發出請求&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl run -i --tty load-generator --rm --image&lt;span style="color:#f92672">=&lt;/span>busybox:1.28 --restart&lt;span style="color:#f92672">=&lt;/span>Never -- /bin/sh -c &lt;span style="color:#e6db74">&amp;#34;while sleep 0.01; do wget -q -O- http://php-apache; done&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/10.webp"
alt="模擬增加負載" width="800">&lt;figcaption>
&lt;p>模擬增加負載&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol start="3">
&lt;li>我們使用 k8slens 觀察，會發現當負載使用量超過我們前面所設定的 50%，也就是 100 milli-cores 時，他就會自動長新的 Pod 出來：&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/11.webp"
alt="HPA 自動長 Pod" width="1100">&lt;figcaption>
&lt;p>HPA 自動長 Pod&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ol start="4">
&lt;li>我們切回去看觀察 HPA 指令 &lt;code>kubectl get hpa php-apache --watch&lt;/code>：&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/12.webp"
alt="觀察 HPA" width="800">&lt;figcaption>
&lt;p>觀察 HPA&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>我們剛剛有說超過 50%，也就是 100 milli-cores 時，會長新的 Pod。我們以上面圖片的來說明，來計算期望需要幾個副本?&lt;/p>
&lt;p>官方有提供一個公式： &lt;code>期望副本数 = ceil[目前副本数 * (目前指標 / 期望指標)]&lt;/code> ，可以看到我們負載從 0% 從到 250%，也就是我們實際上是從 0 變成 500 milli-cores (250 / 50 _ 100 )。我們將值帶入公式內，&lt;code>目前的副本：1 _ (目前指標：500 / 期望指標是：100)&lt;/code>得出來的值是 5，如果有小數，因為前面有&lt;code>ceil&lt;/code>，所以會取整數(不可能開半個 Pod 對吧 🙄)，最後以這個例子來說，最終得到的 &lt;code>期望副本数 = 5&lt;/code>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ol start="5">
&lt;li>根據我們計算出來的副本數，他就會依照計算結果，幫我們自動生成該數量的 Pod，來減緩同一個 Pod 的負載量，接著我們先中斷測試指令，再繼續觀察 HPA ：&lt;/li>
&lt;/ol>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/13.webp"
alt="觀察 HPA" width="700">&lt;figcaption>
&lt;p>觀察 HPA&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>可以發現因為我們將測試指令中斷後，負載使用量會慢慢降低，但負載降低後，副本數不會馬上變回去，因為怕如果又有大量的使用量會導致 Pod 來不及長出來，所以預設是 &lt;code>5 分鐘 (--horizontal-pod-autoscaler-downscale-stabilization)&lt;/code> 才會減至原來的 Pod 數量&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-hpa/14.webp"
alt="Pod 自動減少" width="1100">&lt;figcaption>
&lt;p>Pod 自動減少&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>常見問題及解決辦法&lt;span class="hx-absolute -hx-mt-20" id="常見問題及解決辦法">&lt;/span>
&lt;a href="#%e5%b8%b8%e8%a6%8b%e5%95%8f%e9%a1%8c%e5%8f%8a%e8%a7%a3%e6%b1%ba%e8%be%a6%e6%b3%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;div class="hx-select-none hx-text-xl" style="font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">ℹ️&lt;/div>&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>Q1 . 出現 x509: cannot validate certificate for 192.168.XXX.XXX because it doesn’t contain any IP SANs 錯誤&lt;/p>
&lt;p>Ans 1：是因爲沒有加入 &lt;code>kubelet-insecure-tls=ture&lt;/code> 讓 Metrics Server 禁用 TLS 證書驗證，才導致錯誤發生。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Horizontal Pod Autoscaling：&lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&lt;/a>&lt;/p>
&lt;p>HorizontalPodAutoscaler Walkthrough：&lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/&lt;/a>&lt;/p></description></item><item><title>用大型社區來介紹 Kubernetes 元件</title><link>https://pin-yi.me/blog/kubernetes/k8s-plain/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/k8s-plain/</guid><description>
&lt;p>前陣子對於 Kubernetes 部分內容還不是很清楚，在網路上閒逛的時候發現一篇很有趣的文章，標題是 『 &lt;a href="https://blog.pichuang.com.tw/20210111-Kubernetes-for-sales-and-marketing/#%E4%B8%AD%E7%BF%BB%E4%B8%AD%E7%9A%84-Kubernetes-%E7%B5%84%E4%BB%B6%E4%BB%8B%E7%B4%B9" target="_blank" rel="noopener">給行銷跟業務的 Kubernetes 101 中翻中介紹&lt;/a> 』，點進去後才發現，作者 &lt;a href="https://blog.pichuang.com.tw/about/" target="_blank" rel="noopener">Phil Huang&lt;/a> 將 Kubernetes 元件的內容用大型住戶社區來介紹，讓我更清楚每一個元件的意思，以下我會用我理解的以及作者的思考邏輯來去寫這篇筆記，再次感謝作者文章 😍&lt;/p>
&lt;br>
&lt;h2>Kubernetes 元件白話文&lt;span class="hx-absolute -hx-mt-20" id="kubernetes-元件白話文">&lt;/span>
&lt;a href="#kubernetes-%e5%85%83%e4%bb%b6%e7%99%bd%e8%a9%b1%e6%96%87" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-plain/1.webp"
alt="大型社區示意圖 (圖片來源：蘋果地產)" width="550">&lt;figcaption>
&lt;p>大型社區示意圖 (圖片來源：&lt;a href="https://tw.feature.appledaily.com/house/news/article/205878" target="_blank" rel="noopener">蘋果地產&lt;/a>)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>可以看到上面這張圖片，他是一個很典型的大型社區，我們這次的 Kubernetes 元件白話文，會以大型社區來當作現實中的元件，以社區的例子來說明 Kubernetes 。&lt;/p>
&lt;br>
&lt;p>當然，我們之前的文章也有介紹過 Kubernetes，有興趣可以先飛回去看看！&lt;/p>
&lt;p>&lt;a href="https://pin-yi.me/blog/kubernetes/k8s/" >Kubernetes (K8s) 介紹 - 基本&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://pin-yi.me/blog/kubernetes/k8s-advanced/" >Kubernetes (K8s) 介紹 - 進階 (Service、Ingress、StatefulSet、Deployment、ReplicaSet、ConfigMap)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://pin-yi.me/blog/kubernetes/k8s-efk/" >Kubernetes (K8s) 搭配 EFK 實作 (Deployment、StatefulSet、DaemonSet)&lt;/a>&lt;/p>
&lt;p>我們先想像一下我們建立 Kubernetes 完整的叢集服務，就好比是建立一個大型的社區，所以以下會將名詞與社區來做連結，那．．．開始囉！&lt;/p>
&lt;br>
&lt;h3>Kubernetes 元件&lt;span class="hx-absolute -hx-mt-20" id="kubernetes-元件">&lt;/span>
&lt;a href="#kubernetes-%e5%85%83%e4%bb%b6" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>Kubernetes：建立這個大型社區的藍圖，規劃的社區內的大大小小的設計。&lt;/li>
&lt;li>虛擬化平台、公有雲平台、實體機器：就是我們要蓋社區的地皮。(虛擬化平台：vSphere/Proxmox/VMware、公有雲平台：AWS/GCP/Azuer、實體機器：就是實體機器 😂)&lt;/li>
&lt;li>OS 作業系統：每棟大樓的骨架和地基。&lt;/li>
&lt;li>Master Node：住戶管委會所居住大樓 (真好自己有所屬的大樓ＸＤ)，為了保證他們不會吵架，所以建議最少需要三棟。&lt;/li>
&lt;li>Etcd Cluster：管委會的人，一樣為了怕一黨獨大(?，所以建議最少需要有三位管委，且互相投票選出一個頭頭。&lt;/li>
&lt;li>Worker Node：就是偶們住戶所居住的大樓。&lt;/li>
&lt;li>Pod：住戶，所以我們一棟 Worker Node 大樓，可以有很多 Pod 住戶。&lt;/li>
&lt;li>Pod IP：每個住戶的門牌，既然是門牌，代表他也不會重複。&lt;/li>
&lt;li>Container Registry：包裹集中的存放中心。&lt;/li>
&lt;li>Container Images：還沒有被打開的包裹。&lt;/li>
&lt;li>Containers：已經被打開且正在使用的包裹，那每個 Pod 住戶裡面，可以有一個或很多個以上的 Containers 包裹。&lt;/li>
&lt;li>Service：社區裡面的社團，例如：羽球社、麻將社等等，可以集合大家的地方。&lt;/li>
&lt;li>Service Mesh：社團的聯絡名冊，會記住誰是哪一個社團的成員。&lt;/li>
&lt;li>Ingress Controller：社區的大門，可以指定讓社區成員都固定走同一個或是多個門的入口管控。&lt;/li>
&lt;li>Egress Controller：社區的後門，可以指定讓社區成員都固定走同一個或是多個門的出口管控。&lt;/li>
&lt;li>Internal DNS / Service Discovery：大樓住戶的電話簿。&lt;/li>
&lt;li>External DNS：指向各大樓的路標。&lt;/li>
&lt;li>OCI (Open Container Initiative)：制定大樓鋼筋水泥或是行李箱標準的組織。&lt;/li>
&lt;li>CRI (Container Runtime Interface)：大樓鋼筋水泥的廠商。&lt;/li>
&lt;li>CNI (Container Network Interface)：大樓水電系統的廠商。&lt;/li>
&lt;li>CSI (Container Storage Interface)：大樓空間規劃的廠商。&lt;/li>
&lt;li>Bastion：專門維護社區的工程車。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>常用套件&lt;span class="hx-absolute -hx-mt-20" id="常用套件">&lt;/span>
&lt;a href="#%e5%b8%b8%e7%94%a8%e5%a5%97%e4%bb%b6" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>Promethus：社區整體的監控中心 (Meterics)，一堆攝影機的管理室 XD&lt;/li>
&lt;li>Grafana：監控中心裡面大型的 LED 儀表板。&lt;/li>
&lt;li>Elaticsearch：社區整體的情資中心 (Logging)，這應該是一群愛八卦的大媽吧 😏&lt;/li>
&lt;li>Kibana：情資中心裡面大型的 LED 訊息版。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>常見問題&lt;span class="hx-absolute -hx-mt-20" id="常見問題">&lt;/span>
&lt;a href="#%e5%b8%b8%e8%a6%8b%e5%95%8f%e9%a1%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>作者也有整理了一些常見的問題，我把它整理一下挑選出幾個我自己一開始也會有疑問的問題，我們一起來看看吧！一樣我會用我所理解的意思來介紹 ~&lt;/p>
&lt;h3>Q1：為什麼 Kubernetes 的最小單位是 Pod 這個要怎麼理解？&lt;span class="hx-absolute -hx-mt-20" id="q1為什麼-kubernetes-的最小單位是-pod-這個要怎麼理解">&lt;/span>
&lt;a href="#q1%e7%82%ba%e4%bb%80%e9%ba%bc-kubernetes-%e7%9a%84%e6%9c%80%e5%b0%8f%e5%96%ae%e4%bd%8d%e6%98%af-pod-%e9%80%99%e5%80%8b%e8%a6%81%e6%80%8e%e9%ba%bc%e7%90%86%e8%a7%a3" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Ans ： 試想一下，難道管委會會管你的包裹裡面內容物放什麼嗎 XD&lt;/p>
&lt;br>
&lt;h3>Q2：Docker 在 Kubernetes 的角色是什麼？&lt;span class="hx-absolute -hx-mt-20" id="q2docker-在-kubernetes-的角色是什麼">&lt;/span>
&lt;a href="#q2docker-%e5%9c%a8-kubernetes-%e7%9a%84%e8%a7%92%e8%89%b2%e6%98%af%e4%bb%80%e9%ba%bc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Ans ： 是眾多的 CRI (Container Runtime Interface) 選擇之一，也就是大樓的鋼筋水泥廠商有很多間，有一間叫做 Docker 的廠商特別有名。&lt;/p>
&lt;br>
&lt;h3>Q3：呈上，那 CRI/CNI/CSI 是不是也可以替換成其他的廠商？&lt;span class="hx-absolute -hx-mt-20" id="q3呈上那-cricnicsi-是不是也可以替換成其他的廠商">&lt;/span>
&lt;a href="#q3%e5%91%88%e4%b8%8a%e9%82%a3-cricnicsi-%e6%98%af%e4%b8%8d%e6%98%af%e4%b9%9f%e5%8f%af%e4%bb%a5%e6%9b%bf%e6%8f%9b%e6%88%90%e5%85%b6%e4%bb%96%e7%9a%84%e5%bb%a0%e5%95%86" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Ans ： 當然可以，現在可以看到越來越多廠商都開始支援 Kubernetes 就是因為這個原因，因為一般情況下，Kubernetes 並不會特別限定 &lt;code>大樓鋼筋水泥廠商&lt;/code>、&lt;code>大樓水電系統廠商&lt;/code>、&lt;code>大樓空間規劃廠商&lt;/code>，只要有符合特定的標準即可，但要留意 Kubernetes 的版號也會受到這三個介面支援發行的版號所影響，要留意相容性的問題！&lt;/p>
&lt;br>
&lt;h3>Q4：整個住戶社區最重要的角色是什麼？&lt;span class="hx-absolute -hx-mt-20" id="q4整個住戶社區最重要的角色是什麼">&lt;/span>
&lt;a href="#q4%e6%95%b4%e5%80%8b%e4%bd%8f%e6%88%b6%e7%a4%be%e5%8d%80%e6%9c%80%e9%87%8d%e8%a6%81%e7%9a%84%e8%a7%92%e8%89%b2%e6%98%af%e4%bb%80%e9%ba%bc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Ans ： 那三棟管委會大樓，和裡面的的三位委員，三位掛掉一位還可以維持正常運作，掛掉兩位會維持唯獨運作。&lt;/p>
&lt;br>
&lt;h3>Q5：Kubernetes、VM、Container 的差異性&lt;span class="hx-absolute -hx-mt-20" id="q5kubernetesvmcontainer-的差異性">&lt;/span>
&lt;a href="#q5kubernetesvmcontainer-%e7%9a%84%e5%b7%ae%e7%95%b0%e6%80%a7" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Ans ： 我們可以建立好一個大樓(VM)，隨意放置一個或是多個包裹(Containers)，必須手動管理這些包裹，如果資源不足或是這棟大樓倒了，就沒有辦法自動轉移這些包裹的內容了。&lt;/p>
&lt;p>但如果是 Kubernetes，我們就可以建立多個大樓(VM)，透過 Kubernetes 所規定的放置計畫 (例如：Deployment、DaemonSet)，我們將可以統一調度這些 Pod，當某棟大樓資源不夠或是這棟大樓倒時，可以根據 Kubernetes 規則來進行搬遷或是擴充大樓。&lt;/p>
&lt;br>
&lt;h3>Q6：為什麼有人會把 Container 跟 Pod 混在一起講&lt;span class="hx-absolute -hx-mt-20" id="q6為什麼有人會把-container-跟-pod-混在一起講">&lt;/span>
&lt;a href="#q6%e7%82%ba%e4%bb%80%e9%ba%bc%e6%9c%89%e4%ba%ba%e6%9c%83%e6%8a%8a-container-%e8%b7%9f-pod-%e6%b7%b7%e5%9c%a8%e4%b8%80%e8%b5%b7%e8%ac%9b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Ans ： 因為大部分的情況下，都是一個住戶(Pod)放一個包裹(Container)，，才會導致這樣的誤會。但實際上，一個住戶(Pod)是可以放一個或多個包裹在裡面的！&lt;/p>
&lt;br>
&lt;h3>Q7：什麼是 Node Scaling ?&lt;span class="hx-absolute -hx-mt-20" id="q7什麼是-node-scaling-">&lt;/span>
&lt;a href="#q7%e4%bb%80%e9%ba%bc%e6%98%af-node-scaling-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Ans ： 可以把它理解成，當住戶太多時，Kubernetes 會自動或手動興建大樓，來把多出來的用戶給塞進去。&lt;/p>
&lt;br>
&lt;h3>Q8：在 Q5 有提到放置計畫是什麼意思？&lt;span class="hx-absolute -hx-mt-20" id="q8在-q5-有提到放置計畫是什麼意思">&lt;/span>
&lt;a href="#q8%e5%9c%a8-q5-%e6%9c%89%e6%8f%90%e5%88%b0%e6%94%be%e7%bd%ae%e8%a8%88%e7%95%ab%e6%98%af%e4%bb%80%e9%ba%bc%e6%84%8f%e6%80%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Ans ： 只要你有需要將包裹放在社區內，都必須提出部署計畫(Deployment) 給管委會審核，只要通過審核，他們依照你事先聲明的計畫，盡最大可能性來放置包裹。&lt;/p>
&lt;p>所以當我們有任何變更計畫時，都需要重新提交一份新的部署計畫給管委會重新審核和接受。&lt;/p>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;a href="https://blog.pichuang.com.tw/20210111-Kubernetes-for-sales-and-marketing/#%E4%B8%AD%E7%BF%BB%E4%B8%AD%E7%9A%84-Kubernetes-%E7%B5%84%E4%BB%B6%E4%BB%8B%E7%B4%B9" target="_blank" rel="noopener">給行銷跟業務的 Kubernetes 101 中翻中介紹&lt;/a>&lt;/p></description></item><item><title>Kubernetes (K8s) 搭配 EFK 實作 (Deployment、StatefulSet、DaemonSet)</title><link>https://pin-yi.me/blog/kubernetes/k8s-efk/</link><pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/k8s-efk/</guid><description>
&lt;p>這是我們 Kubernetes 文章的第三篇，此文章會紀錄我將 EFK 建在 Kubernetes 上面，最後也會統整實作過程中，可能會遇到的一些問題，讓大家在學習時，可以更有效率，不用 debug 到死 😎😎&lt;/p>
&lt;br>
&lt;p>那由於本文會直接帶入程式，觀念部分，可以先查看：&lt;/p>
&lt;ul>
&lt;li>Kubernetes : &lt;a href="../k8s/" >Kubernetes (K8s) 介紹 - 基本&lt;/a>&lt;/li>
&lt;li>kubernetes : &lt;a href="../k8s-advanced/" >Kubernetes (K8s) 介紹 - 進階 (Service、Ingress、StatefulSet、Deployment、ReplicaSet、ConfigMap)&lt;/a>&lt;/li>
&lt;li>EFK : &lt;a href="../../rd/redis-sentinel-docker-compose-haproxy-efk/" >用 EFK 收集容器日誌 (HAProxy、Redis Sentinel、Docker-compose)&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>此文章程式碼也會同步到 Github ，需要的也可以去查看歐！要記得先確定一下自己的版本 &lt;a href="https://github.com/880831ian/Kubernetes-EFK" target="_blank" rel="noopener">Github 程式碼連結&lt;/a> 😆&lt;/p>
&lt;h2>版本資訊&lt;span class="hx-absolute -hx-mt-20" id="版本資訊">&lt;/span>
&lt;a href="#%e7%89%88%e6%9c%ac%e8%b3%87%e8%a8%8a" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ul>
&lt;li>macOS：11.6&lt;/li>
&lt;li>Minikube：v1.25.2&lt;/li>
&lt;li>hyperkit：0.20200908&lt;/li>
&lt;li>Kubectl：Client Version：v1.22.5、Server Version：v1.23.3&lt;/li>
&lt;li>Elasticsearch：8.1.3&lt;/li>
&lt;li>Fluentd：v1.14.6-debian-elasticsearch7-1.0&lt;/li>
&lt;li>Kibana：8.1.3&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2>實作&lt;span class="hx-absolute -hx-mt-20" id="實作">&lt;/span>
&lt;a href="#%e5%af%a6%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>創建命名空間&lt;span class="hx-absolute -hx-mt-20" id="創建命名空間">&lt;/span>
&lt;a href="#%e5%89%b5%e5%bb%ba%e5%91%bd%e5%90%8d%e7%a9%ba%e9%96%93" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>在我們開始之前，我們首先建立一個命名空間，我們會將 EFK 所有的工具都安裝在此。那我想創建一個名為 &lt;code>kube-logging&lt;/code> 的 namespace，先查詢現有的命名空間是否有重複：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get namespaces&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我們可以看到這些已經存在的 namespace ：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>NAME STATUS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default Active 92m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kube-logging Active 89m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kube-node-lease Active 92m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kube-public Active 92m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kube-system Active 92m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-dashboard Active 92m&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>那要怎麼創建一個命名空間呢？先打開編輯器編輯名為 &lt;code>kube-logging.yaml&lt;/code>：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Namespace&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kube-logging&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>完成後，使用 &lt;code>apply&lt;/code> 來創建命名空間：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f kube-logging.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>namespace/kube-logging created&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>再使用 &lt;code>kubectl get namespaces&lt;/code> 查看是否多了一個名為 &lt;code>kube-logging&lt;/code> 的命名空間：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get namespaces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME STATUS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default Active 2m23s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kube-logging Active 88s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kube-node-lease Active 2m24s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kube-public Active 2m24s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kube-system Active 2m24s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-dashboard Active 2m19s&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>創建 Elasticsearch StatefulSet&lt;span class="hx-absolute -hx-mt-20" id="創建-elasticsearch-statefulset">&lt;/span>
&lt;a href="#%e5%89%b5%e5%bb%ba-elasticsearch-statefulset" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們已經創建好一個命名空間來放我們的 EFK，首先先部署副本數有 3 個的 Elasticsearch Pod。為什麼要使用 3 個 呢？使用 3 個 Elasticsearch Pod 是為了避免在高可用性、多節點叢集時出現錯誤，當其中一個 Elasticsearch Pod 故障，其他 2 個就會選舉後來接替，保證叢集可以繼續運行。&lt;/p>
&lt;br>
&lt;h4>創建 Headless Service&lt;span class="hx-absolute -hx-mt-20" id="創建-headless-service">&lt;/span>
&lt;a href="#%e5%89%b5%e5%bb%ba-headless-service" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們先創建名為 &lt;code>elasticsearch_svc.yaml&lt;/code> 的 yaml 檔，用來處理 service 的問題：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">elasticsearch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">kube-logging&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">elasticsearch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">elasticsearch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">clusterIP&lt;/span>: &lt;span style="color:#ae81ff">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">9200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">rest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">9300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">inter-node&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們有創建一個命名空間，所以要先在 metadata 加入 namespace: kube-logging。記得要設定標籤，當我們將 Elasticsearch StatefulSet 與此 Service 關聯時，Service 會返回指向的帶有標籤的 Elasticsearch Pod。然後我們設置 &lt;code>clusterIP: None&lt;/code> 定義該 Service 為 Headless Service。最後定義 Port 9200 為 REST API、Port 9300 為 Node 之間的通信。&lt;/p>
&lt;br>
&lt;p>一樣使用 &lt;code>apply&lt;/code> 來建立 Service：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f elasticsearch-svc.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>service/elasticsearch created&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們這次直接查看 minikube dashboard：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-efk/service.webp"
alt="elasticsearch service" width="1200">&lt;figcaption>
&lt;p>elasticsearch service&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h4>創建 StatefulSet&lt;span class="hx-absolute -hx-mt-20" id="創建-statefulset">&lt;/span>
&lt;a href="#%e5%89%b5%e5%bb%ba-statefulset" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>創建名為 &lt;code>elasticsearch_statefulset.yaml&lt;/code> 的 yaml 檔案 (因為程式長度，所以分開說明，要完整請參考 &lt;a href="https://github.com/880831ian/Kubernetes-EFK" target="_blank" rel="noopener">Github 程式碼連結&lt;/a>)：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">StatefulSet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">es-cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">kube-logging&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">serviceName&lt;/span>: &lt;span style="color:#ae81ff">elasticsearch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">elasticsearch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">elasticsearch&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>名稱取名為 &lt;code>es-cluster&lt;/code> ，我一樣使用 kube-logging 的 namespace，設定 ServiceName &lt;code>elasticsearch&lt;/code> 是確保 StatefulSet 中的每一個 Pod 都可以使用以下 DNS 位址進行訪問：&lt;code>es-cluster-[0,1,2].elasticsearch.kube-logging.svc.cluster.local&lt;/code> ，其中 &lt;code>[0,1,2]&lt;/code> 對應 Pod 分配的整數序號。&lt;/p>
&lt;p>我們指定副本數為 3，並將 &lt;code>matchLabels&lt;/code> 選擇器設定 &lt;code>app: elasticseach&lt;/code>，我們在將其鏡像到該 &lt;code>.spec.template.metadata&lt;/code>，&lt;code>.spec.selector.matchLabels&lt;/code> 跟 &lt;code>.spec.template.metadata.labels&lt;/code> 必須相同。&lt;/p>
&lt;br>
&lt;p>接續&amp;hellip;&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">elasticsearch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">elasticsearch:8.1.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">limits&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">1000m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">100m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">9200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">rest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">9300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">inter-node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMounts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/usr/share/elasticsearch/data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">cluster.name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">k8s-logs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">node.name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">valueFrom&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fieldRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fieldPath&lt;/span>: &lt;span style="color:#ae81ff">metadata.name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">discovery.seed_hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;es-cluster-0.elasticsearch,es-cluster-1.elasticsearch,es-cluster-2.elasticsearch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">cluster.initial_master_nodes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;es-cluster-0,es-cluster-1,es-cluster-2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">ES_JAVA_OPTS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;-Xms512m -Xmx512m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">xpack.security.enabled&lt;/span> &lt;span style="color:#75715e"># 記得要加上，因爲 Elasticsearch 8.x版本後會自動開啟SSL，如果沒有設定他就會一直重新啟動&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們定義容器名稱是 &lt;code>elasticsearch&lt;/code>，映像檔是 &lt;code>elasticsearch:8.1.3&lt;/code> ，要記得這個版本要與後面的 kibana 相同，我們在 resources 設置容器至少需要 0.1 CPU，最多可以到 1 個 CPU。一樣設定 Port 9200 為 REST API、Port 9300 為 Node 之間的通信，並將名為 &lt;code>data&lt;/code> 的PersistentVolume 的容器掛載到容器的 &lt;code>/usr/share/elasticsearch/data&lt;/code>。&lt;/p>
&lt;p>最後幫容器設置一些環境變數：&lt;/p>
&lt;ul>
&lt;li>&lt;code>cluster.name&lt;/code>：Elasticsearch 叢集的名稱，我們設定為 &lt;code>k8s-logs&lt;/code>。&lt;/li>
&lt;li>&lt;code>node.name&lt;/code>：節點名稱，我們設置 valueFrom 使用 &lt;code>.metadata.name&lt;/code>，它會解析為 &lt;code>es-cluster-[0,1,2]&lt;/code>，取決節點的指定順序。&lt;/li>
&lt;li>&lt;code>discovery.seed_hosts&lt;/code>：設置叢集中主節點列表，這些節點將會為節點發現過程中提供 Pod，但由於我們配置的 Headless Service，所以我們的 Pod 具有 &lt;code>es-cluster-[0,1,2].elasticsearch.kube-logging.svc.cluster.local&lt;/code> Kubernetes DNS 解析。&lt;/li>
&lt;li>&lt;code>cluster.initial_master_nodes&lt;/code>：這邊指定將參與主節點的選舉過程節點列表，這邊是通過節點 &lt;code>node.name&lt;/code> 來辨識，不是透過主機名。&lt;/li>
&lt;li>&lt;code>ES_JAVA_OPTS&lt;/code>：這邊我們設置 &lt;code>-Xms512m -Xmx512m&lt;/code>，告訴 JVM 使用最大跟最小 512 MB，可以依據資源來做調配。&lt;/li>
&lt;li>&lt;code>xpack.security.enabled&lt;/code>：這是也是我在 elasticsearch 卡很久的一個設定，詳細的會在最後的常見問題中提到，大家只要記得 elasticsearch 8.x 以後都需要多這個。&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>接續&amp;hellip;&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">initContainers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">fix-permissions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">busybox&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#e6db74">&amp;#34;sh&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-c&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;chown -R 1000:1000 /usr/share/elasticsearch/data&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">securityContext&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">privileged&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMounts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/usr/share/elasticsearch/data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">increase-vm-max-map&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">busybox&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;sysctl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-w&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;vm.max_map_count=262144&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">securityContext&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">privileged&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">increase-fd-ulimit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">busybox&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;sh&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-c&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;ulimit -n 65536&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">securityContext&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">privileged&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們這個區塊定義了主容器運行前的初始化設定：&lt;/p>
&lt;ul>
&lt;li>&lt;code>fix-permissions&lt;/code>：因為默認情況下，Kubernetes 會將數據目錄掛載為 &lt;code>root&lt;/code>，導致 Elasticsearch 無法訪問，所以才會多這個運行 &lt;code>chown&lt;/code> 將 Elasticsearch 數據目錄的所有者和組更改為 &lt;code>1000:1000 /usr/share/elasticsearch/data&lt;/code>。詳細可以參考 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_notes_for_production_use_and_defaults" target="_blank" rel="noopener">Notes for Production Use and Defaults&lt;/a>。&lt;/li>
&lt;li>&lt;code>increase-vm-max-map&lt;/code>：這邊是因為默認情況下內存會太低，所以多這個用 &lt;code>sysctl -w&lt;/code> 來調整內存大小。詳細可以參考 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html" target="_blank" rel="noopener">Elasticsearch documentation&lt;/a>。&lt;/li>
&lt;li>&lt;code>iincrease-fd-ulimit&lt;/code>：它運行 &lt;code>ulimit&lt;/code> 調整打開文件描述的最大數量。詳細可以參考 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_notes_for_production_use_and_defaults" target="_blank" rel="noopener">Notes for Production Use and Defaults&lt;/a>。&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>接續&amp;hellip;&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeClaimTemplates&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">elasticsearch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">accessModes&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;ReadWriteOnce&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>: &lt;span style="color:#ae81ff">3Gi&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這邊定義了 StatefulSet 的 &lt;code>volumeClaimTemplates&lt;/code>。Kubernetes 會幫 Pod 創建 PersistentVolume，我們在上面的命名將它取為 &lt;code>data&lt;/code>，並與 &lt;code>app: elasticsearch&lt;/code> StatefulSet 相同標籤。
我們將訪問的模式設定為 &lt;code>ReadWriteOnce&lt;/code>，代表我們只能被單個節點以讀寫方式掛載，最後我們設定每個 PersistentVolume 的大小為 3GiB。&lt;/p>
&lt;br>
&lt;p>都完成後，我們一樣用 &lt;code>apply&lt;/code> 部署 StatefulSet：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f elasticsearch-statefulset.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>statefulset.apps/es-cluster created&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我們可以查看 minikube dashboard：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-efk/statefulset.webp"
alt="elasticsearch statefulset" width="1200">&lt;figcaption>
&lt;p>elasticsearch statefulset&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>可以看到已經成功建好，接著我們使用 port-forward 來測試是否正常運作：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl port-forward es-cluster-0 9200:9200 --namespace&lt;span style="color:#f92672">=&lt;/span>kube-logging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ curl http://localhost:9200/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;es-cluster-0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;cluster_name&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;k8s-logs&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;cluster_uuid&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;aGxBystkQFW-xvjJ98Pxcw&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;version&amp;#34;&lt;/span> : &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;number&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;8.1.3&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;build_flavor&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;build_type&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;docker&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;build_hash&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;39afaa3c0fe7db4869a161985e240bd7182d7a07&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;build_date&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;2022-04-19T08:13:25.444693396Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;build_snapshot&amp;#34;&lt;/span> : false,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lucene_version&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;9.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;minimum_wire_compatibility_version&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;7.17.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;minimum_index_compatibility_version&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;7.0.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;tagline&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;You Know, for Search&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>如果像我上面一樣有跳出 ”You Know, for Search“ 就代表 Elasticsearch 已經在正常運作囉 🥳&lt;/p>
&lt;br>
&lt;h3>創建 Kibana Deployment Service&lt;span class="hx-absolute -hx-mt-20" id="創建-kibana-deployment-service">&lt;/span>
&lt;a href="#%e5%89%b5%e5%bb%ba-kibana-deployment-service" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>要在 Kubernetes 上啟動 Kibana，我們要先創建一個名為 Service &lt;code>kibana&lt;/code>，以及包含一個副本的 Deployment。我們先創建名為 kibana.yaml 的 yaml 檔：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kibana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">kube-logging&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">kibana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">5601&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">kibana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kibana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">kube-logging&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">kibana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">kibana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">kibana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kibana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">kibana:8.1.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">limits&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">1000m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">100m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">ELASTICSEARCH_URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">http://elasticsearch:9200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">5601&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>一樣我們要把 &lt;code>kibana&lt;/code> 加入 &lt;code>kube-logging&lt;/code> 的命名空間，讓它以去調用其他服務，並賦予 &lt;code>app: kibana&lt;/code> 標籤。並指定本機訪問 Port 為 &lt;code>5601&lt;/code>，並使用 &lt;code>app: kibana&lt;/code> 標籤來選擇服務的 Pod。我們在 &lt;code>Deployment&lt;/code> 定義 1 個 Pod 副本，我們使用 &lt;code>kibana:8.1.3&lt;/code> image，記得要跟 Elasticsearch 使用相同版本，此外我們還有設定 Pod 最少使用 0.1 個 CPU、最多使用 1 個 CPU。最後在環境變數中使用 &lt;code>ELASTICSEARCH_URL&lt;/code> 設定 Elasticsearch 的叢集以及 Port。&lt;/p>
&lt;br>
&lt;p>都完成後，我們來開始部署：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f kibana.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>service/kibana created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deployment.apps/kibana created&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>一樣我們用 minikube dashboard 來查看是否部署成功：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-efk/kibana-1.webp"
alt="kibana Deployments" width="1200">&lt;figcaption>
&lt;p>kibana Deployments&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>沒有問題後，我們用 &lt;code>port-forward&lt;/code> 將本地 Port 轉發到 Pod 上：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl port-forward kibana-75cbbfcd9c-nr4r8 5601:5601 --namespace&lt;span style="color:#f92672">=&lt;/span>kube-logging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Forwarding from 127.0.0.1:5601 -&amp;gt; &lt;span style="color:#ae81ff">5601&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Forwarding from &lt;span style="color:#f92672">[&lt;/span>::1&lt;span style="color:#f92672">]&lt;/span>:5601 -&amp;gt; &lt;span style="color:#ae81ff">5601&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Handling connection &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#ae81ff">5601&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>開啟瀏覽器瀏覽 &lt;code>http://localhost:5601&lt;/code>，如果可以進入 Kibana，就代表成功將 Kibana 部署到 Kubernetes 叢集中：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-efk/kibana-2.webp"
alt="kibana Deployments" width="1200">&lt;figcaption>
&lt;p>kibana Deployments&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>創建 Fluentd DaemonSet&lt;span class="hx-absolute -hx-mt-20" id="創建-fluentd-daemonset">&lt;/span>
&lt;a href="#%e5%89%b5%e5%bb%ba-fluentd-daemonset" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們要將 Fluentd 設置成 DaemonSet，讓它在 Kubernetes 叢集中每個節點上運行 Pod 副本。用 DaemonSet 控制器，可以將叢集中每個節點部署 Fluentd Pod，詳細可以參考 &lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/logging/#using-a-node-logging-agent" target="_blank" rel="noopener">Using a node logging agent&lt;/a>。在 Kubernetes 中，容器化的應用程式會透過 stdout 將日誌 log 定向到節點上的 JSON 文件。Fluentd Pod 會追蹤這些日誌文件、過濾日誌事件、轉換日誌的數據，並發送到我們部署的 Elasticsearch 後端。&lt;/p>
&lt;p>除了容器的日誌，Fluentd 還會追蹤 Kubernetes 系統日誌，例如：kubelet、kube-proxy 和 Docker 日誌。&lt;/p>
&lt;br>
&lt;p>先創建一個 &lt;code>fluentd.yaml&lt;/code> 的 yaml 檔 (因為程式長度，所以分開說明，要完整請參考 &lt;a href="https://github.com/880831ian/Kubernetes-EFK" target="_blank" rel="noopener">Github 程式碼連結&lt;/a>)：&lt;/p>
&lt;h4>創建 ServiceAccount&lt;span class="hx-absolute -hx-mt-20" id="創建-serviceaccount">&lt;/span>
&lt;a href="#%e5%89%b5%e5%bb%ba-serviceaccount" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">kube-logging&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們先創建一個服務帳號 &lt;code>fluentd&lt;/code>，Fluentd Pod 將使用它來訪問 Kubernetes API。我們在 &lt;code>kube-logging&lt;/code> namespace 中創建它並再次賦予它 label &lt;code>app: fluentd&lt;/code>。&lt;/p>
&lt;br>
&lt;h4>創建 ClusterRole&lt;span class="hx-absolute -hx-mt-20" id="創建-clusterrole">&lt;/span>
&lt;a href="#%e5%89%b5%e5%bb%ba-clusterrole" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>接著&amp;hellip;&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">apiGroups&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">pods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">namespaces&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">get&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">watch&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>在這邊我們定義一個 ClusterRole &lt;code>fluentd&lt;/code>，設定我們對叢集範圍的 Kubernetes 資源（如節點）的訪問權限，我們設定 &lt;code>get&lt;/code>、&lt;code>list&lt;/code>、&lt;code>watch&lt;/code> 等權限。&lt;/p>
&lt;br>
&lt;h4>創建 ClusterRoleBinding&lt;span class="hx-absolute -hx-mt-20" id="創建-clusterrolebinding">&lt;/span>
&lt;a href="#%e5%89%b5%e5%bb%ba-clusterrolebinding" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>接著&amp;hellip;&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRoleBinding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">roleRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apiGroup&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">subjects&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">kube-logging&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們定義一個將 ClusterRole 綁定到 ServiceAccount 的 ClusterRoleBinding 調用。&lt;/p>
&lt;br>
&lt;h4>創建 DaemonSet&lt;span class="hx-absolute -hx-mt-20" id="創建-daemonset">&lt;/span>
&lt;a href="#%e5%89%b5%e5%bb%ba-daemonset" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>接著&amp;hellip;&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">DaemonSet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">kube-logging&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>定義一個可以在 &lt;code>kube-logging&lt;/code> namespace 中調用的 DaemonSet，並給它一個 &lt;code>app: fluentd&lt;/code> 標籤。&lt;/p>
&lt;br>
&lt;p>接著&amp;hellip;&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">serviceAccount&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">serviceAccountName&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tolerations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">node-role.kubernetes.io/master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">effect&lt;/span>: &lt;span style="color:#ae81ff">NoSchedule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">fluentd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">fluent/fluentd-kubernetes-daemonset:v1.14.6-debian-elasticsearch7-1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">FLUENT_ELASTICSEARCH_HOST&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;elasticsearch.kube-logging.svc.cluster.local&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">FLUENT_ELASTICSEARCH_PORT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;9200&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">FLUENT_ELASTICSEARCH_SCHEME&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">FLUENTD_SYSTEMD_CONF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">disable&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們先匹配 &lt;code>.metadata.labels&lt;/code> 定義的標籤 &lt;code>app: fluentd&lt;/code> ，然後為 DaemonSet 分配 &lt;code>fluentd&lt;/code> Service Account。選擇 &lt;code>app: fluentd&lt;/code> 作為這個 DaemonSet 管理的 Pod。&lt;/p>
&lt;p>我們定義 &lt;code>NoSchedule&lt;/code> 容忍度來匹配 Kubernetes master node 上的等效污點。他可以確保 DaemonSet 也被部署到 Kubernetes 主服務器。&lt;/p>
&lt;p>接下來定義 Pod 容器，我們將名稱取為 &lt;code>fluentd&lt;/code>，我們使用的映像檔是 &lt;a href="https://hub.docker.com/layers/fluentd-kubernetes-daemonset/fluent/fluentd-kubernetes-daemonset/v1.14.6-debian-elasticsearch7-1.0/images/sha256-9c960d2ebf6b8ba290bafd4ff386f26427a5469767b609e8735a3d983deb64b0?context=explore" target="_blank" rel="noopener">fluent/fluentd-kubernetes-daemonset:v1.14.6-debian-elasticsearch7-1.0&lt;/a>，最後配置一些環境變數：&lt;/p>
&lt;ul>
&lt;li>&lt;code>FLUENT_ELASTICSEARCH_HOST&lt;/code>：設置我們之前定義的 Elasticsearch Headless 位址。&lt;code>elasticsearch.kube-logging.svc.cluster.local&lt;/code> 會解析 3 個 Elasticsearch Pod 的 IP 地址列表。&lt;/li>
&lt;li>&lt;code>FLUENT_ELASTICSEARCH_PORT&lt;/code>：設置我們之前定義的 Elasticsearch &lt;code>9200&lt;/code> Port。&lt;/li>
&lt;li>&lt;code>FLUENT_ELASTICSEARCH_SCHEME&lt;/code>：我們設置 &lt;code>http&lt;/code>。&lt;/li>
&lt;li>&lt;code>FLUENTD_SYSTEMD_CONF&lt;/code>：我們將 &lt;code>systemd&lt;/code> 在容器中設定相關的輸出設置為 &lt;code>disable&lt;/code>。&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>接著&amp;hellip;&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">limits&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">memory&lt;/span>: &lt;span style="color:#ae81ff">512Mi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">100m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">memory&lt;/span>: &lt;span style="color:#ae81ff">200Mi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMounts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">varlog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/var/log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">varlibdockercontainers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/var/lib/docker/containers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">readOnly&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">terminationGracePeriodSeconds&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">varlog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hostPath&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/var/log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">varlibdockercontainers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hostPath&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/var/lib/docker/containers&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們設置 Fluentd Pod 上使用 512 MiB 的內存限制，並保證 0.1 個 CPU 跟 200 MiB 的內存。我們將 varlog &lt;code>/var/log&lt;/code> 以及 varlibdockercontainers &lt;code>var/lib/docker/containers&lt;/code> 一併掛載進容器內。最後一個設定是 &lt;code>Fluentd&lt;/code> 在收到信號 &lt;code>terminationGracePeriodSeconds&lt;/code> 後有 30 秒的時間可以優雅的關閉。&lt;/p>
&lt;br>
&lt;p>都定義完成後，我們部署 Fluentd DaemonSet：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f fluentd.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>serviceaccount/fluentd created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusterrole.rbac.authorization.k8s.io/fluentd created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusterrolebinding.rbac.authorization.k8s.io/fluentd created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>daemonset.apps/fluentd created&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>一樣我們用 minikube dashboard 來查看是否部署成功：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-efk/Daemonset.webp"
alt="fluentd DaemonSet" width="1200">&lt;figcaption>
&lt;p>fluentd DaemonSet&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們使用剛剛的 kibana &lt;code>port-forward&lt;/code> 將本地 Port 轉發到 Pod 上：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl port-forward kibana-75cbbfcd9c-nr4r8 5601:5601 --namespace&lt;span style="color:#f92672">=&lt;/span>kube-logging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Forwarding from 127.0.0.1:5601 -&amp;gt; &lt;span style="color:#ae81ff">5601&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Forwarding from &lt;span style="color:#f92672">[&lt;/span>::1&lt;span style="color:#f92672">]&lt;/span>:5601 -&amp;gt; &lt;span style="color:#ae81ff">5601&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Handling connection &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#ae81ff">5601&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>開啟瀏覽器瀏覽 &lt;code>http://localhost:5601&lt;/code>，點選 Management &amp;gt; Stack Management：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-efk/fluentd-1.webp"
alt="fluentd 設定" width="1200">&lt;figcaption>
&lt;p>fluentd 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>點選 Kibana &amp;gt; Data Views，會看到跳出一個視窗，有一個按鈕寫 Create data view：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-efk/fluentd-2.webp"
alt="fluentd 設定" width="1200">&lt;figcaption>
&lt;p>fluentd 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>Name 輸入 &lt;code>logstash*&lt;/code> ，並選擇 &lt;code>@timestamp&lt;/code> 來用時間過濾日誌，最後按下 Create date view：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-efk/fluentd-3.webp"
alt="fluentd 設定" width="1200">&lt;figcaption>
&lt;p>fluentd 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>設定好 logstash* 的 Data views，再點選左邊欄位的 Discover：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-efk/fluentd-4.webp"
alt="fluentd 設定" width="1200">&lt;figcaption>
&lt;p>fluentd 設定&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>就可以看到顯示容器的 log 日誌拉！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-efk/log.webp"
alt="顯示容器 log" width="1200">&lt;figcaption>
&lt;p>顯示容器 log&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>部署常見問題及解決辦法&lt;span class="hx-absolute -hx-mt-20" id="部署常見問題及解決辦法">&lt;/span>
&lt;a href="#%e9%83%a8%e7%bd%b2%e5%b8%b8%e8%a6%8b%e5%95%8f%e9%a1%8c%e5%8f%8a%e8%a7%a3%e6%b1%ba%e8%be%a6%e6%b3%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200">
&lt;p class="hx-flex hx-items-center hx-font-medium">&lt;svg height=16px class="hx-inline-block hx-align-middle hx-mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>&lt;/svg>常見問題&lt;/p>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>Q：Elasticsearch 部署成功後會一直重新啟動？&lt;br>
Ans：原因是 Elasticsearch 從 8.x 版本後，會自動開啟 SSL 認證，我們在 &lt;code>env&lt;/code> 環境變數設定時，如果沒有多加 SSL Key 等設定值，Elasticsearch 這個 Pod 會啟動後，一直重新啟動，導致服務無法正常使用，只需要在環境變數中加入 xpack.security.enabled ，設定為 false 就可以解決。&lt;/p>&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-elasticsearch-fluentd-and-kibana-efk-logging-stack-on-kubernetes" target="_blank" rel="noopener">How To Set Up an Elasticsearch, Fluentd and Kibana (EFK) Logging Stack on Kubernetes&lt;/a>&lt;/p></description></item><item><title>Kubernetes (K8s) 介紹 - 進階 (Service、Ingress、StatefulSet、Deployment、ReplicaSet、ConfigMap)</title><link>https://pin-yi.me/blog/kubernetes/k8s-advanced/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/k8s-advanced/</guid><description>
&lt;p>前面我們在&lt;a href="../k8s" >基本篇&lt;/a>中，為了使 Pod 能夠與本機連線，使用了 &lt;code>port-forward&lt;/code>，還有另一種方法就是今天要介紹的第一個主題：Service&lt;/p>
&lt;p>那我們會先複習一下 &lt;code>port-forward&lt;/code>，再來介紹 &lt;code>Service&lt;/code>，當然後面也會有實際操作，請大家跟我繼續一起學下去吧 ！&lt;/p>
&lt;br>
&lt;h2>port-forward&lt;span class="hx-absolute -hx-mt-20" id="port-forward">&lt;/span>
&lt;a href="#port-forward" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;code>port-forward&lt;/code> 簡單來說就是把本機的某一個 Port 與 Pod 所開放對外的 Port 做映射，就像是我們在 Docker 跑 container 時會使用 -p 來連結機器與 container 的 port 一樣～&lt;/p>
&lt;p>使用的方法也很簡單且方便，使用 &lt;code>kubectl port-forward &amp;lt;pod&amp;gt; &amp;lt;external-port&amp;gt;:&amp;lt;pod-port&amp;gt;&lt;/code>，我們拿 &lt;a href="../k8s" >Kubernetes 基本篇&lt;/a>最後的範例，來做說明：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl port-forward kubernetes-demo-pod 3000:3000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Forwarding from 127.0.0.1:3000 -&amp;gt; &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Forwarding from &lt;span style="color:#f92672">[&lt;/span>::1&lt;span style="color:#f92672">]&lt;/span>:3000 -&amp;gt; &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Handling connection &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#ae81ff">3000&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們把 kubernetes-demo-pod 這個 pod，用 port-forward 設定本機 3000 port 與 pod 3000 port 做映射，當我們瀏覽 &lt;code>http://localhost:3000&lt;/code> 就可以看到 pod 裡面的內容了！&lt;/p>
&lt;p>雖然很方便，可以馬上就開好要映射的 port，但缺點就是每次建立 pod 時都需要手動去打指令來設定 port，且時間久了，也會忘記本機上哪些 port 有被使用到，因此這邊推薦使用 &lt;code>Service&lt;/code> 來取代 &lt;code>port-forward&lt;/code>，那我們來看看 &lt;code>Service&lt;/code> 是什麼吧。&lt;/p>
&lt;br>
&lt;h2>什麼是 Service ?&lt;span class="hx-absolute -hx-mt-20" id="什麼是-service-">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-service-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;code>service&lt;/code> 他其實就是建立的一個網路連線通道，可以讓應用程式正確的連結到正在運行的 pods，而 &lt;code>service&lt;/code> 又有 4 種的表現形式，我們接下來會一個一個簡單介紹：&lt;/p>
&lt;h3>ClusterIP&lt;span class="hx-absolute -hx-mt-20" id="clusterip">&lt;/span>
&lt;a href="#clusterip" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>它是 service 的預設值，所以沒有設定時，預設就是使用該方式做連線，它代表這個 service 只能在相同的 cluster 內使用，無法讓外部做使用。&lt;/p>
&lt;br>
&lt;h3>NodePort&lt;span class="hx-absolute -hx-mt-20" id="nodeport">&lt;/span>
&lt;a href="#nodeport" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>簡單來說它可以從外部連線到內部使用。假設本機有其他服務，例如：nginx 之類的服務，還有架一個 K8s 的 cluster ，這時候只要設定好 NodePort，就可以讓本機使用 K8s cluster 來使用內部的服務。&lt;/p>
&lt;br>
&lt;h3>ExternalName&lt;span class="hx-absolute -hx-mt-20" id="externalname">&lt;/span>
&lt;a href="#externalname" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>主要是為了讓不同 namespace ，以 ClusterIP 所生成的 service 可以利用 ExternalName 設定外部名稱，藉以連到指定的 namespace Service。&lt;/p>
&lt;br>
&lt;h3>LoadBalancer&lt;span class="hx-absolute -hx-mt-20" id="loadbalancer">&lt;/span>
&lt;a href="#loadbalancer" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>這個屬性是強化版的 NodePort，除了 NodePort 可以讓外部連線的優點以外，同時也建立負載平衡的機制來分散流量，很可惜 LoadBalaner 只提供雲端服務，例如：GCP、AWS 等等都有支援，目前 minikube 要使用 LoadBalancer 需要先啟動 &lt;code>tunnel&lt;/code> 才能做使用。&lt;code>tunnel&lt;/code> 是什麼呢？我們後面會說明！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/service.webp"
alt="k8s service 流程圖 Kubernetes 那些事 — Service 篇" width="300">&lt;figcaption>
&lt;p>k8s service 流程圖 &lt;a href="https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-service-%E7%AF%87-d19d4c6e945f" target="_blank" rel="noopener">Kubernetes 那些事 — Service 篇&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>NodePort 實作&lt;span class="hx-absolute -hx-mt-20" id="nodeport-實作">&lt;/span>
&lt;a href="#nodeport-%e5%af%a6%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>那我們來用 Service (NodePort) 改寫&lt;a href="../k8s" >基本篇&lt;/a>的連線問題 ：(&lt;a href="https://github.com/880831ian/kubernetes-tutorial/tree/master/Service-NodePort" target="_blank" rel="noopener">Github 程式碼連結&lt;/a>)&lt;/p>
&lt;ul>
&lt;li>service.yaml&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">NodePort&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">targetPort&lt;/span>: &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nodePort&lt;/span>: &lt;span style="color:#ae81ff">30001&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>結構與 kubernetes-demo.yaml 相同，以下簡單說明不同之處：&lt;/p>
&lt;p>kind&lt;/p>
&lt;p>該元件的屬性，此設定檔的類型是：Service&lt;/p>
&lt;p>spec&lt;/p>
&lt;ul>
&lt;li>type：指定此 Service 要使用的方法，這邊我們使用 NodePort。&lt;/li>
&lt;li>ports.protocol：此為連線的網路協議，預設值為 &lt;code>TCP&lt;/code>，當然也可以使用 &lt;code>UDP&lt;/code>。&lt;/li>
&lt;li>ports.port：此為建立好的 Service 要以哪個 Port 連接到 Pod 上。&lt;/li>
&lt;li>ports.targetPort：此為目標 Pod 的 Port ，通常 port 跟 targetPort 一樣。&lt;/li>
&lt;li>ports.nodePort：此為機器上的 Port 要對應到該 Service 上，這個設定要 nodePort 形式的 Service 才會有效果，假設今天沒有設定 nodePort ，Kubernetes 會自動開一個機器上的 Port 來對應該 Service ，範圍是在 30000 - 37267 之間。&lt;/li>
&lt;li>selector.app：如果要使 Service 連接到正確的 Pod 就必須利用 &lt;code>selector&lt;/code>，只要原封不動的把 Pod 的 &lt;code>Labels&lt;/code> 複製上去即可。&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>接下來使用 &lt;code>kubectl apply&lt;/code> 建立 service：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f service.yaml&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/service-4.webp"
alt="k8s 建立 service (NodePort)" width="1300">&lt;figcaption>
&lt;p>k8s 建立 service (NodePort)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>接下來取得 minikube Node IP，可以使用：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ minikube ip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.64.11&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>打開瀏覽器搜尋 &lt;code>192.168.64.11:30001&lt;/code> 就可以看到我們可愛的柴犬囉 &amp;gt;&amp;lt;&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/Shiba-Inu-1.webp"
alt="成功顯示柴犬" width="1000">&lt;figcaption>
&lt;p>成功顯示柴犬&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>LoadBalancer 實作&lt;span class="hx-absolute -hx-mt-20" id="loadbalancer-實作">&lt;/span>
&lt;a href="#loadbalancer-%e5%af%a6%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>那我們來用 Service (LoadBalancer) 改寫&lt;a href="../k8s" >基本篇&lt;/a>的連線問題 ：(&lt;a href="https://github.com/880831ian/kubernetes-tutorial/tree/master/Service-LoadBalancer" target="_blank" rel="noopener">Github 程式碼連結&lt;/a>)&lt;/p>
&lt;ul>
&lt;li>service.yaml&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">LoadBalancer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">targetPort&lt;/span>: &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>結構與 kubernetes-demo.yaml 相同，以下簡單說明不同之處：&lt;/p>
&lt;p>kind&lt;/p>
&lt;p>該元件的屬性，此設定檔的類型是：Service&lt;/p>
&lt;p>spec&lt;/p>
&lt;ul>
&lt;li>type：指定此 Service 要使用的方法，這邊我們使用 LoadBalancer。&lt;/li>
&lt;li>ports.protocol：此為連線的網路協議，預設值為 &lt;code>TCP&lt;/code>，當然也可以使用 &lt;code>UDP&lt;/code>。&lt;/li>
&lt;li>ports.port：此為建立好的 Service 要以哪個 Port 連接到 Pod 上。&lt;/li>
&lt;li>ports.targetPort：此為目標 Pod 的 Port ，通常 port 跟 targetPort 一樣。&lt;/li>
&lt;li>selector.app：如果要使 Service 連接到正確的 Pod 就必須利用 &lt;code>selector&lt;/code>，只要原封不動的把 Pod 的 &lt;code>Labels&lt;/code> 複製上去即可。&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>接下來使用 &lt;code>kubectl apply&lt;/code> 建立 service：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f service.yaml&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/service-1.webp"
alt="k8s 建立 service (LoadBalancer)" width="1300">&lt;figcaption>
&lt;p>k8s 建立 service (LoadBalancer)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>可以看到 dashboard 有我們剛剛啟動的 Service，但是啟動後前面的燈是黃色的，是因為 minikube LoadBalancer 需要透過 &lt;code>tunnel&lt;/code> 才可以使用，可以參考 minikube 官網說明：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/service-2.webp"
alt="minikube 官網 說明 LoadBalancer minikube tunnel" width="800">&lt;figcaption>
&lt;p>&lt;a href="https://minikube.sigs.k8s.io/docs/handbook/accessing/#using-minikube-tunnel" target="_blank" rel="noopener">minikube 官網&lt;/a> 說明 LoadBalancer minikube tunnel&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>所以我們需要使用 &lt;code>minikube tunnel&lt;/code> 來啟動 tunnel&lt;/p>
&lt;br>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ minikube tunnel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>✅ Tunnel successfully started
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>📌 NOTE: Please &lt;span style="color:#66d9ef">do&lt;/span> not close this terminal as this process must stay alive &lt;span style="color:#66d9ef">for&lt;/span> the tunnel to be accessible ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>🏃 Starting tunnel &lt;span style="color:#66d9ef">for&lt;/span> service kubernetes-demo-service.&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>就可以看到燈號已經變成綠燈，在外部 Endpoints 多一個連結，可以直接點開&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/service-3.webp"
alt="k8s service" width="1300">&lt;figcaption>
&lt;p>k8s service&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>就可以看到我們可愛的柴犬囉 &amp;gt;&amp;lt;&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/Shiba-Inu.webp"
alt="成功顯示柴犬" width="1000">&lt;figcaption>
&lt;p>成功顯示柴犬&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>什麼是 Ingress ?&lt;span class="hx-absolute -hx-mt-20" id="什麼是-ingress-">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-ingress-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>還記得我們在 Service - NodePort 時，需要打 &lt;code>&amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;/code> ，但現在網站除了網域以外，基本上不會需要自己去打 IP 以及 Port 了吧！那為了解決這個問題，有了 Ingreess。&lt;/p>
&lt;p>Ingress 可以幫助我們統一對外的 port number，並根據 hostname 或是 pathname 來決定請求要轉發到哪一個 Service 上，之後就可以利用該 Service 連接到 Pod 來處理服務。&lt;/p>
&lt;p>我們先來看一下一般的 Service ：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/describe-service.webp"
alt="Service 圖片來源：[Day 19] 在 Kubernetes 中實現負載平衡 - Ingress Controller" width="800">&lt;figcaption>
&lt;p>Service 圖片來源：&lt;a href="https://ithelp.ithome.com.tw/articles/10196261" target="_blank" rel="noopener">[Day 19] 在 Kubernetes 中實現負載平衡 - Ingress Controller&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>可以看到當多個 Service 同時運行時，Node 都需要有對應的 port number 去對應每個 Server 的 port number。像是 GCP 這種雲端服務，每台機器都會配置屬於自己的防火牆。這也代表，不論新增、刪除 Service 物件，都必須要額外多調整防火牆的設定，Port 的管理也想對複雜。&lt;/p>
&lt;br>
&lt;p>若是使用 Ingress，我們只需要開放一個對外的 port numer，Ingree 可以在設定檔中設定不同的路徑，決定要將使用者的請求傳送到哪一個 Service 物件上：&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/describe-ingress.webp"
alt="Ingress 圖片來源：[Day 19] 在 Kubernetes 中實現負載平衡 - Ingress Controller" width="900">&lt;figcaption>
&lt;p>Ingress 圖片來源：&lt;a href="https://ithelp.ithome.com.tw/articles/10196261" target="_blank" rel="noopener">[Day 19] 在 Kubernetes 中實現負載平衡 - Ingress Controller&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>這樣的設計，除了讓維運人員不需要維護多個 port 或是頻繁的更改防火牆外，可以自訂條件的功能，也使得請求的導向可以更加彈性。&lt;/p>
&lt;br>
&lt;h3>Ingress 功能&lt;span class="hx-absolute -hx-mt-20" id="ingress-功能">&lt;/span>
&lt;a href="#ingress-%e5%8a%9f%e8%83%bd" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>將不同&amp;quot;路徑&amp;quot;的請求對應到不同的 Service 物件&lt;/li>
&lt;/ul>
&lt;p>若沒有設定網域，則該機器上的所有網域只要透過此路徑都可以連接到指定的 Service 物件。&lt;/p>
&lt;br>
&lt;ul>
&lt;li>將不同&amp;quot;網域&amp;quot;的請求對應到不同的 Service 物件&lt;/li>
&lt;/ul>
&lt;p>若沒有設定路徑，則會以 &lt;code>/&lt;/code> 路徑連接到指定的 Service 物件。&lt;/p>
&lt;br>
&lt;ul>
&lt;li>支援 SSL Termination&lt;/li>
&lt;/ul>
&lt;p>SSL 全名是傳輸層安全性協定，而網站通常都會利用 https 進行加密以確保資料安全，但 Service 與 Pod 之間的溝通都是以無加密方式傳輸，所以 Ingress 就支援解密，讓 Service 與 Pod 可以正常溝通傳遞資料。&lt;/p>
&lt;br>
&lt;h3>minikube 啟動 Ingress&lt;span class="hx-absolute -hx-mt-20" id="minikube-啟動-ingress">&lt;/span>
&lt;a href="#minikube-%e5%95%9f%e5%8b%95-ingress" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>由於 minikube 預設沒有啟動 Ingress 功能，因此需要額外使用 &lt;code>minikube addons enable ingress&lt;/code> 讓 minikube 啟動 Ingress (Ingress 也需要先安裝 Hyperfix)：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/ingress.webp"
alt="Ingress 圖片來源：[Day 19] 在 Kubernetes 中實現負載平衡 - Ingress Controller" width="900">&lt;figcaption>
&lt;p>Ingress 圖片來源：&lt;a href="https://ithelp.ithome.com.tw/articles/10196261" target="_blank" rel="noopener">[Day 19] 在 Kubernetes 中實現負載平衡 - Ingress Controller&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>設定 /etc/hosts&lt;span class="hx-absolute -hx-mt-20" id="設定-etchosts">&lt;/span>
&lt;a href="#%e8%a8%ad%e5%ae%9a-etchosts" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>加入 Ingress 基本上就需要網域才可以使用，但我們在本機上做練習，所以只要修改本機的 host 檔案就可以了(加入 minikube ip 以及想要的網域名稱)。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ vim /etc/hosts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.64.11 test.tw
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.64.11 test-test.tw&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>因為有兩種方法，第一種 (設定網域以及路徑)跟第二種 (只設定路徑沒有設定網域)，所以底下也會分成兩種來說明！&lt;/p>
&lt;h3>設定網域以及路徑&lt;span class="hx-absolute -hx-mt-20" id="設定網域以及路徑">&lt;/span>
&lt;a href="#%e8%a8%ad%e5%ae%9a%e7%b6%b2%e5%9f%9f%e4%bb%a5%e5%8f%8a%e8%b7%af%e5%be%91" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://github.com/880831ian/kubernetes-tutorial/tree/master/Ingress-Domain" target="_blank" rel="noopener">Github 程式碼連結&lt;/a>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">networking.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo-ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">host&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test.tw&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">paths&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pathType&lt;/span>: &lt;span style="color:#ae81ff">Prefix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">backend&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">service&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">port&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">number&lt;/span>: &lt;span style="color:#ae81ff">3000&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>只設定路徑沒有設定網域&lt;span class="hx-absolute -hx-mt-20" id="只設定路徑沒有設定網域">&lt;/span>
&lt;a href="#%e5%8f%aa%e8%a8%ad%e5%ae%9a%e8%b7%af%e5%be%91%e6%b2%92%e6%9c%89%e8%a8%ad%e5%ae%9a%e7%b6%b2%e5%9f%9f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://github.com/880831ian/kubernetes-tutorial/tree/master/Ingress-Path" target="_blank" rel="noopener">Github 程式碼連結&lt;/a>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">networking.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo-ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">http&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">paths&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pathType&lt;/span>: &lt;span style="color:#ae81ff">Prefix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">backend&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">service&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">port&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">number&lt;/span>: &lt;span style="color:#ae81ff">3000&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>Ingress 整體寫法與 Service 差不多，只差在 &lt;code>spec&lt;/code> 的細部設定，我們就來說一下 spec 設定吧：&lt;/p>
&lt;p>對了～ Ingress 的 apiVersion 不像是 Pod 跟 Service 一樣使用 &lt;code>v1&lt;/code> ，因為目前支援 Ingress 的 API 只有 networking.k8s.io/v1，詳細可以參考 &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener">kubernetes Ingress 官網&lt;/a>&lt;/p>
&lt;ul>
&lt;li>rules&lt;/li>
&lt;/ul>
&lt;p>這代表這個 Ingress 的轉發規則，此 Ingress 所有的設定都必須寫載 &lt;code>rules&lt;/code> 內。&lt;/p>
&lt;ul>
&lt;li>host&lt;/li>
&lt;/ul>
&lt;p>設定可以連接到 Service 物件的網路名稱。&lt;/p>
&lt;ul>
&lt;li>path&lt;/li>
&lt;/ul>
&lt;p>設定可以連接到 Service 物件的路徑名稱。&lt;/p>
&lt;ul>
&lt;li>pathType&lt;/li>
&lt;/ul>
&lt;p>分為 &lt;code>Prefix&lt;/code> 和 &lt;code>Exact&lt;/code> 兩種，Prefix：前綴符合就符合規則 ; Exact：需要完全一致才行，包含大小寫。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">type&lt;/th>
&lt;th style="text-align: center">path&lt;/th>
&lt;th style="text-align: center">request path&lt;/th>
&lt;th style="text-align: center">macth&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">Prefix&lt;/td>
&lt;td style="text-align: center">/&lt;/td>
&lt;td style="text-align: center">全部路徑&lt;/td>
&lt;td style="text-align: center">Yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Exact&lt;/td>
&lt;td style="text-align: center">/aa&lt;/td>
&lt;td style="text-align: center">/aa&lt;/td>
&lt;td style="text-align: center">Yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Exact&lt;/td>
&lt;td style="text-align: center">/bb&lt;/td>
&lt;td style="text-align: center">/cc&lt;/td>
&lt;td style="text-align: center">No&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Prefix&lt;/td>
&lt;td style="text-align: center">/aa&lt;/td>
&lt;td style="text-align: center">/aa,/aa/&lt;/td>
&lt;td style="text-align: center">Yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Prefix&lt;/td>
&lt;td style="text-align: center">/aa/cc&lt;/td>
&lt;td style="text-align: center">/aa/ccc&lt;/td>
&lt;td style="text-align: center">No&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>service.name&lt;/li>
&lt;/ul>
&lt;p>設定連接到的 Service 名稱，這裡要填寫的就是 Service 中在 &lt;code>metadata&lt;/code> 內寫的 &lt;code>name&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>service.port.number&lt;/li>
&lt;/ul>
&lt;p>設定要經由哪個 port 連接到 Service 物件，就像是 Service 的 Port 要連接到 Pod 的 targetPort。&lt;/p>
&lt;br>
&lt;h3>建立 Ingress&lt;span class="hx-absolute -hx-mt-20" id="建立-ingress">&lt;/span>
&lt;a href="#%e5%bb%ba%e7%ab%8b-ingress" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>一樣我們分成兩個做說明&lt;/p>
&lt;h4>設定網域以及路徑&lt;span class="hx-absolute -hx-mt-20" id="設定網域以及路徑-1">&lt;/span>
&lt;a href="#%e8%a8%ad%e5%ae%9a%e7%b6%b2%e5%9f%9f%e4%bb%a5%e5%8f%8a%e8%b7%af%e5%be%91-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>一樣使用 &lt;code>apply&lt;/code> 來建立：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f ingress.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ingress.networking.k8s.io/kubernetes-demo-ingress created&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>使用 &lt;code>kubectl get ing&lt;/code> 來查詢 Ingress 狀況：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl get ing
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME CLASS HOSTS ADDRESS PORTS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-demo-ingress nginx test.tw 192.168.64.11 &lt;span style="color:#ae81ff">80&lt;/span> 10m&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>接下來我們分別測試寫在 /etc/host 裡面的兩個網域，使用瀏覽器搜尋 &lt;code>test.tw&lt;/code> 跟 &lt;code>test-test.tw&lt;/code>：&lt;/p>
&lt;br>
&lt;ul>
&lt;li>&lt;code>test.tw&lt;/code>&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/Shiba-Inu-3.webp"
alt="成功顯示柴犬" width="1000">&lt;figcaption>
&lt;p>成功顯示柴犬&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ul>
&lt;li>&lt;code>test-test.tw &lt;/code>&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/Shiba-Inu-4.webp"
alt="顯示 404" width="800">&lt;figcaption>
&lt;p>顯示 404&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>從上面結果可以知道，因為我們有設定 domain，所以只有符合的才會連接到 Service 。&lt;/p>
&lt;br>
&lt;h4>只設定路徑沒有設定網域&lt;span class="hx-absolute -hx-mt-20" id="只設定路徑沒有設定網域-1">&lt;/span>
&lt;a href="#%e5%8f%aa%e8%a8%ad%e5%ae%9a%e8%b7%af%e5%be%91%e6%b2%92%e6%9c%89%e8%a8%ad%e5%ae%9a%e7%b6%b2%e5%9f%9f-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>一樣使用 &lt;code>apply&lt;/code> 來建立：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f ingress.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ingress.networking.k8s.io/kubernetes-demo-ingress created&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>使用 &lt;code>kubectl get ing&lt;/code> 來查詢 Ingress 狀況：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl get ing
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME CLASS HOSTS ADDRESS PORTS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-demo-ingress nginx * 192.168.64.11 &lt;span style="color:#ae81ff">80&lt;/span> 5m56s&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>接下來我們分別測試寫在 /etc/host 裡面的兩個網域，使用瀏覽器搜尋 &lt;code>test.tw&lt;/code> 跟 &lt;code>test-test.tw&lt;/code>：&lt;/p>
&lt;br>
&lt;ul>
&lt;li>&lt;code>test.tw&lt;/code>&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/Shiba-Inu-3.webp"
alt="成功顯示柴犬" width="1000">&lt;figcaption>
&lt;p>成功顯示柴犬&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ul>
&lt;li>&lt;code>test-test.tw &lt;/code>&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/Shiba-Inu-5.webp"
alt="顯示 404" width="1000">&lt;figcaption>
&lt;p>顯示 404&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>從上面結果可以知道，可以發現 hosts 的部分是 &lt;code>*&lt;/code> ，這代表所有背後指向 &lt;code>192.168.64.11&lt;/code> 這個 IP 的網域都可以直接連接到 Service 物件。&lt;/p>
&lt;br>
&lt;h2>什麼是 Replication Controller ?&lt;span class="hx-absolute -hx-mt-20" id="什麼是-replication-controller-">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-replication-controller-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>大家看到 Controller 就知道 Replication Controller 也是一種 Controller 負責控制 Replication，而 Replication 翻成中文是複製的意思，在 Kubernetes 中 Replication 代表同一種 Pod 的複製品。&lt;/p>
&lt;p>這邊要帶給大家認識一個重要的設定：&lt;code>replica&lt;/code>，&lt;code>replica&lt;/code> 就是複製品的意思，透過這個設定我們就可以快速產生一樣內容的 Pod，舉例來說：今天設定了 &lt;code>replica: 3&lt;/code> 就代表會產生兩個內容一樣的 Pod 出來。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/ReplicationController.webp"
alt="Kubernetes StatefulSet 架構" width="700">&lt;figcaption>
&lt;p>Kubernetes StatefulSet 架構&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>Replication Controller 用途&lt;span class="hx-absolute -hx-mt-20" id="replication-controller-用途">&lt;/span>
&lt;a href="#replication-controller-%e7%94%a8%e9%80%94" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>上面有提到 Replication Controller 可以利用設定 &lt;code>replica&lt;/code> 的方式快速建立 Pod 數量，除了建立之外 Replication Controller 也確保 Pod 數量與我們設定的 &lt;code>replica&lt;/code> 一致，假如今天不小心刪除其中一個 Pod，這時候 Replication Controller 會自動再產生一個新的 Pod 來補齊刪除的 Pod 空缺，所以我們可以善用 Replication Controller 來讓系統更佳穩定。&lt;/p>
&lt;br>
&lt;h3>Replication Controller 寫法&lt;span class="hx-absolute -hx-mt-20" id="replication-controller-寫法">&lt;/span>
&lt;a href="#replication-controller-%e5%af%ab%e6%b3%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們來修改一下之前的 kubernetes-demo.yaml Pod 檔案：(&lt;a href="https://github.com/880831ian/kubernetes-tutorial/tree/master/ReplicationController" target="_blank" rel="noopener">Github 程式碼連結&lt;/a>)&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ReplicationController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo-container&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">880831ian/kubernetes-demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">3000&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>這個設定檔看似複雜但其實很簡單，可以發現 &lt;code>template&lt;/code> 區塊內的設定基本上就是 Pod 的設定，再加上一些屬於 Replication Controller 的設定。&lt;/p>
&lt;p>由於我們要建立的是 Replication Controller，因此在一開始的 &lt;code>spec&lt;/code> 要填的是 Replication Controller 的設定，所以 &lt;code>replica&lt;/code> 會擺在第一個 &lt;code>spec&lt;/code> 內。&lt;/p>
&lt;p>可以再看到 &lt;code>selector&lt;/code>，前面提到 Replication Controller 要控制的就是 Pod 的數量，所以這邊的 &lt;code>selector&lt;/code> 就是要選取 Pod，就跟我們在 Service 要選取 Pod 的一樣。&lt;/p>
&lt;p>最後一個新的設定：&lt;code>template&lt;/code>，&lt;code>template&lt;/code> 就是用來定義 Pod 的資訊，所以 Pod 的內容像是 &lt;code>metadata&lt;/code>、&lt;code>spec&lt;/code> 等等都會寫在 &lt;code>template&lt;/code> 內，所以可以把 &lt;code>template&lt;/code> 想像成不需要寫 &lt;code>apiVersion&lt;/code> 跟 &lt;code>kind&lt;/code> 的 Pod 壓模檔，有了這個觀念再來看 &lt;code>template&lt;/code> 內的描述就很簡單，只是把 Pod 的內容複製過來而已，而 &lt;code>template&lt;/code> 內的 &lt;code>spec&lt;/code> 就是寫上 Pod 的 container 資訊。&lt;/p>
&lt;br>
&lt;h3>Replication Controller 建立&lt;span class="hx-absolute -hx-mt-20" id="replication-controller-建立">&lt;/span>
&lt;a href="#replication-controller-%e5%bb%ba%e7%ab%8b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>老樣子，也是使用 &lt;code>apply&lt;/code> 來建立壓模檔：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f kubernetes-demo.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>replicationcontroller/kubernetes-demo created&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>來查看一下 Replication Controller 是否有成功建立起來，可以使用 &lt;code>kubectl get rc&lt;/code> 來查詢：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get rc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-demo &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> 28s&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>接下來可以查看 Pod 是否有出現 3 個，所以使用 &lt;code>kubectl get po&lt;/code> 來查詢：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get po
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-demo-4zkxm 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 37s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-demo-cp8jt 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 37s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-demo-pt9px 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 37s&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以看到為了不要讓名稱重複，所以 Replication Controller 會在每一個 Pod 名稱後面加入亂數。&lt;/p>
&lt;br>
&lt;p>接下來我們用 &lt;code>minikube dashboard&lt;/code> 來測試一下，是否刪除其中一個 Pod 後，Replication Controller 會自動建立新的：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/rc-1.webp"
alt="刪除隨機一個 Pod" width="1200">&lt;figcaption>
&lt;p>刪除隨機一個 Pod&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>當我們隨機刪除一個 Pod 時，被刪除的 Pod 會 Terminating 準備刪除，且啟動一個新的 Pod ContainerCreating：&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/rc-2.webp"
alt="Pod 服務" width="1200">&lt;figcaption>
&lt;p>Pod 服務&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>當新的 Pod 啟動成功後，舊的 Pod 才會被刪除，所以可以確保我們的服務穩定度。&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/rc-3.webp"
alt="Pod 服務" width="1200">&lt;figcaption>
&lt;p>Pod 服務&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>綜上所述，可以知道 Replication Controller 真的會控制 Pod 數量，那我們刪掉一個 Pod 他就重生一個，這樣不會永遠都刪不完嗎？其實我們可以把 Replication Controller 砍掉就好了，而 Replication Controller 刪除時，也會自動終止底下的 Pod ，最後 Pod 都會自動刪除。&lt;/p>
&lt;p>但其實 Kubernetes 官方不建議使用 Replication Controller 的方式來控制 Pod，而是建議使用 Deployment 搭配 ReplicaSet 來控制，我們接下來要介紹的主題就是：&lt;code>Deployment&lt;/code> 跟 &lt;code>ReplicaSet&lt;/code> 。&lt;/p>
&lt;br>
&lt;h2>什麼是 ReplicaSet ?&lt;span class="hx-absolute -hx-mt-20" id="什麼是-replicaset-">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-replicaset-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>看到 &lt;code>Replica&lt;/code> 大家應該就知道這個跟控制 Pod 的數量有關係了！其實 &lt;code>Replica&lt;/code> 跟 &lt;code>Replication Controller&lt;/code> 很像，&lt;code>ReplcaSet&lt;/code> 提供了更彈性的 selector，在 &lt;code>Replication Controller&lt;/code> 中我們必須要把完整的 &lt;code>key/value&lt;/code> Label 寫上去，在 &lt;code>ReplicaSet&lt;/code> 不用這個麻煩，但 &lt;code>ReplicaSet&lt;/code> 一樣也可以寫上完整的 Label ，這個就看開發者要怎麼去設計了！&lt;/p>
&lt;br>
&lt;h3>ReplcaSet 的特性&lt;span class="hx-absolute -hx-mt-20" id="replcaset-的特性">&lt;/span>
&lt;a href="#replcaset-%e7%9a%84%e7%89%b9%e6%80%a7" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>上面有提到 &lt;code>ReplcaSet&lt;/code> 非常彈性的 selector，這邊要說的是 &lt;code>ReplcaSet&lt;/code> 是如何讓 selector 變得更加彈性，這裡一共要介紹兩種 &lt;code>ReplcaSet&lt;/code> 的 selector 寫法：&lt;/p>
&lt;br>
&lt;ul>
&lt;li>matchLabels&lt;/li>
&lt;/ul>
&lt;p>&lt;code>matchLabels&lt;/code> 其實跟一般的 selector 做的事情一模一樣，也要寫出完整的 Label 出來，整體大概會長像這樣：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;ul>
&lt;li>matchExpressions&lt;/li>
&lt;/ul>
&lt;p>&lt;code>matchExpressions&lt;/code> 則是提供更彈性的選取條件，每一筆條件主要由 key、operator、value 組成，並且使用一個 &lt;code>{ }&lt;/code> 包起來，看起來很像 JS 的 物件型態，整體大概會長像這樣：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchExpression&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - { &lt;span style="color:#f92672">key: app, operator: In, values&lt;/span>: [&lt;span style="color:#ae81ff">demo, test] }&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>看起來似乎很複雜但其實很容易理解，上面的示範中 Expression 翻成中文就是只要 Label 的 key 是 &lt;code>app&lt;/code> 且值符合 &lt;code>[demo, test]&lt;/code> 陣列中的其中一個值的 Pod 就會被選取到。&lt;/p>
&lt;br>
&lt;p>我們在隨便取得例子：假設有一個 &lt;code>matchExpression&lt;/code> 長得像這樣：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchExpression&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - { &lt;span style="color:#f92672">key: env, operator: NotIn, values&lt;/span>: [&lt;span style="color:#ae81ff">hello, hi] }&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們可以得知要選取 Label 的 key 為 &lt;code>env&lt;/code> 且值不能是 &lt;code>[hello, hi]&lt;/code> 其中一個值的 Pod。&lt;/p>
&lt;br>
&lt;h2>什麼是 Deployment ?&lt;span class="hx-absolute -hx-mt-20" id="什麼是-deployment-">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-deployment-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Deployment 是一種負責管理 &lt;code>ReplicaSet&lt;/code> 以及控制 Pod 更新的物件，在先前的文章都沒有提到 Pod 的更新，是因為 Pod 無法直接做更新，必須砍掉重建才會是新的內容，有了 Deployment 之後我們就可以很方便的進行 Pod 的更新了！&lt;/p>
&lt;p>由於 &lt;code>ReplicaSet&lt;/code> 本身也會控制 Pod，所以整個看起來會像是 Deployment 控制 Pod，但其實真正控制 Pod 的是 &lt;code>ReplicaSet&lt;/code> ~&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/deployment.webp"
alt="Deployment 與 ReplicaSet 架構圖" width="500">&lt;figcaption>
&lt;p>Deployment 與 ReplicaSet 架構圖&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>Deployment 的特性&lt;span class="hx-absolute -hx-mt-20" id="deployment-的特性">&lt;/span>
&lt;a href="#deployment-%e7%9a%84%e7%89%b9%e6%80%a7" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>部署一個應用服務&lt;/li>
&lt;/ul>
&lt;p>上面我們提到 Deployment 可以幫助 Pod 進行更新，通常在開發一個產品的時候一定會不斷的更新，透過 Deployment 我們可以快速的更新 Pod 內部的 container，所以通常在部署應用的時候都會使用 Deployment 來進行部署。&lt;/p>
&lt;br>
&lt;ul>
&lt;li>在服務升級過程中可以達成無停機服務遷移 (Zero downtime deployment)&lt;/li>
&lt;/ul>
&lt;p>在 Deployment 幫 Pod 內部 container 進行更新的過程有一個專有名稱叫做 &lt;code>RollingUpdate&lt;/code> ，&lt;code>RollingUpdate&lt;/code> 翻成中文的意思是滾動更新，在更新的過程中 Deployment 會先產生一個新的 ReplicaSet 而這個 ReplicaSet 內部的 Pod 會運行新的內容，待新的 Pod 被 Kubernetes 確認可以正常運行後 Deployment 才會將舊的 ReplicaSet 進行取代的動作，這樣就完成了無停機服務遷移了。&lt;/p>
&lt;br>
&lt;ul>
&lt;li>可以 Rollback 到先前版本&lt;/li>
&lt;/ul>
&lt;p>每一次的 Deployment 在進行 RollingUpdate 的時候都會把當前的 ReplicaSet 做一個版本控制的紀錄，就像是 git commit 一樣，所以我們也可以利用這些紀錄來快速恢復成以前的版本，這些 Pod 也就會變成先前的內容。&lt;/p>
&lt;br>
&lt;p>講完基本的介紹後，接下來要介紹的是要如何撰寫以及建立一個 Deployment：&lt;/p>
&lt;h3>Deployment 搭配 ReplicaSet 寫法&lt;span class="hx-absolute -hx-mt-20" id="deployment-搭配-replicaset-寫法">&lt;/span>
&lt;a href="#deployment-%e6%90%ad%e9%85%8d-replicaset-%e5%af%ab%e6%b3%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://github.com/880831ian/kubernetes-tutorial/tree/master/Deployment-ReplicaSet" target="_blank" rel="noopener">Github 程式碼連結&lt;/a>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">strategy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">RollingUpdate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rollingUpdate&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">maxSurge&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">maxUnavailable&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">minReadySeconds&lt;/span>: &lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">revisionHistoryLimit&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo-container&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">880831ian/kubernetes-demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>看到 Deployment 是不是覺得跟 Replication Controller 非常相似呢？其實 Deployment 就多了再 RollingUpdate 時的設定以及 ReplicaSet 的設定而已，下面來說明一下這些設定：&lt;/p>
&lt;p>首先一開始的 apiVersion 的值已經不是 &lt;code>v1&lt;/code> 了，改成 &lt;code>apps/v1&lt;/code>，由於 Kubernetes 針對 Deployment、RollingUpdate、ReplicaSet 等等設定了新的 &lt;code>apiVersion&lt;/code> 值，通常都用 &lt;code>apps/v1&lt;/code> 都是用來設定跟應用程式有關的架設，所以 Deployment 這邊要記得改成 &lt;code>apps/v1&lt;/code> 歐！&lt;/p>
&lt;br>
&lt;p>在 &lt;code>spec&lt;/code> 的地方有看到 &lt;code>strategy&lt;/code> 新的設定值，這個主要用來設定 Deployment 更新的策略，這裡的 &lt;code>strategy.type&lt;/code> 有兩種設定：&lt;/p>
&lt;ul>
&lt;li>RollingUpdate&lt;/li>
&lt;/ul>
&lt;p>此為預設值，先建立新的 ReplicaSet 並控制新內容的 Pod，待新 Pod 也可以正常運作後，才會通知 ReplicaSet 將原有的 Pod 給移除，由於過程中會有新舊兩種 Pod 同時上線，因此會有一段時間是新舊內容會隨機出現的情形發生。&lt;/p>
&lt;p>這邊可以看到除了 &lt;code>type&lt;/code> 以外還寫了 &lt;code>maxSurage&lt;/code> 以及 &lt;code>maxUnavailablle&lt;/code>，這兩個設定值為 RollingUpdate 過程的設定，接下來一樣說明一下兩個設定的功能：&lt;/p>
&lt;p>&lt;code>macSurge&lt;/code>：代表 ReplicaSet 可以產生比 Deployment 設定中的 &lt;code>replica&lt;/code> 所設定的數量還多幾個出來，多新增 Pod 的好處是在 RollingUpdate 過程中可以減少舊內容顯示在頁面的機率。&lt;/p>
&lt;p>&lt;code>macUnavailable&lt;/code>：代表在 RollingUpdate 過程中，可以允許多少的 Pod 無法使用，假設 &lt;code>macSurge&lt;/code> 設定非 0，&lt;code>maxUnavailable&lt;/code> 也要設定非 0。&lt;/p>
&lt;br>
&lt;ul>
&lt;li>Recreate&lt;/li>
&lt;/ul>
&lt;p>先通知當前 ReplicaSet 把舊的 Pod 砍掉再產生新的 ReplicaSet 並控制新內容的 Pod，由於先砍掉 Pod 才建立新的 Pod ，所以中間有一段時間伺服器會無法連線。&lt;/p>
&lt;p>也因為 Recreate 會砍掉重建，因此 Recreate 無法像 RollingUpdate 設定 &lt;code>maxSurge&lt;/code> 以及 &lt;code>macUnavailable&lt;/code>。&lt;/p>
&lt;br>
&lt;p>講完 Deployment 的更新流程設定後，接下來要講 Deployment 完成更新後的設定，這邊有兩種設定：&lt;/p>
&lt;ul>
&lt;li>minReadySeconds&lt;/li>
&lt;/ul>
&lt;p>&lt;code>minReadySeconds&lt;/code> 代表當新的 Pod 建立好並且運行的 container 沒有 crash 的情況下，最少需要多少時間可以開始接受 Request，預設為 0 秒，代表當 Pod 一被建立起來，就可以馬上開始接受 Request，假設今天 container 在剛運行的時後需要花時間做初始化，這時候就可以利用 &lt;code>minReadySeconds&lt;/code> 讓此 Pod 不會馬上接受到 Request ，這個是選填的設定。&lt;/p>
&lt;br>
&lt;ul>
&lt;li>revisionHistoryLimit&lt;/li>
&lt;/ul>
&lt;p>每次 Deployment 在進行更新的時候，都會產生一個新的 ReplicaSet 用來進行版本控制，在 Deployment 中這個專有名稱為 &lt;code>revision&lt;/code>，所以這個設定就是要設定最多只會有多少個 &lt;code>revision&lt;/code>，這個也是選填的設定。&lt;/p>
&lt;br>
&lt;h3>Deployment 建立&lt;span class="hx-absolute -hx-mt-20" id="deployment-建立">&lt;/span>
&lt;a href="#deployment-%e5%bb%ba%e7%ab%8b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>老樣子，使用 &lt;code>apply&lt;/code> 來建立 Deployment，我們可使用 &lt;code>kubectl get deploy&lt;/code> 來查看是否建立成功：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get deploy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME READY UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-deployment 3/3 &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> 8m31s&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>由於 Deployment 直接管理 ReplcaSet，因此我們可以查看 ReplcaSet 是否也有被建立起來：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get rs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-deployment-dc5c59fdb &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> 10m&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以看到 ReplcaSet 後面會自動加上一小段亂數，這邊是 Deployment 在建立 ReplicaSet 的時候加進去的，這樣之後可以更方便的利用 ReplcaSet 進行 rollback 的動作。&lt;/p>
&lt;br>
&lt;p>由於 ReplicaSet 會直接管理 Pod，因此我們也可以查看 Pod 是否有被建立起來：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get po
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-deployment-dc5c59fdb-cjbz6 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 12m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-deployment-dc5c59fdb-mjvd7 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 12m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-deployment-dc5c59fdb-r92zt 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 11m&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>那我們用 &lt;code>minikube dashboard&lt;/code> 來查看一下：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/DeploymentReplicaSet.webp"
alt="minikube dashboard 查看 Deployment 與 ReplicaSet" width="1200">&lt;figcaption>
&lt;p>minikube dashboard 查看 Deployment 與 ReplicaSet&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>Deployment 的最後要來說的是要如何更新底下的 Pod 呢，大家就接著往下看囉！&lt;/p>
&lt;h3>如何更新 Deployment 內部的 Pod&lt;span class="hx-absolute -hx-mt-20" id="如何更新-deployment-內部的-pod">&lt;/span>
&lt;a href="#%e5%a6%82%e4%bd%95%e6%9b%b4%e6%96%b0-deployment-%e5%85%a7%e9%83%a8%e7%9a%84-pod" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>大家都知道 Pod 是 Kubernetes 最小的運行單位，所以更新 Pod 的意思就是把內部運行的 container 進行更新，也就是說我們只要更新 Pod 的 image 就可以順利的讓 Pod 運行最新的內容，Deployment 就是運用這個原理才進行 Pod 的內容更新，方法也很簡單只要利用 &lt;code>Set&lt;/code> 這個參數就可以了，可以使用 &lt;code>kubectl set -h&lt;/code> 可以看 &lt;code>set&lt;/code> 這個參數真正的用法。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/set.webp"
alt="kubectl set" width="800">&lt;figcaption>
&lt;p>kubectl set&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>可以看到 &lt;code>set&lt;/code> 後面還要接 &lt;code>SUBCOMMAND&lt;/code>，而 &lt;code>SUBCOMMAND&lt;/code> 就是 &lt;code>Available Commands&lt;/code> 的內容，由於我們要更新的是 image 所以這邊的 &lt;code>SUBCOMMAND&lt;/code> 會是 &lt;code>image&lt;/code>，完整指令是：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl set image deployment/kubernetes-deployment kubernetes-demo-container&lt;span style="color:#f92672">=&lt;/span>880831ian/kubernetes-demo:v1 --record
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deployment.apps/kubernetes-deployment image updated&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>使用 set 來更新 Pod，格式是 &lt;code>kubectl set image deployment/&amp;lt;deployment name&amp;gt; &amp;lt;pod name&amp;gt;=&amp;lt;要更新的 image&amp;gt;&lt;/code>，後面加上 &lt;code>--record&lt;/code> 參數，這樣會紀錄每次更新的時候到底更新哪些內容，這樣日後要進行 rollback 也會比較容易知道要 rollback 回哪個 revision，由於要顯示差異，所以在 &lt;a href="https://hub.docker.com/repository/docker/880831ian/kubernetes-demo" target="_blank" rel="noopener">dockerhub&lt;/a> 上又多推一個版本 &lt;code>v1&lt;/code>，將原本柴犬的圖片改成 kubernetes logo，等於我們更新是從 &lt;code>kubernetes-demo:latest&lt;/code> 更新至 &lt;code>kubernetes-demo:v1&lt;/code>，我們來看看它的變化吧！&lt;/p>
&lt;br>
&lt;p>這是還沒更新 Pod 前的 Deployment 與 ReplicaSet：&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/DeploymentReplicaSet.webp"
alt="Deployment 與 ReplicaSet" width="1200">&lt;figcaption>
&lt;p>Deployment 與 ReplicaSet&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>我們用 set 下完更新指令後，可以查看 ReplicaSet 以及 Pod 在更新過程中的變化：&lt;/p>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/set-1.webp"
alt="ReplicaSet 以及 Pod 在更新過程中的變化" width="1200">&lt;figcaption>
&lt;p>ReplicaSet 以及 Pod 在更新過程中的變化&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>可以發現 strategy 為 RollingUpdate 的時候並不會把舊有的 Pod 移除反而會讓新舊 Pod 同時上線，以達到無停機服務的作用，但這樣在網頁中就有可能會同時出現新舊內容。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/set-2.webp"
alt="因為 strategy 為 RollingUpdate，所以會同時出現新舊內容" width="1200">&lt;figcaption>
&lt;p>因為 strategy 為 RollingUpdate，所以會同時出現新舊內容&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>最後等到新的 Pod 已經建立完成，且正常運作，ReplicaSet 就會把舊的 Pod 給移掉：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/set-3.webp"
alt="新的 Pod 建立成功，並刪除舊 Pod" width="1200">&lt;figcaption>
&lt;p>新的 Pod 建立成功，並刪除舊 Pod&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>再次瀏覽就可以發現已經變成新的內容了！代表我們完成更新動作～&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/set-4.webp"
alt="更新至 kubernetes-demo:v1" width="600">&lt;figcaption>
&lt;p>更新至 kubernetes-demo:v1&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>Deployment 回朔版本&lt;span class="hx-absolute -hx-mt-20" id="deployment-回朔版本">&lt;/span>
&lt;a href="#deployment-%e5%9b%9e%e6%9c%94%e7%89%88%e6%9c%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們講完更新後，接著要講如何 rollback 回以前的版本，首先我們必須使用 &lt;code>rollout&lt;/code> 這個參數，一樣使用 &lt;code>kubectl rollout -h&lt;/code> 可以查看 rollout 的用法，跟 &lt;code>set&lt;/code> 十分相似。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/rollout.webp"
alt="更新至 kubernetes-demo:v1" width="800">&lt;figcaption>
&lt;p>更新至 kubernetes-demo:v1&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>由於我們這邊要 rollback ，所以 &lt;code>SUBCOMMAND&lt;/code> 會使用 &lt;code>undo&lt;/code>，我們上面有用 &lt;code>--record&lt;/code> 可以查看要 rollback 的版本，所以我們這邊寫法會長像這樣：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl rollout undo deployment/kubernetes-deployment --to-revision&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deployment.apps/kubernetes-deployment rolled back&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>格式是 &lt;code>kubectl rollout undo deployment/&amp;lt;deployment name&amp;gt; --to-revision=&amp;lt;--record 版本&amp;gt;&lt;/code>&lt;/p>
&lt;br>
&lt;p>就可以看到又回復成以前的柴犬囉 &amp;gt;&amp;lt;&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/Shiba-Inu-3.webp"
alt="成功還原柴犬" width="1000">&lt;figcaption>
&lt;p>成功還原柴犬&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>為甚麼不用 Replication Controller&lt;span class="hx-absolute -hx-mt-20" id="為甚麼不用-replication-controller">&lt;/span>
&lt;a href="#%e7%82%ba%e7%94%9a%e9%ba%bc%e4%b8%8d%e7%94%a8-replication-controller" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>最後要討論的是為什麼要不用 Replication Controller 而是改用 ReplicaSet + Deployment？&lt;/p>
&lt;p>由於實際再使用 Kubernetes 時架構會比現在練習的還要複雜，所以用 ReplicaSet 讓 selector 用更彈性的方式選取 Pod 會是比較好的做法。&lt;/p>
&lt;br>
&lt;h2>什麼是 Stateless 和 Stateful&lt;span class="hx-absolute -hx-mt-20" id="什麼是-stateless-和-stateful">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-stateless-%e5%92%8c-stateful" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>Stateless&lt;span class="hx-absolute -hx-mt-20" id="stateless">&lt;/span>
&lt;a href="#stateless" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Stateless 顧名思義就是無狀態，我們可以想成我們每次與伺服器要資料的過程中都不會被伺服器記錄狀態，&lt;strong>每一次的 Request 都是獨立的&lt;/strong>，彼此是沒有關聯性的，也就是我們當下獲得的資料只能當下使用沒有辦法保存，靜態網頁通常都是一種 Stateless 的應用。&lt;/p>
&lt;p>舉個例子來說：今天我想要查詢火車時刻表，我可以藉由 Google 搜尋火車時刻表，並點選連結，或是直接在瀏覽器輸入 &lt;code>https://tip.railway.gov.tw/&lt;/code> ，這兩種結果最後都會一致，並不會因為我的操作不同而產生不同結果，這就是一種 Stateless 的表現。&lt;/p>
&lt;br>
&lt;h3>Stateful&lt;span class="hx-absolute -hx-mt-20" id="stateful">&lt;/span>
&lt;a href="#stateful" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Stateful 就是 Stateless 的相反，也就是每次的 Request 都會被記錄下來，日後都可以進行存取，Stateful 最常見的例子是資料庫，所以我們可以理解成 Stateful 背後一定會有一個負責更新內容的儲存空間。&lt;/p>
&lt;p>幾個例子來說：今天我們想要查看 Google 雲端硬碟的內容，我們必須先登入自己的帳號才可以查看內容，這種有操作先後順序才會有結果的就是一種 Stateful 的表現。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/stateless_ful.webp"
alt="Stateless vs Stateful" width="700">&lt;figcaption>
&lt;p>Stateless vs Stateful&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>那為什麼要提到 Stateless 跟 Stateful 呢？&lt;/p>
&lt;p>因為跟 Pod 有很大的關係，在 Kubernetes 中 Pod 就屬於 Stateless 的，我們前面有提到 Stateless 的特性就是每次的 Request 都是獨立的，這樣有一個好處是可以快速的擴充。&lt;/p>
&lt;p>在 &lt;a href="../k8s/#pod" >Kubernetes - 基本篇中的 Pod&lt;/a> 有提到：Pod 是 Kubernetes 中最小的單位，由於 Pod 是屬於 Stateless 的，即便今天同一種內容的 Pod 有很多個也沒有關係，因為每次的 Request 都是獨立的，多個 Pod 就多個連線的端點而已。&lt;/p>
&lt;br>
&lt;h3>Kubernetes 的 Stateful&lt;span class="hx-absolute -hx-mt-20" id="kubernetes-的-stateful">&lt;/span>
&lt;a href="#kubernetes-%e7%9a%84-stateful" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>上面有說到 Kubernetes 的 Pod 是 Stateless 的，那難道 Kubernetes 沒有辦法做 Stateful 應用嗎？其實是可以的，Kubernetes 為了 Stateful 有特別開啟一個類別叫：&lt;code>StatefulSet&lt;/code>&lt;/p>
&lt;br>
&lt;p>這邊會簡單說明一下 &lt;code>StatefulSet&lt;/code> 的架構：&lt;/p>
&lt;h3>StatefulSet&lt;span class="hx-absolute -hx-mt-20" id="statefulset">&lt;/span>
&lt;a href="#statefulset" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>StatefulSet 一共有兩個重要的部分：&lt;/p>
&lt;ul>
&lt;li>Persistent Volume Claim&lt;/li>
&lt;/ul>
&lt;p>前面有說到 Stateful 背後有一個更新內容的儲存空間，在 Kubernetes 中負責管理儲存的空間是 &lt;code>Volume&lt;/code>，作用與 Docker 的 Volume 幾乎一模一樣，但 Kuberntes 的 Volume 只是在 Pod 中暫時存放的儲存空間，當 Pod 移除之後這個儲存空間就會消失，為了要在 Kubernetes 中建立一個像是資料庫可以永久儲存的空間，這個 Volume 不能被包含在 Pod 中，而這個就是 &lt;code>Persistent Volume (PV)&lt;/code>。&lt;/p>
&lt;p>Persistent Volume Claim (PVC) 就是負責連接 Persistent Volume (PV) 的物件，所以可以想像一下今天有多少的 Persistent Volume 就會有多少的 Persistent Volume Claim。&lt;/p>
&lt;br>
&lt;ul>
&lt;li>Headless Service&lt;/li>
&lt;/ul>
&lt;p>還記得在 &lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-service-" >Service&lt;/a> 有提到 ClusterIP 嗎？其實每個 Service 都會有自己一組的 ClusterIP (ExternalName 形式的除外)，所以 Headless 的意思其實就是不要有 ClusterIP，方法也很簡單，直接在設定檔中加入 &lt;code>ClusterIP: None&lt;/code> 就可以了！&lt;/p>
&lt;p>這麼做有什麼好處？由於 Headless Service 並沒有直接跟 Pod 有對應關係，因此 Service 本身沒有 ClusterIP，所以 Kubernetes 內部在溝通時就沒有辦法把我們設定好的 Service 名稱進行 IP 轉換，不過 Headless Service 會將內部的 Pod 的都建立屬於自己的 domain，所以我們可以自由的選擇要連接到哪一個 Pod。&lt;/p>
&lt;p>這時候你會說可以用手動來連接呀？但因為 Service 一般是跟著 Pod 的 Label ，所以一個 Service 都會連接許多個 Pod，這樣我們就沒有辦法針對某個 Pod 來做事情，所以 Headless Service 在 Stateful 中也會被建立。&lt;/p>
&lt;br>
&lt;p>我們一直強調說 Kubernetes 最小的單位是 Pod，即便是 StatefulSet 也會有 Pod，只是這個 Pod 會歸 StatefulSet 管理，綜合上面所述可以知道一個 StatefulSet 裡面除了執行的 Pod 外還會有負責跟 Persistent Volume 連接的 Persistent Volume Claim，整體的 StatefulSet 架構會長得像這樣：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/StatefulSet.webp"
alt="Kubernetes StatefulSet 架構" width="300">&lt;figcaption>
&lt;p>Kubernetes StatefulSet 架構&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>基本上 StatefulSet 中在 Pod 的管理上都是與 Deployment 相同，基於相同的 container spec 來進行; 而其中的差別在於 &lt;strong>StatefulSet controller 會為每一個 Pod 產生一個固定識別資訊，不會因為 Pod 改變後而有所變動&lt;/strong>。&lt;/p>
&lt;br>
&lt;h3>什麼時候需要使用 StatefulSet ?&lt;span class="hx-absolute -hx-mt-20" id="什麼時候需要使用-statefulset-">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%99%82%e5%80%99%e9%9c%80%e8%a6%81%e4%bd%bf%e7%94%a8-statefulset-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>如何研判哪些 Application 需要使用 StatefulSet 來部署？只要符合以下條件，就需要使用 StatefulSet 來進行部署&lt;/p>
&lt;ul>
&lt;li>需要穩定 &amp;amp; 唯一的網路識別 (pod 改變後的 pod name &amp;amp; hostname 都不會變動)&lt;/li>
&lt;li>需要穩定的 Persistent storage (pod 改變後還是能存取相同的資料，基本上用 PVC 就可以解決)&lt;/li>
&lt;li>部署 &amp;amp; 擴展的時候，每個 Pod 的產生都是有其順序且逐一慢慢完成的&lt;/li>
&lt;li>進行更新操作時，也是與上面的需求相同&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>StatefulSet 有什麼限制？&lt;span class="hx-absolute -hx-mt-20" id="statefulset-有什麼限制">&lt;/span>
&lt;a href="#statefulset-%e6%9c%89%e4%bb%80%e9%ba%bc%e9%99%90%e5%88%b6" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>v1.5 以前版本不支援，v1.5 ~ v1.9 之間是 beta，v1.9 後正式支援&lt;/li>
&lt;li>storage 的部分一定要綁定 PVC，並綁定到特定的 StorageClass or 預先配置好的 Persistent Volume，確保 Pod 被刪除後資料依然存在。&lt;/li>
&lt;li>需要額外定義一個 Headless Service 與 StatefulSet 搭配，確保 Pod 有固定的 network identity。&lt;/li>
&lt;/ul>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>network identity：&lt;/p>
&lt;p>代表可以直接透過 domain name 直接取的 Pod IP; 實現的方法則是部署一個 ClusterIP=None 的 Service，讓 Cluster 內部存取 Service 時，可以直接連到 Pod 而不是 Service IP。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>StatefulSet 寫法&lt;span class="hx-absolute -hx-mt-20" id="statefulset-寫法">&lt;/span>
&lt;a href="#statefulset-%e5%af%ab%e6%b3%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>要寫一個 StatefulSet ，有幾個重要的部分必須涵蓋：&lt;/p>
&lt;ol>
&lt;li>Application &amp;amp; Persistent Volume Claim&lt;/li>
&lt;li>Headless Service&lt;/li>
&lt;li>&lt;code>.spec.selector&lt;/code> 所定義的內容 (matchLabels) 必須與 &lt;code>.spec.template.metadata.labels&lt;/code> 相同。&lt;/li>
&lt;/ol>
&lt;p>其他部分都與 &lt;code>Deployment&lt;/code> 幾乎相同 ~&lt;/p>
&lt;br>
&lt;p>我們先來看看要怎麼定義 Application &amp;amp; Persistent Volume Claim (把 Service 跟 StatefulSet 寫在一起) (&lt;a href="https://github.com/880831ian/kubernetes-tutorial/tree/master/StatefulSet" target="_blank" rel="noopener">Github 程式碼連結&lt;/a>)&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">web&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">clusterIP&lt;/span>: &lt;span style="color:#ae81ff">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">StatefulSet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">web&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">serviceName&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nginx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">k8s.gcr.io/nginx-slim:0.8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">web&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMounts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">www&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/usr/share/nginx/html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeClaimTemplates&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">www&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">accessModes&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;ReadWriteOnce&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>: &lt;span style="color:#ae81ff">1Gi&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我們先打開一個 Terminal 來觀察 StatefulSet 創建 Pod 的過程：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get pods -w -l app&lt;span style="color:#f92672">=&lt;/span>nginx&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我們一樣使用 &lt;code>kubectl apply&lt;/code> 來創建定義在 &lt;code>web.yaml&lt;/code> 中的 Headless Service 和 StatefulSet。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f web.yaml&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>我們看一下剛剛的 StatefulSet 創建 Pod 的過程，可以發現我們擁有 N 的副本的 StatefulSet ， Pod 部署時會按照 {0 &amp;hellip;. N-1} 的序號依序創建。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-0 0/1 Pending &lt;span style="color:#ae81ff">0&lt;/span> 0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-0 0/1 Pending &lt;span style="color:#ae81ff">0&lt;/span> 0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-0 0/1 ContainerCreating &lt;span style="color:#ae81ff">0&lt;/span> 0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-0 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 2s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-1 0/1 Pending &lt;span style="color:#ae81ff">0&lt;/span> 0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-1 0/1 Pending &lt;span style="color:#ae81ff">0&lt;/span> 0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-1 0/1 ContainerCreating &lt;span style="color:#ae81ff">0&lt;/span> 0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-1 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 3s&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以發現 web-1 Pod 是在 web-0 Pod 處在 Running 狀態才會被啟動。此外，可以發現就跟我們上面講的一樣，StatefulSet 中的 Pod 擁有一個獨一無二的身份標記，基於 StatefulSet 控制器分配給每個 Pod 的唯一順序索引。&lt;/p>
&lt;p>Pod 名稱的格式是 &amp;lt; statefulset name &amp;gt;-&amp;lt; ordinal index &amp;gt;，像我們 &lt;code>web&lt;/code> 這個 StatefulSet 有兩個副本，所以它創建了兩個 Pod：&lt;code>web-0&lt;/code>、&lt;code>web-1&lt;/code>。&lt;/p>
&lt;br>
&lt;h3>StatefulSet 測試&lt;span class="hx-absolute -hx-mt-20" id="statefulset-測試">&lt;/span>
&lt;a href="#statefulset-%e6%b8%ac%e8%a9%a6" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們知道 StatefulSet 它有使用穩定的網路身份以及 PV 的永久儲存，那我們就分別來測試看看：&lt;/p>
&lt;h4>StatefulSet 穩定的網路身份&lt;span class="hx-absolute -hx-mt-20" id="statefulset-穩定的網路身份">&lt;/span>
&lt;a href="#statefulset-%e7%a9%a9%e5%ae%9a%e7%9a%84%e7%b6%b2%e8%b7%af%e8%ba%ab%e4%bb%bd" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們先使用 &lt;code>kubectl exec&lt;/code> 在每個 Pod 中執行 &lt;code>hostname&lt;/code>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#66d9ef">for&lt;/span> i in &lt;span style="color:#ae81ff">0&lt;/span> 1; &lt;span style="color:#66d9ef">do&lt;/span> kubectl exec &lt;span style="color:#e6db74">&amp;#34;web-&lt;/span>$i&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -- sh -c &lt;span style="color:#e6db74">&amp;#39;hostname&amp;#39;&lt;/span>; &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-1&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>再使用 &lt;code>kubectl run&lt;/code> 來運行一個提供 &lt;code>nslookup&lt;/code> 命令的容器，通過對 Pod 的主機名執行 &lt;code>nslookup&lt;/code>，我們可以檢查他在集群內部的 DNS 位置。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl run -i --tty --image busybox:1.28 dns-test --restart&lt;span style="color:#f92672">=&lt;/span>Never --rm /bin/sh&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>啟動一個新的 shell ，並運行 &lt;code>nslookup web-0.nginx &lt;/code> 跟 &lt;code>nslookup web-1.nginx&lt;/code>：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>/ &lt;span style="color:#75715e"># nslookup web-0.nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Server: 10.96.0.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name: web-0.nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Address 1: 172.17.0.5 web-0.nginx.default.svc.cluster.local
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/ &lt;span style="color:#75715e"># nslookup web-1.nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Server: 10.96.0.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name: web-1.nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Address 1: 172.17.0.6 web-1.nginx.default.svc.cluster.local&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以看到 Headless Service 的 CHANCE 指向 SRV 記錄 (記錄每個 Running 的 Pod)。SRV 紀錄指向一個包含 Pod IP 位址的記錄表。&lt;/p>
&lt;br>
&lt;p>我們使用 &lt;code>kubectl delete pod -l app=nginx&lt;/code> 刪除 Pod 後，會發現 Pod 的序號、主機名、SRV 條目和記錄名稱都沒有改變！&lt;/p>
&lt;br>
&lt;h4>StatefulSet 永久儲存&lt;span class="hx-absolute -hx-mt-20" id="statefulset-永久儲存">&lt;/span>
&lt;a href="#statefulset-%e6%b0%b8%e4%b9%85%e5%84%b2%e5%ad%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>我們先查看 &lt;code>web-0&lt;/code> 跟 &lt;code>web-1&lt;/code> 的 PersistentVolumeClaims：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get pvc -l app&lt;span style="color:#f92672">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-web-0 Bound pvc-e9a23104-d018-4d73-8cd9-89e5ea67f96c 1Gi RWO standard 39m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-web-1 Bound pvc-00dd6c87-6d95-4d04-9c1b-49b43441f4a1 1Gi RWO standard 38m&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>StatefulSet 控制器創建兩個 PersistentVolumeClaims，綁定兩個 PersistentVolumes，因為我們配置是動態提供 PersistentVolume，所有的 PersistentVolume 都是自動創建和綁定的。&lt;/p>
&lt;p>Nginx web 服務器默認會加載位於 &lt;code>/usr/share/nginx/html/index.html&lt;/code> 的 index 文件。因此我們在 &lt;code>spec&lt;/code> 中的 &lt;code>volumeMounts&lt;/code> 將 &lt;code>/usr/share/nginx/html&lt;/code> 資料夾由一個 PersistentVolume 支持。&lt;/p>
&lt;br>
&lt;p>那我們將 Pod 主機名稱寫入 &lt;code>index.html&lt;/code> ，再刪掉 Pod 看看寫入內容是否還會存在：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#66d9ef">for&lt;/span> i in &lt;span style="color:#ae81ff">0&lt;/span> 1; &lt;span style="color:#66d9ef">do&lt;/span> kubectl exec &lt;span style="color:#e6db74">&amp;#34;web-&lt;/span>$i&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -- sh -c &lt;span style="color:#e6db74">&amp;#39;echo &amp;#34;$(hostname)&amp;#34; &amp;gt; /usr/share/nginx/html/index.html&amp;#39;&lt;/span>; &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#66d9ef">for&lt;/span> i in &lt;span style="color:#ae81ff">0&lt;/span> 1; &lt;span style="color:#66d9ef">do&lt;/span> kubectl exec -i -t &lt;span style="color:#e6db74">&amp;#34;web-&lt;/span>$i&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -- curl http://localhost/; &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-1&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>當我們刪除 Pod 後，如果沒有使用 PersistentVolumeClaims 去綁定 PersistentVolumes 的話，資料就會消失，那我們來看看有綁定的結果：&lt;/p>
&lt;p>使用 &lt;code>kubectl delete pod -l app=nginx&lt;/code> 刪除 Pod：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>pod &lt;span style="color:#e6db74">&amp;#34;web-0&amp;#34;&lt;/span> deleted
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pod &lt;span style="color:#e6db74">&amp;#34;web-1&amp;#34;&lt;/span> deleted&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>再次使用 &lt;code>kubectl get pod -w -l app=nginx&lt;/code> 來檢查 Pod 的狀態：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>web-0 0/1 ContainerCreating &lt;span style="color:#ae81ff">0&lt;/span> 0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-0 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 2s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-1 0/1 Pending &lt;span style="color:#ae81ff">0&lt;/span> 0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-1 0/1 Pending &lt;span style="color:#ae81ff">0&lt;/span> 0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-1 0/1 ContainerCreating &lt;span style="color:#ae81ff">0&lt;/span> 0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-1 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 1s&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>一樣使用 &lt;code>for i in 0 1; do kubectl exec -i -t &amp;quot;web-$i&amp;quot; -- curl http://localhost/; done&lt;/code> 來查看：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>web-0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web-1&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以發現 &lt;code>web-0&lt;/code>、&lt;code>web-1&lt;/code> 雖然重新啟動，但依舊會監聽它們主機名，因為和它們的 PersistentVolumeClaim 相關聯的 PersistentVolume 被重新掛載到了各自的 &lt;code>volumeMount&lt;/code> 上。&lt;/p>
&lt;br>
&lt;h2>什麼是 ConfigMap ?&lt;span class="hx-absolute -hx-mt-20" id="什麼是-configmap-">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-configmap-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>看到 Config 應該會聯想到與設定檔有關，沒錯 ConfigMap 通常都是用來存放設定檔用的，換句話來說這個物件會直接連結一個或多個檔案，而 ConfigMap 通常都是用來存放偏向部署面的設定檔，像是資料庫的初始化設定、nginx 設定檔等等，這種不用被包進去 image 內，但需要讓 container 可以使用的檔案。&lt;/p>
&lt;br>
&lt;h3>ConfigMap 特性&lt;span class="hx-absolute -hx-mt-20" id="configmap-特性">&lt;/span>
&lt;a href="#configmap-%e7%89%b9%e6%80%a7" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>一個 ConfigMap 物件可以放一個或多個設定檔：我們上面有提到它是用來存放設定檔用的，會直接連接該設定檔。&lt;/li>
&lt;li>無需修改程式碼，可以替換不同環境的設定檔：由於設定檔都交由 ConfigMap 管理，並不是包在 image 內，因此可以藉由修改 ConfigMap 的方式來達到不用更新 Pod 內容就可以更換設定檔的作用。&lt;/li>
&lt;li>統一存放所有的設定檔：一個 ConfigMap 可以連結一個以上的設定檔，因此也可以將該專案會用到的所有設定檔通通存放在同一個 ConfigMap 物件中進行管理。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>如何建立 ConfigMap？&lt;span class="hx-absolute -hx-mt-20" id="如何建立-configmap">&lt;/span>
&lt;a href="#%e5%a6%82%e4%bd%95%e5%bb%ba%e7%ab%8b-configmap" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>由於 ConfigMap 可以直接存入設定檔，所以我們以現有設定檔為基準，接下來要用 &lt;code>create&lt;/code> 這個參數來建立 ConfipMap 物件出來，這時可能會想，之前都是使用 &lt;code>apply&lt;/code> 怎麼這次要改用 &lt;code>create&lt;/code>呢！？ 雖然兩者都有建立的意思，但背後實作的技術完全不同：&lt;/p>
&lt;ul>
&lt;li>&lt;code>create&lt;/code> 使用的是 &lt;a href="https://kubernetes.io/docs/tasks/manage-kubernetes-objects/imperative-config/" target="_blank" rel="noopener">Imperative Management&lt;/a>，Imperative Management 會告訴 Kubernetes 我目前的動作要做什麼，例如：&lt;code>create&lt;/code>、&lt;code>delete&lt;/code>、&lt;code>replace&lt;/code> 某個物件。&lt;/li>
&lt;li>&lt;code>apply&lt;/code> 是使用 &lt;a href="https://kubernetes.io/docs/tasks/manage-kubernetes-objects/declarative-config/" target="_blank" rel="noopener">Declarative Management&lt;/a>，Declarative Management 是用宣告的方式來建立物件，更白話一點就是我希望這個物件要長怎麼樣，所以 &lt;code>apply&lt;/code> 通常都會搭配 yaml 檔，而這份 yaml 檔就會在 &lt;code>kind&lt;/code> 這個設定值告訴 Kubernetes 這個物件要長成什麼樣子。&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>因為我們這次要直接使用現有的設定檔來建立 ConfigMap，所以這時候不能使用 &lt;code>apply&lt;/code> 的方式，只能使用 &lt;code>create&lt;/code> 來建立，指令也很簡單：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl create configmap &amp;lt;configmapName&amp;gt; --from-file&lt;span style="color:#f92672">=&lt;/span>&amp;lt;filePath&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/configmap.webp"
alt="建立 ConfigMap" width="1000">&lt;figcaption>
&lt;p>建立 ConfigMap&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>建立完成使用 &lt;code>get&lt;/code> 來查詢是否正確建立 ConfigMap：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/configmap_1.webp"
alt="使用 get 查詢是否正確 ConfigMap" width="700">&lt;figcaption>
&lt;p>使用 get 查詢是否正確 ConfigMap&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>最後可以下 &lt;code>describe&lt;/code> 這個參數來查看 ConfigMap 的內容，會發現裡面就是我們設定檔的完整內容：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/configmap_2.webp"
alt="使用 describe 查看 ConfigMap 的內容" width="800">&lt;figcaption>
&lt;p>使用 describe 查看 ConfigMap 的內容&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>什麼是 Secrets ?&lt;span class="hx-absolute -hx-mt-20" id="什麼是-secrets-">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-secrets-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>看到 Secrets 這個名字就知道這是非常機密的物件，相較於 ConfigMap 是用來存放部署面的檔案，Secrets 通常都是用來存機密的資料，像是使用者帳號、SSL 憑證等。&lt;/p>
&lt;h3>Secrets 特性&lt;span class="hx-absolute -hx-mt-20" id="secrets-特性">&lt;/span>
&lt;a href="#secrets-%e7%89%b9%e6%80%a7" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>上面 ConfigMap 提到的特性 Secrets 一樣，比較特別的是 Secrets 會將內部的資料進行 base64 編碼。因為重新編碼所以可以確保資料相較於 ConfigMap 下安全一些，所以建議如果是機密性的資料就存在 Secrets 裡面吧！&lt;/p>
&lt;br>
&lt;h3>如何建立 Secrets？&lt;span class="hx-absolute -hx-mt-20" id="如何建立-secrets">&lt;/span>
&lt;a href="#%e5%a6%82%e4%bd%95%e5%bb%ba%e7%ab%8b-secrets" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>我們一樣用現有的檔案來做基準作為示範，由於上面 ConfigMap 只存入一個檔案而已，所以這邊 Secrets 我們改成存入多個檔案：&lt;/p>
&lt;p>一樣用 &lt;code>create&lt;/code> 的參數進行 Secrets 建立，但這邊要多加一個 &lt;code>SUBCOMMAND&lt;/code> 叫 &lt;code>generic&lt;/code>，generic 代表意思是從本機檔案、目錄建立 Secrets，接下來只要下：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl create secret generic &amp;lt;secretName&amp;gt; --from-file&lt;span style="color:#f92672">=&lt;/span>&amp;lt;filePath&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/secret.webp"
alt="建立 Secrets" width="800">&lt;figcaption>
&lt;p>建立 Secrets&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>建立完成使用 &lt;code>get&lt;/code> 來查詢是否正確建立 Secrets：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/secret_1.webp"
alt="使用 get 查詢是否正確 Secrets" width="700">&lt;figcaption>
&lt;p>使用 get 查詢是否正確 Secrets&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>最後一樣可以下 &lt;code>describe&lt;/code> 這個參數來查看 Secrets 的內容，但因為加密所以不會顯示原本內容，只會看到的確有兩個檔案：&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s-advanced/secret_2.webp"
alt="使用 describe 查看 Secrets 的內容" width="700">&lt;figcaption>
&lt;p>使用 describe 查看 Secrets 的內容&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Kubernetes 那些事 — Service 篇：&lt;a href="https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-service-%E7%AF%87-d19d4c6e945f" target="_blank" rel="noopener">https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-service-%E7%AF%87-d19d4c6e945f&lt;/a>&lt;/p>
&lt;p>Kubernetes 那些事 — Ingress 篇（一）：&lt;a href="https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-ingress-%E7%AF%87-%E4%B8%80-92944d4bf97d" target="_blank" rel="noopener">https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-ingress-%E7%AF%87-%E4%B8%80-92944d4bf97d&lt;/a>&lt;/p>
&lt;p>Kubernetes 那些事 — Ingress 篇（二）：&lt;a href="https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-ingress-%E7%AF%87-%E4%BA%8C-559c7a41404b" target="_blank" rel="noopener">https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-ingress-%E7%AF%87-%E4%BA%8C-559c7a41404b&lt;/a>&lt;/p>
&lt;p>Kubernetes 那些事 — Stateless 與 Stateful：&lt;a href="https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-stateless-%E8%88%87stateful-2c68cebdd635" target="_blank" rel="noopener">https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-stateless-%E8%88%87stateful-2c68cebdd635&lt;/a>&lt;/p>
&lt;p>kubernetes ReplicationController：&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/&lt;/a>&lt;/p>
&lt;p>Kubernetes 那些事 — Replication Controller：&lt;a href="https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-replication-controller-5c8592d37083" target="_blank" rel="noopener">https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-replication-controller-5c8592d37083&lt;/a>&lt;/p>
&lt;p>Kubernetes 那些事 — Deployment 與 ReplicaSet（一）：&lt;a href="https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-deployment-%E8%88%87-replicaset-%E4%B8%80-406234a63d43" target="_blank" rel="noopener">https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-deployment-%E8%88%87-replicaset-%E4%B8%80-406234a63d43&lt;/a>&lt;/p>
&lt;p>Kubernetes 那些事 — Deployment 與 ReplicaSet（二）：&lt;a href="https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-deployment-%E8%88%87-replicaset-%E4%BA%8C-f60146c878e4" target="_blank" rel="noopener">https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-deployment-%E8%88%87-replicaset-%E4%BA%8C-f60146c878e4&lt;/a>&lt;/p>
&lt;p>Kubernetes 那些事 — Deployment 與 ReplicaSet（三）：&lt;a href="https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-deployment-%E8%88%87-replicaset-%E4%B8%89-142b2863eb94" target="_blank" rel="noopener">https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-deployment-%E8%88%87-replicaset-%E4%B8%89-142b2863eb94&lt;/a>&lt;/p>
&lt;p>kubernetes Deployments：&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&lt;/a>&lt;/p>
&lt;p>[Kubernetes] StatefulSet Overview：&lt;a href="https://godleon.github.io/blog/Kubernetes/k8s-StatefulSets-Overview/" target="_blank" rel="noopener">https://godleon.github.io/blog/Kubernetes/k8s-StatefulSets-Overview/&lt;/a>&lt;/p></description></item><item><title>Kubernetes (K8s) 介紹 - 基本</title><link>https://pin-yi.me/blog/kubernetes/k8s/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>https://pin-yi.me/blog/kubernetes/k8s/</guid><description>
&lt;h2>什麼是 Kubernetes (K8s)?&lt;span class="hx-absolute -hx-mt-20" id="什麼是-kubernetes-k8s">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-kubernetes-k8s" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Kubernetes 也可以叫 K8s，這個名稱來源希臘語，意思是舵手或是飛行員，所以我們可以看到它的 logo 是一個船舵的標誌，之所以叫 K8s 是因為 Kubernetes 的 k 到 s 中間有 8 的英文字母，為了方便，大家常以這個名稱來稱呼他！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s/logo.webp"
alt="kubernetes logo" width="200">&lt;figcaption>
&lt;p>kubernetes logo&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>Kubernetes 是一種開源可用來自動化部屬、擴展以及管理多個容器的系統，適用於當容器數量增加，需要穩定容器環境，以及管理資源或權限分配的狀況。&lt;/p>
&lt;p>我們之前在 &lt;a href="../../docker/docker" >Docker 介紹&lt;/a> 文章中，已經有介紹以往傳統虛擬機以及容器化的 Docker 差異以及優點，那當我們在管理容器時，其中一個容器出現故障，則需要啟動另一個容器，如果要用手動，會十分麻煩，所以這時就是 Kubernetes 的厲害的地方了，Kubernetes 提供：&lt;/p>
&lt;ul>
&lt;li>服務發現和負載平衡：K8s 可以使用 DNS 名稱或是自己的 IP 位址來公開容器。如果容器流量過高，Kubernetes 能夠使用負載平衡和分配網路流量，能使部署更穩定。&lt;/li>
&lt;li>編排儲存：Kubernetes 允許使用自動掛載來選擇儲存系統，例如使用本地儲存，或是公共雲等。&lt;/li>
&lt;li>自動部署、刪除：可以使用 Kubernetes 來幫我們自動化部屬新的容器、刪除現有的容器並將其資源用於新容器。&lt;/li>
&lt;li>自動打包：當我們為 Kubernetes 提供一個節點叢集，它可以用來運行容器化的任務，告訴 Kubernetes 每個容器需要多少 CPU 和 RAM。Kubernetes 可以將容器安裝到節點上，充分利用資源。&lt;/li>
&lt;li>自動修復：Kubernetes 會重新啟動失敗的容器、替換容器、刪除不回應用戶的不健康容器，並且在容器準備好服務之前不會通知客戶端。&lt;/li>
&lt;li>機密和配置管理：Kubernetes 允許儲存和管理敏感訊息，例如密碼、OAuth token 和 SSH 金鑰。可以部署和更新機密的應用程序配置。&lt;/li>
&lt;/ul>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s/flower.webp"
alt="kubernetes 官網" width="600">&lt;figcaption>
&lt;p>&lt;a href="https://kubernetes.io/" target="_blank" rel="noopener">kubernetes 官網&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>Kubernetes 很常被拿來與 Docker Swarm 做比較，兩者不同的是，Docker Swarm 必須建構在 Docker 的架構下，功能侷限、無法跳脫。&lt;/p>
&lt;p>Kubernetes 則因為功能較為廣泛，而逐漸取代 Docker Swarm 在市場上的地位。下方有簡易的比較表格：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">比較&lt;/th>
&lt;th style="text-align: center">Kubernetes&lt;/th>
&lt;th style="text-align: center">Docker Swarm&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">說明&lt;/td>
&lt;td style="text-align: center">Kubernetes 是一個開源容器的編排平台，Kubernetes 的叢集結構比 Docker Swarm 更為複雜。&lt;br> Kubernetes 通常有建構器和工作節點，還可進一步分為 Pod、命名空間、配置映射等。&lt;/td>
&lt;td style="text-align: center">Docker Swarm 是一個由 Docker 構建和維護的開源容器編排平台。&lt;br>一個 Docker Swarm 叢集通常包含三個項目：Nodes、Services and tasks、Load balancers。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">優點&lt;/td>
&lt;td style="text-align: center">它有龐大的開源社群，由 Google 支持。&lt;br>它可以維持和管理大型架構和複雜的工作負載。&lt;br>它是自動化，並支持自動化擴展的自我修護能力。&lt;br>它有內建監控和廣泛的可用集成。&lt;/td>
&lt;td style="text-align: center">Docker Swarm 安裝簡單，它輕量化且容易學習使用。&lt;br>Docker Swarm 與 Docker CLI 一起運作，因此不需要多運行或是安裝新的 CLI&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">缺點&lt;/td>
&lt;td style="text-align: center">它複雜的安裝過程以及較難學習&lt;br>它需要安裝單獨的 CLI 工具並且學習每一項功能&lt;/td>
&lt;td style="text-align: center">它是輕量級且與 Docker API 相關聯，與 Kubernetes 相比，Docker Swarm 被限制很多功能，且自動化也沒有 Kubernetes 強大。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;br>
&lt;h2>Kubernetes 元件介紹與說明&lt;span class="hx-absolute -hx-mt-20" id="kubernetes-元件介紹與說明">&lt;/span>
&lt;a href="#kubernetes-%e5%85%83%e4%bb%b6%e4%bb%8b%e7%b4%b9%e8%88%87%e8%aa%aa%e6%98%8e" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Kubernetes 是如何幫我們管理以及部署 Container ? 要了解 Kubernetes 如何運作，就要先了解它的元件以及架構：&lt;/p>
&lt;p>那我們由小的往大的來做介紹：依序是 Pod、Worker Node、Master Node、Cluster&lt;/p>
&lt;h3>Pod&lt;span class="hx-absolute -hx-mt-20" id="pod">&lt;/span>
&lt;a href="#pod" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Kubernetes 運作中最小的單位，一個 Pod 會對應到一個應用服務 (Application)，舉例來說一個 Pod 可能會對應到一個 NginxServer。&lt;/p>
&lt;ul>
&lt;li>每個 Pod 都有一個定義文件，也就是屬於這個 Pod 的 &lt;code>yaml&lt;/code> 檔。&lt;/li>
&lt;li>一個 Pod 裡面可以有一個或多個 Container，但一般情況一個 Pod 最好只有一個 Container。&lt;/li>
&lt;li>同一個 Pod 中的 Containers 共享相同的資源以及網路，彼此透過 local port number 溝通。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>Worker Node&lt;span class="hx-absolute -hx-mt-20" id="worker-node">&lt;/span>
&lt;a href="#worker-node" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Kubernetes 運作的最小硬體單位，一個 Worker Node (簡稱 Node) 對應到一台機器，可以是實體例如你的筆電、或是虛擬機例如 GCP 上的一台 Computer Engine。&lt;/p>
&lt;p>每一個 Node 都有三個組件所組成：kubelet、kube-proxy、Container Runtime&lt;/p>
&lt;h4>kubelet&lt;span class="hx-absolute -hx-mt-20" id="kubelet">&lt;/span>
&lt;a href="#kubelet" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>該 Node 的管理員，負責管理該 Node 上的所有 Pods 的狀態並負責與 Master Node 溝通。&lt;/p>
&lt;br>
&lt;h4>kube-proxy&lt;span class="hx-absolute -hx-mt-20" id="kube-proxy">&lt;/span>
&lt;a href="#kube-proxy" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>該 Node 的傳訊員，負責更新 Node 的 iptables，讓 Kubernetes 中不在該 Node 的其他物件可以得知該 Node 上的所有 Pods 的最新狀態。&lt;/p>
&lt;br>
&lt;h4>Container Runtime&lt;span class="hx-absolute -hx-mt-20" id="container-runtime">&lt;/span>
&lt;a href="#container-runtime" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>該 Node 真正負責容器執行的程式，K8s 預設是 &lt;code>Docker&lt;/code>，但也支援其他 Runtime Engine，例如 Mirantis Container Runtime、CRI-O、containerd&lt;/p>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>常見誤解：&lt;/p>
&lt;p>很多人認為 Kubernetes 是 &lt;code>docker container&lt;/code> 的管理工具，包含我一開始也是這樣認為，但其實 Kubernetes 是用來管理容器化 (&lt;code>containerized applications&lt;/code>) &lt;strong>並不是專屬於 &lt;code>docker&lt;/code>&lt;/strong> 獨享，作為一個 &lt;code>container orchestrator&lt;/code> 的角色，Kubernetes 希望&lt;strong>能夠管理所有容器化&lt;/strong>的應用程式&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3>Master Node&lt;span class="hx-absolute -hx-mt-20" id="master-node">&lt;/span>
&lt;a href="#master-node" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Kubernetes 運作的指揮中心，可以簡化看成一個特殊化的 Node 來負責管理所有其他的 Node。&lt;/p>
&lt;p>一個 Master Node (簡稱 Master) 中有四個組件組成：kube-apiserver、etcd、kube-scheduler、kube-controller-manager&lt;/p>
&lt;h4>kube-apiserver&lt;span class="hx-absolute -hx-mt-20" id="kube-apiserver">&lt;/span>
&lt;a href="#kube-apiserver" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>管理整個 Kubernetes 所需 API 的接口 (Endpoint)，例如從 Command Line 下 kubectl 指令就會把指令送到這裡。&lt;/li>
&lt;li>負責 Node 之間的構通橋樑，每個 Node 彼此不能直接溝通，必須要透過 apiserver 轉介。&lt;/li>
&lt;li>負責 Kubernetes 中的請求的身份認證與授權。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h4>etcd&lt;span class="hx-absolute -hx-mt-20" id="etcd">&lt;/span>
&lt;a href="#etcd" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>etcd 是兼具一制性和高可用性的分散式鍵值數據庫，可以保存 Kubernetes 所有 Cluster 的後台數據庫。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h4>kube-scheduler&lt;span class="hx-absolute -hx-mt-20" id="kube-scheduler">&lt;/span>
&lt;a href="#kube-scheduler" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>整個 Kubernetes 的 Pods 調度員，scheduler 會監視新建立但還沒有被指定要跑在哪個 Node 上的 Pod ，並根據每個 Node 上面資源規定，硬體限制等條件去協調出一個最適合放置 Node 來讓該 Pod 運行。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h4>kube-controller-manager&lt;span class="hx-absolute -hx-mt-20" id="kube-controller-manager">&lt;/span>
&lt;a href="#kube-controller-manager" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>負責管理並運行 Kubernetes controller 的組件，簡單來說 controller 就是 Kubernetes 裡一個負責監視 Cluster 狀態的 Process，例如：Node Controller、Replication Controller。&lt;/li>
&lt;li>這些 Process 會在 Cluster 與預期狀態 (desire state) 不符時嘗試更新現有狀態 (current state)。例如：現在要多開一台機器以應付突然增加的流量，那我的預期狀態就會更新成 N+1，現有狀態是 N，這時相對應的 controller 就會想辦法多開一台機器。&lt;/li>
&lt;li>controller-manager 的監視與嘗試更新也都需要透過訪問 kube-apiserver 達成。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>Cluster&lt;span class="hx-absolute -hx-mt-20" id="cluster">&lt;/span>
&lt;a href="#cluster" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Cluster 也叫叢集，可以管理眾多機器的存在，在一般的系統架設中我們不會只有一台機器而已，通常都是多個機器一起運行同一種內容，在沒有 Kubernetes 的時候就必須要土法煉鋼的一台一台機器去更新，但有了 Kubernetes 我們就可以透過 Cluster 進行控管，只要更新 Master 旗下的機器，也會一併將更新的內容放上去，十分方便。在 Kubernetes 中多個 Worker Node 與 Master Node 的集合。&lt;/p>
&lt;br>
&lt;h2>基本運作&lt;span class="hx-absolute -hx-mt-20" id="基本運作">&lt;/span>
&lt;a href="#%e5%9f%ba%e6%9c%ac%e9%81%8b%e4%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s/k8s.webp"
alt="kubernetes 組件 Kubernetes 基礎教學（一）原理介紹" width="600">&lt;figcaption>
&lt;p>kubernetes 組件 &lt;a href="https://cwhu.medium.com/kubernetes-basic-concept-tutorial-e033e3504ec0" target="_blank" rel="noopener">Kubernetes 基礎教學（一）原理介紹&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>接下來我們用 「Kuberntes 是如何建立一個 Pod ？」來複習一下整個 Kubernetes 的架構。&lt;/p>
&lt;p>(上圖是一個簡易的 Kubernetes Cluster ，通常 Cluster 為了高穩定性都會有多個 Master 作為備援，但為了簡化我們只顯示一個。)&lt;/p>
&lt;ol>
&lt;li>當使用者要部署一個新的 Pod 到 Kubernetes Cluster 時，使用者要先透過 User Command (kubectl) 輸入建立 Pod 對應的指令 (後面會說明要如何實際的動手建立一個 Pod)。此時指令會經過一層確認使用者身份後，傳遞到 Master Node 中的 API Server，API Server 會把指令備份到 etcd。&lt;/li>
&lt;li>controller-manager 會從 API Server 收到需要創建一個新的 Pod 的訊息，並檢查如果資源許可，就會建立一個新的 Pod。最後 Scheduler 在定期訪問 API Server 時，會詢問 controller-manager 是否有建置新的 Pod，如果發現新建立的 Pod 時，Scheduler 就會負責把 Pod 配送到最適合的 Node 上面。&lt;/li>
&lt;/ol>
&lt;p>雖然上面基本的運作看起來十分複雜，但其實我們在實際操作時，只是需入一行指令後，剩下的都是 Kubernetes 會自動幫我們完成後續的動作。&lt;/p>
&lt;h2>安裝 Kubernetes&lt;span class="hx-absolute -hx-mt-20" id="安裝-kubernetes">&lt;/span>
&lt;a href="#%e5%ae%89%e8%a3%9d-kubernetes" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>在我們開始操作 Kubernetes 之前，需要先下載 Minikube、Hyperkit、Kubectl 套件：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://minikube.sigs.k8s.io/docs/start/" target="_blank" rel="noopener">Minikube&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一個 Google 發佈的輕量級工具，讓開發者可以輕鬆體驗一個 Kubernetes Cluster。&lt;font color='red'>(僅限開發測試環境)&lt;/font>&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s/minikube.webp"
alt="安裝 minikube" width="900">&lt;figcaption>
&lt;p>安裝 minikube&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ul>
&lt;li>(Mac 專用) &lt;a href="https://minikube.sigs.k8s.io/docs/drivers/hyperkit/" target="_blank" rel="noopener">Hyperkit&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Hyperkit 是 MacOS 系統細部設定的驅動程式。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s/hyperkit.webp"
alt="安裝 hyperkit" width="900">&lt;figcaption>
&lt;p>安裝 hyperkit&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/tools/" target="_blank" rel="noopener">Kubectl&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Kubectl 是 Kubernetes 的 Command Line 工具，我們之後會透過 Kubectl 去操作我們的 Kubernetes Cluster。&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s/kubectl.webp"
alt="安裝 kubectl" width="800">&lt;figcaption>
&lt;p>安裝 kubectl&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h2>如何建立一個 Pod&lt;span class="hx-absolute -hx-mt-20" id="如何建立一個-pod">&lt;/span>
&lt;a href="#%e5%a6%82%e4%bd%95%e5%bb%ba%e7%ab%8b%e4%b8%80%e5%80%8b-pod" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>版本資訊&lt;/p>
&lt;ul>
&lt;li>Minikube：v1.25.2&lt;/li>
&lt;li>hyperkit：0.20200908&lt;/li>
&lt;li>Kubectl：Client Version：v1.22.5、Server Version：v1.23.3&lt;/li>
&lt;/ul>
&lt;p>下載完 Minikube 後，我們可以先透過 &lt;code>Minikube&lt;/code> 來查詢全部的指令，由於我們前面有安裝 Hyperkit 這個驅動程式，啟動 Minikube 預設是使用 Docker，我們這邊要利用 Hyperkit 來啟動，所以使用 &lt;code>Minikube start --vm-driver=hyperkit&lt;/code> 來啟動 Minikube。&lt;/p>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>Minikube 其他指令介紹：&lt;/p>
&lt;p>顯示 minikube 狀態 &lt;code>minikube status&lt;/code>&lt;/p>
&lt;p>停止 minikube 運行 &lt;code>minikube stop&lt;/code>&lt;/p>
&lt;p>ssh 進入 minikube 中 &lt;code>minikube ssh&lt;/code>&lt;/p>
&lt;p>查詢 minikube 對外的 ip &lt;code>minikube ip&lt;/code>&lt;/p>
&lt;p>使用 minikube 所提供的瀏覽器 GUI &lt;code>minikube dashboard &lt;/code> (可以加 - - url 看網址歐)&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>我們啟動 minikube 後，我們要打做一個可以在 Pod 運行的小程式。這個小程式是一個 Node.js 的 Web 程式，他會建立一個 Server 來監聽 3000 Port，收到 request 進來後會渲染 &lt;code>index.html&lt;/code> 這個檔案，這個檔案裡面會有一隻可愛的小柴犬。&lt;/p>
&lt;p>因為本文章是在介紹 kubernetes 所以在程式部分就不多做說明，我把程式碼放在 &lt;a href="https://github.com/880831ian/kubernetes-demo" target="_blank" rel="noopener">Github&lt;/a>，以及附上 &lt;a href="https://hub.docker.com/repository/docker/880831ian/kubernetes-demo" target="_blank" rel="noopener">Dockerhub 的 Repository&lt;/a> 可以直接使用包好的 image 來做測試！&lt;/p>
&lt;br>
&lt;h3>Pod yaml 檔案說明&lt;span class="hx-absolute -hx-mt-20" id="pod-yaml-檔案說明">&lt;/span>
&lt;a href="#pod-yaml-%e6%aa%94%e6%a1%88%e8%aa%aa%e6%98%8e" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>接下來我們要先撰寫一個 Pod 的定義文件 (.yaml) 檔，這個 &lt;code>.yaml&lt;/code> 檔就可以建立出 Pod 了！&lt;/p>
&lt;ul>
&lt;li>kubernetes-demo.yaml (程式縮排要正確，不然會無法執行歐！)&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo-pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo-container&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">880831ian/kubernetes-demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">3000&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>apiVersion&lt;/p>
&lt;p>該元件的版本號，必須依照 Server 上 K8s 版本來做設定 (想要知道 k8s 版本，可以使用 &lt;code>kubectl version&lt;/code> 指令來查詢，會顯示 client 跟 server 的版本訊息，client 代表 kubectl 版本訊息，server 代表的是 master node 的 k8s 版本訊息)，目前 k8s 都使用 1.23 版本以上，所以 &lt;code>apiVersion&lt;/code> 直接寫 &lt;code>v1&lt;/code> 即可。&lt;/p>
&lt;br>
&lt;p>kind&lt;/p>
&lt;p>該元件的屬性，用來決定此設定檔的類型，常見的有 &lt;code>Pod&lt;/code>、&lt;code>Node&lt;/code>、&lt;code>Service&lt;/code>、&lt;code>Namespace&lt;/code>、&lt;code>ReplicationController&lt;/code> 等等&lt;/p>
&lt;br>
&lt;p>metadata&lt;/p>
&lt;p>用來擺放描述性資料的地方，像是 Pod 名稱或是標籤等等都會放在此處。&lt;/p>
&lt;ul>
&lt;li>name：指定該 Pod 的名稱&lt;/li>
&lt;li>labels：指定該 Pod 的標籤&lt;/li>
&lt;/ul>
&lt;br>
&lt;p>spec&lt;/p>
&lt;p>用來描述物件生成的細節，像是 Pod 內其實是跑 Dokcer container，所以在 Pod 的 spec 內就會描述 container 的細節。&lt;/p>
&lt;ul>
&lt;li>container.name：指定運行的 Container 的名稱&lt;/li>
&lt;li>container.image：指定 Container 要使用哪個 Image，這裡會從 DockerHub 上搜尋&lt;/li>
&lt;li>container.ports：指定該 Container 有哪些 Port number 是允許外部存取的&lt;/li>
&lt;/ul>
&lt;br>
&lt;h3>使用 kubectl 建立 Pod&lt;span class="hx-absolute -hx-mt-20" id="使用-kubectl-建立-pod">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8-kubectl-%e5%bb%ba%e7%ab%8b-pod" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>當我們有了定義文件後，我們就可以使用 kubectl 的指令來建立 Pod&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl create -f kubernetes-demo.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl apply -f kubernetes-demo.yaml&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>可以使用 &lt;code>create&lt;/code> or &lt;code>apply&lt;/code> 來建立 Pod ，那這兩個的差異是什麼呢？&lt;/p>
&lt;ul>
&lt;li>kubectl create&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>&lt;code>kubectl create&lt;/code> 是所謂的 &amp;ldquo;命令式管理&amp;rdquo; (&lt;code>Imperative Management&lt;/code>)。通過這種方式，可以告訴 Kubernets API 你要建立、更新、刪除的內容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>kubectl create&lt;/code> 命令是先刪除所有現有的東西，重新根據 YAML 文件生成新的 Pod。所以要求 YAML 文件中的配置必須完整。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>kubectl create&lt;/code> 命令，使用同一個 YAML 文件重複建立會失敗。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;br>
&lt;ul>
&lt;li>kubectl apply&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>&lt;code>kubectl apply&lt;/code> 是 &amp;ldquo;聲明式管理&amp;rdquo; (&lt;code>Declarative Management&lt;/code>)方法的一部分。在該方法中，即使對目標用了其他更新，也可以保持你對目標應用的更新。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>kubectl apply&lt;/code> 命令，根據配置文件裡面出來的內容，生成就有的。所以 YAML 文件的內容可以只寫需要升級的欄位。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;br>
&lt;p>如果看到 &lt;code>pod/kubernetes-demo-pod created&lt;/code> 就代表我們成功建立第一個 Pod 了，接下來我們可以使用：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl get pods&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>可以查看我們運行中的 Pod：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubernetes-demo-pod 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 3m5s&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>Pod 指令介紹：&lt;/p>
&lt;p>查詢現有 Pod 狀態 &lt;code>kubectl get po/pod/pods&lt;/code>&lt;/p>
&lt;p>查看該 Pod 詳細資訊 &lt;code>kubectl describe pods &amp;lt;pod-name&amp;gt;&lt;/code>&lt;/p>
&lt;p>刪除 Pod &lt;code>kubectl delete pods&lt;/code>&lt;/p>
&lt;p>查看 Pod log &lt;code>kubectl logs &amp;lt;pod-name&amp;gt;&lt;/code>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;br>
&lt;p>也可以使用 minikube 圖形化頁面來看一下是否成功！&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>minikube dashboard --url
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>🤔 Verifying dashboard health ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>🚀 Launching proxy ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>🤔 Verifying proxy health ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http://127.0.0.1:55991/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s/minikube-k8s.webp"
alt="minikube dashboard" width="1000">&lt;figcaption>
&lt;p>minikube dashboard&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;h3>連線到 Pod 的服務&lt;span class="hx-absolute -hx-mt-20" id="連線到-pod-的服務">&lt;/span>
&lt;a href="#%e9%80%a3%e7%b7%9a%e5%88%b0-pod-%e7%9a%84%e6%9c%8d%e5%8b%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>當我們建立好 Pod 之後，打開瀏覽器 &lt;code>localhost:3000&lt;/code> 會發現，什麼都沒有，是因為我們剛剛在 &lt;code>.yaml&lt;/code> 裡面設定的是 Pod 的 Port ，它與本機的 Port 是不相通的，因此我們需要使用 &lt;code>kubectl port-forward &amp;lt;pod&amp;gt; &amp;lt;external-port&amp;gt;:&amp;lt;pod-port&amp;gt;&lt;/code> ，來將 Pod 與本機端做 mapping。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl port-forward kubernetes-demo-pod 3000:3000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Forwarding from 127.0.0.1:3000 -&amp;gt; &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Forwarding from &lt;span style="color:#f92672">[&lt;/span>::1&lt;span style="color:#f92672">]&lt;/span>:3000 -&amp;gt; &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Handling connection &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#ae81ff">3000&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>我們在此瀏覽 &lt;code>localhost:3000&lt;/code>，就會看到可愛的柴犬囉！&lt;/p>
&lt;br>
&lt;figure>&lt;img src="https://pin-yi.me/kubernetes/k8s/Shiba-Inu.webp"
alt="成功顯示柴犬" width="900">&lt;figcaption>
&lt;p>成功顯示柴犬&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;p>前面我們已經創建屬於我們第一個 Pod 了，但當我們 Pod 越建越多時，要怎麼快速的得知每個 Pod 在做什麼事情？除了用 Pod 的 metadata name 來命名外，還有另一種方式：&lt;/p>
&lt;h2>什麼是 Label ?&lt;span class="hx-absolute -hx-mt-20" id="什麼是-label-">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-label-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Label 顧名思義就是標籤，可以為每一個 Pod 貼上標籤，讓 Kubernetes 更方便的管控這些 Pod。&lt;/p>
&lt;p>Label 的寫法很簡單，可以自己自訂一對具有辨識度的 key/value，舉我們上面的例子來說：我們可以在 labels 內加入 &lt;code>app: demo&lt;/code>，那 Label 有什麼好處呢?&lt;/p>
&lt;p>這邊要稍微提一下 &lt;code>Selector&lt;/code>，它的功用是選取對應的物件。為了要方便選取到我們設定好的 Pod，這時候 Label 就派上用場了！&lt;/p>
&lt;p>&lt;code>Selector&lt;/code> 的寫法也很簡單，只要把我們在 Label 定義的 key/value 直接完整的貼過來就可以了～&lt;/p>
&lt;br>
&lt;p>就像這樣：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">selectors&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>那選取後有什麼功用呢！請看 &lt;a href="../../kubernetes/k8s-advanced/#%E4%BB%80%E9%BA%BC%E6%98%AF-service-" >Kubernetes - 進階 - Service&lt;/a>&lt;/p>
&lt;br>
&lt;p>講完 Label 後，順邊提一下跟 Label 有相似的：&lt;/p>
&lt;h2>什麼是 Annotation ?&lt;span class="hx-absolute -hx-mt-20" id="什麼是-annotation-">&lt;/span>
&lt;a href="#%e4%bb%80%e9%ba%bc%e6%98%af-annotation-" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>前面提到的 Label 功用其目的是要讓 Kubernetes 知道可以去更方便管理的，那我們如果想要貼標籤但不想讓 Kubernetes 知道，要怎麼做呢？&lt;/p>
&lt;p>這時我們就可以用 &lt;code>Annotation&lt;/code>，透過 &lt;code>Annotation&lt;/code> 可以將標籤單純給開發人員查看，那聽起來 &lt;code>Annotation&lt;/code> 好像沒有什麼實質上的用途，因為 Kubernetes 不會採用這些標籤，但其實 &lt;code>Annotation&lt;/code> 還是有用的歐！後續文章會再提到 &amp;gt;&amp;lt;&lt;/p>
&lt;br>
&lt;p>那既然 Label 跟 Annotation 有相似，所以寫法想必也是差不多吧：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">author&lt;/span>: &lt;span style="color:#ae81ff">Pin-YI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">contact&lt;/span>: &lt;span style="color:#ae81ff">880831ian@gmail.com&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>一樣也是定義一組具有辨識度的 key/value ，我們這邊就先放 author、contact&lt;/p>
&lt;br>
&lt;p>那 Label 與 Annotation 要放在 Pod 的哪一處呢？&lt;/p>
&lt;p>還記得我們上面說 &lt;code>metadata&lt;/code> 是用來擺描述性資料的地方嗎，所以不管是 Label 或是 Annotation 都是放在 &lt;code>metadata&lt;/code> 中歐！&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-demo-pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">author&lt;/span>: &lt;span style="color:#ae81ff">Pin-YI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">contact&lt;/span>: &lt;span style="color:#ae81ff">880831ian@gmail.com&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2>參考資料&lt;span class="hx-absolute -hx-mt-20" id="參考資料">&lt;/span>
&lt;a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>kubernetes 官網：&lt;a href="https://kubernetes.io/" target="_blank" rel="noopener">https://kubernetes.io/&lt;/a>&lt;/p>
&lt;p>Kubernetes（K8s）是什麼？基礎介紹+3 大優點解析：&lt;a href="https://www.sysage.com.tw/news/technology/293" target="_blank" rel="noopener">https://www.sysage.com.tw/news/technology/293&lt;/a>&lt;/p>
&lt;p>Docker Swarm vs Kubernetes: how to choose a container orchestration tool：&lt;a href="https://circleci.com/blog/docker-swarm-vs-kubernetes/" target="_blank" rel="noopener">https://circleci.com/blog/docker-swarm-vs-kubernetes/&lt;/a>&lt;/p>
&lt;p>Kubernetes 基礎教學（一）原理介紹：&lt;a href="https://cwhu.medium.com/kubernetes-basic-concept-tutorial-e033e3504ec0" target="_blank" rel="noopener">https://cwhu.medium.com/kubernetes-basic-concept-tutorial-e033e3504ec0&lt;/a>&lt;/p>
&lt;p>Kubernetes 那些事 — 基礎觀念與操作：&lt;a href="https://medium.com/andy-blog/kubernetes%E9%82%A3%E4%BA%9B%E4%BA%8B-%E5%9F%BA%E7%A4%8E%E8%A7%80%E5%BF%B5%E8%88%87%E6%93%8D%E4%BD%9C-97cc203a2660" target="_blank" rel="noopener">https://medium.com/andy-blog/kubernetes%E9%82%A3%E4%BA%9B%E4%BA%8B-%E5%9F%BA%E7%A4%8E%E8%A7%80%E5%BF%B5%E8%88%87%E6%93%8D%E4%BD%9C-97cc203a2660&lt;/a>&lt;/p>
&lt;p>Kubernetes 那些事 — Pod 篇：&lt;a href="https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-pod-%E7%AF%87-57475cec22f3" target="_blank" rel="noopener">https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-pod-%E7%AF%87-57475cec22f3&lt;/a>&lt;/p>
&lt;p>Kubernetes 那些事 — Label 篇：&lt;a href="https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-label-%E7%AF%87-4186af2af556" target="_blank" rel="noopener">https://medium.com/andy-blog/kubernetes-%E9%82%A3%E4%BA%9B%E4%BA%8B-label-%E7%AF%87-4186af2af556&lt;/a>&lt;/p></description></item></channel></rss>